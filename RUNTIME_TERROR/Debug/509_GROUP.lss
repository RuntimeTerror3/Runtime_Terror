
509_GROUP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002da  00800060  00003982  00003a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  0080033a  0080033a  00003cf0  2**0
                  ALLOC
  3 .stab         00006f18  00000000  00000000  00003cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000240e  00000000  00000000  0000ac08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d016  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f6  00000000  00000000  0000d1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002393  00000000  00000000  0000d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001374  00000000  00000000  0000f73f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001238  00000000  00000000  00010ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ff  00000000  00000000  00011eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009de  00000000  00000000  000121ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012b89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__vector_1>
       8:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_2>
       c:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <main>
      8a:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e2       	ldi	r26, 0x21	; 33
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e2       	ldi	r24, 0x21	; 33
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e2       	ldi	r22, 0x21	; 33
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__epilogue_restores__+0x18>

0000084a <__floatsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__prologue_saves__+0x12>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	da 01       	movw	r26, r20
     860:	c9 01       	movw	r24, r18
     862:	88 27       	eor	r24, r24
     864:	b7 fd       	sbrc	r27, 7
     866:	83 95       	inc	r24
     868:	99 27       	eor	r25, r25
     86a:	aa 27       	eor	r26, r26
     86c:	bb 27       	eor	r27, r27
     86e:	b8 2e       	mov	r11, r24
     870:	21 15       	cp	r18, r1
     872:	31 05       	cpc	r19, r1
     874:	41 05       	cpc	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	19 f4       	brne	.+6      	; 0x880 <__stack+0x21>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	3a c0       	rjmp	.+116    	; 0x8f4 <__stack+0x95>
     880:	88 23       	and	r24, r24
     882:	a9 f0       	breq	.+42     	; 0x8ae <__stack+0x4f>
     884:	20 30       	cpi	r18, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	38 07       	cpc	r19, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	48 07       	cpc	r20, r24
     88e:	80 e8       	ldi	r24, 0x80	; 128
     890:	58 07       	cpc	r21, r24
     892:	29 f4       	brne	.+10     	; 0x89e <__stack+0x3f>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	9f ec       	ldi	r25, 0xCF	; 207
     89c:	30 c0       	rjmp	.+96     	; 0x8fe <__stack+0x9f>
     89e:	ee 24       	eor	r14, r14
     8a0:	ff 24       	eor	r15, r15
     8a2:	87 01       	movw	r16, r14
     8a4:	e2 1a       	sub	r14, r18
     8a6:	f3 0a       	sbc	r15, r19
     8a8:	04 0b       	sbc	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	79 01       	movw	r14, r18
     8b0:	8a 01       	movw	r16, r20
     8b2:	8e e1       	ldi	r24, 0x1E	; 30
     8b4:	c8 2e       	mov	r12, r24
     8b6:	d1 2c       	mov	r13, r1
     8b8:	dc 82       	std	Y+4, r13	; 0x04
     8ba:	cb 82       	std	Y+3, r12	; 0x03
     8bc:	ed 82       	std	Y+5, r14	; 0x05
     8be:	fe 82       	std	Y+6, r15	; 0x06
     8c0:	0f 83       	std	Y+7, r16	; 0x07
     8c2:	18 87       	std	Y+8, r17	; 0x08
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__stack+0x95>
     8d4:	08 2e       	mov	r0, r24
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	ee 0c       	add	r14, r14
     8da:	ff 1c       	adc	r15, r15
     8dc:	00 1f       	adc	r16, r16
     8de:	11 1f       	adc	r17, r17
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__stack+0x79>
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 1a       	sub	r12, r24
     8ee:	d9 0a       	sbc	r13, r25
     8f0:	dc 82       	std	Y+4, r13	; 0x04
     8f2:	cb 82       	std	Y+3, r12	; 0x03
     8f4:	ba 82       	std	Y+2, r11	; 0x02
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     8fe:	28 96       	adiw	r28, 0x08	; 8
     900:	e9 e0       	ldi	r30, 0x09	; 9
     902:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__+0x12>

00000906 <__fixsfsi>:
     906:	ac e0       	ldi	r26, 0x0C	; 12
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <__prologue_saves__+0x20>
     912:	69 83       	std	Y+1, r22	; 0x01
     914:	7a 83       	std	Y+2, r23	; 0x02
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	be 01       	movw	r22, r28
     920:	6b 5f       	subi	r22, 0xFB	; 251
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	61 f1       	breq	.+88     	; 0x986 <__fixsfsi+0x80>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	50 f1       	brcs	.+84     	; 0x986 <__fixsfsi+0x80>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	21 f4       	brne	.+8      	; 0x93e <__fixsfsi+0x38>
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	88 23       	and	r24, r24
     93a:	51 f1       	breq	.+84     	; 0x990 <__fixsfsi+0x8a>
     93c:	2e c0       	rjmp	.+92     	; 0x99a <__fixsfsi+0x94>
     93e:	2f 81       	ldd	r18, Y+7	; 0x07
     940:	38 85       	ldd	r19, Y+8	; 0x08
     942:	37 fd       	sbrc	r19, 7
     944:	20 c0       	rjmp	.+64     	; 0x986 <__fixsfsi+0x80>
     946:	6e 81       	ldd	r22, Y+6	; 0x06
     948:	2f 31       	cpi	r18, 0x1F	; 31
     94a:	31 05       	cpc	r19, r1
     94c:	1c f0       	brlt	.+6      	; 0x954 <__fixsfsi+0x4e>
     94e:	66 23       	and	r22, r22
     950:	f9 f0       	breq	.+62     	; 0x990 <__fixsfsi+0x8a>
     952:	23 c0       	rjmp	.+70     	; 0x99a <__fixsfsi+0x94>
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	29 85       	ldd	r18, Y+9	; 0x09
     95e:	3a 85       	ldd	r19, Y+10	; 0x0a
     960:	4b 85       	ldd	r20, Y+11	; 0x0b
     962:	5c 85       	ldd	r21, Y+12	; 0x0c
     964:	04 c0       	rjmp	.+8      	; 0x96e <__fixsfsi+0x68>
     966:	56 95       	lsr	r21
     968:	47 95       	ror	r20
     96a:	37 95       	ror	r19
     96c:	27 95       	ror	r18
     96e:	8a 95       	dec	r24
     970:	d2 f7       	brpl	.-12     	; 0x966 <__fixsfsi+0x60>
     972:	66 23       	and	r22, r22
     974:	b1 f0       	breq	.+44     	; 0x9a2 <__fixsfsi+0x9c>
     976:	50 95       	com	r21
     978:	40 95       	com	r20
     97a:	30 95       	com	r19
     97c:	21 95       	neg	r18
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <__fixsfsi+0x9c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__fixsfsi+0x9c>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f ef       	ldi	r20, 0xFF	; 255
     996:	5f e7       	ldi	r21, 0x7F	; 127
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <__fixsfsi+0x9c>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e8       	ldi	r21, 0x80	; 128
     9a2:	b9 01       	movw	r22, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	2c 96       	adiw	r28, 0x0c	; 12
     9a8:	e2 e0       	ldi	r30, 0x02	; 2
     9aa:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__epilogue_restores__+0x20>

000009ae <__floatunsisf>:
     9ae:	a8 e0       	ldi	r26, 0x08	; 8
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__prologue_saves__+0x10>
     9ba:	7b 01       	movw	r14, r22
     9bc:	8c 01       	movw	r16, r24
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	81 05       	cpc	r24, r1
     9c4:	91 05       	cpc	r25, r1
     9c6:	19 f4       	brne	.+6      	; 0x9ce <__floatunsisf+0x20>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	60 c0       	rjmp	.+192    	; 0xa8e <__floatunsisf+0xe0>
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	f7 ff       	sbrs	r31, 7
     9f2:	3b c0       	rjmp	.+118    	; 0xa6a <__floatunsisf+0xbc>
     9f4:	22 27       	eor	r18, r18
     9f6:	33 27       	eor	r19, r19
     9f8:	2e 1b       	sub	r18, r30
     9fa:	3f 0b       	sbc	r19, r31
     9fc:	57 01       	movw	r10, r14
     9fe:	68 01       	movw	r12, r16
     a00:	02 2e       	mov	r0, r18
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__floatunsisf+0x5e>
     a04:	d6 94       	lsr	r13
     a06:	c7 94       	ror	r12
     a08:	b7 94       	ror	r11
     a0a:	a7 94       	ror	r10
     a0c:	0a 94       	dec	r0
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__floatunsisf+0x56>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatunsisf+0x7c>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	2a 95       	dec	r18
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatunsisf+0x74>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8e 21       	and	r24, r14
     a36:	9f 21       	and	r25, r15
     a38:	a0 23       	and	r26, r16
     a3a:	b1 23       	and	r27, r17
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	a1 05       	cpc	r26, r1
     a40:	b1 05       	cpc	r27, r1
     a42:	21 f0       	breq	.+8      	; 0xa4c <__floatunsisf+0x9e>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	4a 29       	or	r20, r10
     a4e:	5b 29       	or	r21, r11
     a50:	6c 29       	or	r22, r12
     a52:	7d 29       	or	r23, r13
     a54:	4d 83       	std	Y+5, r20	; 0x05
     a56:	5e 83       	std	Y+6, r21	; 0x06
     a58:	6f 83       	std	Y+7, r22	; 0x07
     a5a:	78 87       	std	Y+8, r23	; 0x08
     a5c:	8e e1       	ldi	r24, 0x1E	; 30
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	8e 1b       	sub	r24, r30
     a62:	9f 0b       	sbc	r25, r31
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	12 c0       	rjmp	.+36     	; 0xa8e <__floatunsisf+0xe0>
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	81 f0       	breq	.+32     	; 0xa8e <__floatunsisf+0xe0>
     a6e:	0e 2e       	mov	r0, r30
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0xcc>
     a72:	ee 0c       	add	r14, r14
     a74:	ff 1c       	adc	r15, r15
     a76:	00 1f       	adc	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	0a 94       	dec	r0
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0xc4>
     a7e:	ed 82       	std	Y+5, r14	; 0x05
     a80:	fe 82       	std	Y+6, r15	; 0x06
     a82:	0f 83       	std	Y+7, r16	; 0x07
     a84:	18 87       	std	Y+8, r17	; 0x08
     a86:	ce 1a       	sub	r12, r30
     a88:	df 0a       	sbc	r13, r31
     a8a:	dc 82       	std	Y+4, r13	; 0x04
     a8c:	cb 82       	std	Y+3, r12	; 0x03
     a8e:	1a 82       	std	Y+2, r1	; 0x02
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     a98:	28 96       	adiw	r28, 0x08	; 8
     a9a:	ea e0       	ldi	r30, 0x0A	; 10
     a9c:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__epilogue_restores__+0x10>

00000aa0 <__clzsi2>:
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	7b 01       	movw	r14, r22
     aaa:	8c 01       	movw	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	e8 16       	cp	r14, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	f8 06       	cpc	r15, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 07       	cpc	r16, r24
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	18 07       	cpc	r17, r24
     abc:	88 f4       	brcc	.+34     	; 0xae0 <__clzsi2+0x40>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	e8 16       	cp	r14, r24
     ac2:	f1 04       	cpc	r15, r1
     ac4:	01 05       	cpc	r16, r1
     ac6:	11 05       	cpc	r17, r1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <__clzsi2+0x36>
     aca:	28 f0       	brcs	.+10     	; 0xad6 <__clzsi2+0x36>
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a0 e0       	ldi	r26, 0x00	; 0
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <__clzsi2+0x64>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	12 c0       	rjmp	.+36     	; 0xb04 <__clzsi2+0x64>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	e8 16       	cp	r14, r24
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	f8 06       	cpc	r15, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 07       	cpc	r16, r24
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	18 07       	cpc	r17, r24
     af0:	28 f0       	brcs	.+10     	; 0xafc <__clzsi2+0x5c>
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__clzsi2+0x64>
     afc:	80 e1       	ldi	r24, 0x10	; 16
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	20 e2       	ldi	r18, 0x20	; 32
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	28 1b       	sub	r18, r24
     b0e:	39 0b       	sbc	r19, r25
     b10:	4a 0b       	sbc	r20, r26
     b12:	5b 0b       	sbc	r21, r27
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__clzsi2+0x7e>
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__clzsi2+0x76>
     b22:	f7 01       	movw	r30, r14
     b24:	e7 5d       	subi	r30, 0xD7	; 215
     b26:	fd 4f       	sbci	r31, 0xFD	; 253
     b28:	80 81       	ld	r24, Z
     b2a:	28 1b       	sub	r18, r24
     b2c:	31 09       	sbc	r19, r1
     b2e:	41 09       	sbc	r20, r1
     b30:	51 09       	sbc	r21, r1
     b32:	c9 01       	movw	r24, r18
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <__pack_f>:
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	fc 01       	movw	r30, r24
     b4a:	e4 80       	ldd	r14, Z+4	; 0x04
     b4c:	f5 80       	ldd	r15, Z+5	; 0x05
     b4e:	06 81       	ldd	r16, Z+6	; 0x06
     b50:	17 81       	ldd	r17, Z+7	; 0x07
     b52:	d1 80       	ldd	r13, Z+1	; 0x01
     b54:	80 81       	ld	r24, Z
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	48 f4       	brcc	.+18     	; 0xb6c <__pack_f+0x2e>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e1       	ldi	r26, 0x10	; 16
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 2a       	or	r14, r24
     b64:	f9 2a       	or	r15, r25
     b66:	0a 2b       	or	r16, r26
     b68:	1b 2b       	or	r17, r27
     b6a:	a5 c0       	rjmp	.+330    	; 0xcb6 <__pack_f+0x178>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	09 f4       	brne	.+2      	; 0xb72 <__pack_f+0x34>
     b70:	9f c0       	rjmp	.+318    	; 0xcb0 <__pack_f+0x172>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	21 f4       	brne	.+8      	; 0xb7e <__pack_f+0x40>
     b76:	ee 24       	eor	r14, r14
     b78:	ff 24       	eor	r15, r15
     b7a:	87 01       	movw	r16, r14
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__pack_f+0x4a>
     b7e:	e1 14       	cp	r14, r1
     b80:	f1 04       	cpc	r15, r1
     b82:	01 05       	cpc	r16, r1
     b84:	11 05       	cpc	r17, r1
     b86:	19 f4       	brne	.+6      	; 0xb8e <__pack_f+0x50>
     b88:	e0 e0       	ldi	r30, 0x00	; 0
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	96 c0       	rjmp	.+300    	; 0xcba <__pack_f+0x17c>
     b8e:	62 81       	ldd	r22, Z+2	; 0x02
     b90:	73 81       	ldd	r23, Z+3	; 0x03
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	62 38       	cpi	r22, 0x82	; 130
     b96:	79 07       	cpc	r23, r25
     b98:	0c f0       	brlt	.+2      	; 0xb9c <__pack_f+0x5e>
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <__pack_f+0x114>
     b9c:	22 e8       	ldi	r18, 0x82	; 130
     b9e:	3f ef       	ldi	r19, 0xFF	; 255
     ba0:	26 1b       	sub	r18, r22
     ba2:	37 0b       	sbc	r19, r23
     ba4:	2a 31       	cpi	r18, 0x1A	; 26
     ba6:	31 05       	cpc	r19, r1
     ba8:	2c f0       	brlt	.+10     	; 0xbb4 <__pack_f+0x76>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	2a c0       	rjmp	.+84     	; 0xc08 <__pack_f+0xca>
     bb4:	b8 01       	movw	r22, r16
     bb6:	a7 01       	movw	r20, r14
     bb8:	02 2e       	mov	r0, r18
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__pack_f+0x86>
     bbc:	76 95       	lsr	r23
     bbe:	67 95       	ror	r22
     bc0:	57 95       	ror	r21
     bc2:	47 95       	ror	r20
     bc4:	0a 94       	dec	r0
     bc6:	d2 f7       	brpl	.-12     	; 0xbbc <__pack_f+0x7e>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__pack_f+0x9c>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	2a 95       	dec	r18
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <__pack_f+0x94>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	8e 21       	and	r24, r14
     be6:	9f 21       	and	r25, r15
     be8:	a0 23       	and	r26, r16
     bea:	b1 23       	and	r27, r17
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__pack_f+0xbe>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	9a 01       	movw	r18, r20
     bfe:	ab 01       	movw	r20, r22
     c00:	28 2b       	or	r18, r24
     c02:	39 2b       	or	r19, r25
     c04:	4a 2b       	or	r20, r26
     c06:	5b 2b       	or	r21, r27
     c08:	da 01       	movw	r26, r20
     c0a:	c9 01       	movw	r24, r18
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	80 34       	cpi	r24, 0x40	; 64
     c16:	91 05       	cpc	r25, r1
     c18:	a1 05       	cpc	r26, r1
     c1a:	b1 05       	cpc	r27, r1
     c1c:	39 f4       	brne	.+14     	; 0xc2c <__pack_f+0xee>
     c1e:	27 ff       	sbrs	r18, 7
     c20:	09 c0       	rjmp	.+18     	; 0xc34 <__pack_f+0xf6>
     c22:	20 5c       	subi	r18, 0xC0	; 192
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	4f 4f       	sbci	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__pack_f+0xf6>
     c2c:	21 5c       	subi	r18, 0xC1	; 193
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	4f 4f       	sbci	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	20 30       	cpi	r18, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	3a 07       	cpc	r19, r26
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	4a 07       	cpc	r20, r26
     c42:	a0 e4       	ldi	r26, 0x40	; 64
     c44:	5a 07       	cpc	r21, r26
     c46:	10 f0       	brcs	.+4      	; 0xc4c <__pack_f+0x10e>
     c48:	e1 e0       	ldi	r30, 0x01	; 1
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	79 01       	movw	r14, r18
     c4e:	8a 01       	movw	r16, r20
     c50:	27 c0       	rjmp	.+78     	; 0xca0 <__pack_f+0x162>
     c52:	60 38       	cpi	r22, 0x80	; 128
     c54:	71 05       	cpc	r23, r1
     c56:	64 f5       	brge	.+88     	; 0xcb0 <__pack_f+0x172>
     c58:	fb 01       	movw	r30, r22
     c5a:	e1 58       	subi	r30, 0x81	; 129
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	d8 01       	movw	r26, r16
     c60:	c7 01       	movw	r24, r14
     c62:	8f 77       	andi	r24, 0x7F	; 127
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	a0 70       	andi	r26, 0x00	; 0
     c68:	b0 70       	andi	r27, 0x00	; 0
     c6a:	80 34       	cpi	r24, 0x40	; 64
     c6c:	91 05       	cpc	r25, r1
     c6e:	a1 05       	cpc	r26, r1
     c70:	b1 05       	cpc	r27, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <__pack_f+0x144>
     c74:	e7 fe       	sbrs	r14, 7
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <__pack_f+0x154>
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__pack_f+0x14c>
     c82:	8f e3       	ldi	r24, 0x3F	; 63
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 0e       	add	r14, r24
     c8c:	f9 1e       	adc	r15, r25
     c8e:	0a 1f       	adc	r16, r26
     c90:	1b 1f       	adc	r17, r27
     c92:	17 ff       	sbrs	r17, 7
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <__pack_f+0x162>
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	16 95       	lsr	r17
     ca4:	07 95       	ror	r16
     ca6:	f7 94       	ror	r15
     ca8:	e7 94       	ror	r14
     caa:	8a 95       	dec	r24
     cac:	d1 f7       	brne	.-12     	; 0xca2 <__pack_f+0x164>
     cae:	05 c0       	rjmp	.+10     	; 0xcba <__pack_f+0x17c>
     cb0:	ee 24       	eor	r14, r14
     cb2:	ff 24       	eor	r15, r15
     cb4:	87 01       	movw	r16, r14
     cb6:	ef ef       	ldi	r30, 0xFF	; 255
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	6e 2f       	mov	r22, r30
     cbc:	67 95       	ror	r22
     cbe:	66 27       	eor	r22, r22
     cc0:	67 95       	ror	r22
     cc2:	90 2f       	mov	r25, r16
     cc4:	9f 77       	andi	r25, 0x7F	; 127
     cc6:	d7 94       	ror	r13
     cc8:	dd 24       	eor	r13, r13
     cca:	d7 94       	ror	r13
     ccc:	8e 2f       	mov	r24, r30
     cce:	86 95       	lsr	r24
     cd0:	49 2f       	mov	r20, r25
     cd2:	46 2b       	or	r20, r22
     cd4:	58 2f       	mov	r21, r24
     cd6:	5d 29       	or	r21, r13
     cd8:	b7 01       	movw	r22, r14
     cda:	ca 01       	movw	r24, r20
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	08 95       	ret

00000ce8 <__unpack_f>:
     ce8:	fc 01       	movw	r30, r24
     cea:	db 01       	movw	r26, r22
     cec:	40 81       	ld	r20, Z
     cee:	51 81       	ldd	r21, Z+1	; 0x01
     cf0:	22 81       	ldd	r18, Z+2	; 0x02
     cf2:	62 2f       	mov	r22, r18
     cf4:	6f 77       	andi	r22, 0x7F	; 127
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	22 1f       	adc	r18, r18
     cfa:	22 27       	eor	r18, r18
     cfc:	22 1f       	adc	r18, r18
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	89 2f       	mov	r24, r25
     d02:	88 0f       	add	r24, r24
     d04:	82 2b       	or	r24, r18
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	99 1f       	adc	r25, r25
     d0c:	99 27       	eor	r25, r25
     d0e:	99 1f       	adc	r25, r25
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 93       	st	X, r25
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	a9 f5       	brne	.+106    	; 0xd86 <__unpack_f+0x9e>
     d1c:	41 15       	cp	r20, r1
     d1e:	51 05       	cpc	r21, r1
     d20:	61 05       	cpc	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	11 f4       	brne	.+4      	; 0xd2a <__unpack_f+0x42>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	37 c0       	rjmp	.+110    	; 0xd98 <__unpack_f+0xb0>
     d2a:	82 e8       	ldi	r24, 0x82	; 130
     d2c:	9f ef       	ldi	r25, 0xFF	; 255
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	9a 01       	movw	r18, r20
     d38:	ab 01       	movw	r20, r22
     d3a:	67 e0       	ldi	r22, 0x07	; 7
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	6a 95       	dec	r22
     d46:	d1 f7       	brne	.-12     	; 0xd3c <__unpack_f+0x54>
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	8c 93       	st	X, r24
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__unpack_f+0x80>
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	44 1f       	adc	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	12 96       	adiw	r26, 0x02	; 2
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	9c 93       	st	X, r25
     d64:	8e 93       	st	-X, r24
     d66:	12 97       	sbiw	r26, 0x02	; 2
     d68:	20 30       	cpi	r18, 0x00	; 0
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	38 07       	cpc	r19, r24
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	48 07       	cpc	r20, r24
     d72:	80 e4       	ldi	r24, 0x40	; 64
     d74:	58 07       	cpc	r21, r24
     d76:	58 f3       	brcs	.-42     	; 0xd4e <__unpack_f+0x66>
     d78:	14 96       	adiw	r26, 0x04	; 4
     d7a:	2d 93       	st	X+, r18
     d7c:	3d 93       	st	X+, r19
     d7e:	4d 93       	st	X+, r20
     d80:	5c 93       	st	X, r21
     d82:	17 97       	sbiw	r26, 0x07	; 7
     d84:	08 95       	ret
     d86:	2f 3f       	cpi	r18, 0xFF	; 255
     d88:	31 05       	cpc	r19, r1
     d8a:	79 f4       	brne	.+30     	; 0xdaa <__unpack_f+0xc2>
     d8c:	41 15       	cp	r20, r1
     d8e:	51 05       	cpc	r21, r1
     d90:	61 05       	cpc	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	19 f4       	brne	.+6      	; 0xd9c <__unpack_f+0xb4>
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	8c 93       	st	X, r24
     d9a:	08 95       	ret
     d9c:	64 ff       	sbrs	r22, 4
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <__unpack_f+0xbe>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
     da4:	12 c0       	rjmp	.+36     	; 0xdca <__unpack_f+0xe2>
     da6:	1c 92       	st	X, r1
     da8:	10 c0       	rjmp	.+32     	; 0xdca <__unpack_f+0xe2>
     daa:	2f 57       	subi	r18, 0x7F	; 127
     dac:	30 40       	sbci	r19, 0x00	; 0
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	3c 93       	st	X, r19
     db2:	2e 93       	st	-X, r18
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	8c 93       	st	X, r24
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	44 0f       	add	r20, r20
     dbe:	55 1f       	adc	r21, r21
     dc0:	66 1f       	adc	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	8a 95       	dec	r24
     dc6:	d1 f7       	brne	.-12     	; 0xdbc <__unpack_f+0xd4>
     dc8:	70 64       	ori	r23, 0x40	; 64
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	4d 93       	st	X+, r20
     dce:	5d 93       	st	X+, r21
     dd0:	6d 93       	st	X+, r22
     dd2:	7c 93       	st	X, r23
     dd4:	17 97       	sbiw	r26, 0x07	; 7
     dd6:	08 95       	ret

00000dd8 <__fpcmp_parts_f>:
     dd8:	1f 93       	push	r17
     dda:	dc 01       	movw	r26, r24
     ddc:	fb 01       	movw	r30, r22
     dde:	9c 91       	ld	r25, X
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	08 f4       	brcc	.+2      	; 0xde6 <__fpcmp_parts_f+0xe>
     de4:	47 c0       	rjmp	.+142    	; 0xe74 <__fpcmp_parts_f+0x9c>
     de6:	80 81       	ld	r24, Z
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	08 f4       	brcc	.+2      	; 0xdee <__fpcmp_parts_f+0x16>
     dec:	43 c0       	rjmp	.+134    	; 0xe74 <__fpcmp_parts_f+0x9c>
     dee:	94 30       	cpi	r25, 0x04	; 4
     df0:	51 f4       	brne	.+20     	; 0xe06 <__fpcmp_parts_f+0x2e>
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	1c 91       	ld	r17, X
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	99 f5       	brne	.+102    	; 0xe60 <__fpcmp_parts_f+0x88>
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	68 2f       	mov	r22, r24
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	61 1b       	sub	r22, r17
     e02:	71 09       	sbc	r23, r1
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <__fpcmp_parts_f+0xac>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	21 f0       	breq	.+8      	; 0xe12 <__fpcmp_parts_f+0x3a>
     e0a:	92 30       	cpi	r25, 0x02	; 2
     e0c:	31 f4       	brne	.+12     	; 0xe1a <__fpcmp_parts_f+0x42>
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	b9 f1       	breq	.+110    	; 0xe80 <__fpcmp_parts_f+0xa8>
     e12:	81 81       	ldd	r24, Z+1	; 0x01
     e14:	88 23       	and	r24, r24
     e16:	89 f1       	breq	.+98     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e18:	2d c0       	rjmp	.+90     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	1c 91       	ld	r17, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	f1 f0       	breq	.+60     	; 0xe60 <__fpcmp_parts_f+0x88>
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	18 17       	cp	r17, r24
     e28:	d9 f4       	brne	.+54     	; 0xe60 <__fpcmp_parts_f+0x88>
     e2a:	12 96       	adiw	r26, 0x02	; 2
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	94 f0       	brlt	.+36     	; 0xe60 <__fpcmp_parts_f+0x88>
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	bc f0       	brlt	.+46     	; 0xe70 <__fpcmp_parts_f+0x98>
     e42:	14 96       	adiw	r26, 0x04	; 4
     e44:	8d 91       	ld	r24, X+
     e46:	9d 91       	ld	r25, X+
     e48:	0d 90       	ld	r0, X+
     e4a:	bc 91       	ld	r27, X
     e4c:	a0 2d       	mov	r26, r0
     e4e:	24 81       	ldd	r18, Z+4	; 0x04
     e50:	35 81       	ldd	r19, Z+5	; 0x05
     e52:	46 81       	ldd	r20, Z+6	; 0x06
     e54:	57 81       	ldd	r21, Z+7	; 0x07
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	4a 07       	cpc	r20, r26
     e5c:	5b 07       	cpc	r21, r27
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <__fpcmp_parts_f+0x8e>
     e60:	11 23       	and	r17, r17
     e62:	41 f0       	breq	.+16     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e64:	0a c0       	rjmp	.+20     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	a4 07       	cpc	r26, r20
     e6c:	b5 07       	cpc	r27, r21
     e6e:	40 f4       	brcc	.+16     	; 0xe80 <__fpcmp_parts_f+0xa8>
     e70:	11 23       	and	r17, r17
     e72:	19 f0       	breq	.+6      	; 0xe7a <__fpcmp_parts_f+0xa2>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <__fpcmp_parts_f+0xac>
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	7f ef       	ldi	r23, 0xFF	; 255
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <__fpcmp_parts_f+0xac>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	cb 01       	movw	r24, r22
     e86:	1f 91       	pop	r17
     e88:	08 95       	ret

00000e8a <M_WDT_Void_WDTInit>:


void M_WDT_Void_WDTInit(void)
{
	/* TO ENABLE WDT */
	SET_BIT(WDTCR_REG,WDE_BIT);
     e8a:	e1 e4       	ldi	r30, 0x41	; 65
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	88 60       	ori	r24, 0x08	; 8
     e92:	80 83       	st	Z, r24
	/* TO SELECT 2.1 SECOND AS WINDOW TIME */
	SET_BIT(WDTCR_REG,WDP0_BIT);
     e94:	80 81       	ld	r24, Z
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	80 83       	st	Z, r24
	SET_BIT(WDTCR_REG,WDP1_BIT);
     e9a:	80 81       	ld	r24, Z
     e9c:	82 60       	ori	r24, 0x02	; 2
     e9e:	80 83       	st	Z, r24
	SET_BIT(WDTCR_REG,WDP2_BIT);
     ea0:	80 81       	ld	r24, Z
     ea2:	84 60       	ori	r24, 0x04	; 4
     ea4:	80 83       	st	Z, r24
}
     ea6:	08 95       	ret

00000ea8 <M_WDT_Void_WDTRefresh>:
void M_WDT_Void_WDTRefresh(void)
{
	asm("WDR");
     ea8:	a8 95       	wdr
}
     eaa:	08 95       	ret

00000eac <M_UART_Void_UARTSend>:
}

void M_UART_Void_UARTSend(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
     eac:	8c b9       	out	0x0c, r24	; 12
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(UCSRA_REG,TXC_BIT) == UART_FINISHED_TRANSMITTING)
     eb2:	eb e2       	ldi	r30, 0x2B	; 43
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	86 fd       	sbrc	r24, 6
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <M_UART_Void_UARTSend+0x1c>
		{
			break;
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255

void M_UART_Void_UARTSend(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
	while(Local_U32_Counter < POLLING_TIME)
     ec0:	8e e4       	ldi	r24, 0x4E	; 78
     ec2:	20 32       	cpi	r18, 0x20	; 32
     ec4:	38 07       	cpc	r19, r24
     ec6:	b9 f7       	brne	.-18     	; 0xeb6 <M_UART_Void_UARTSend+0xa>
     ec8:	08 95       	ret

00000eca <M_UART_Void_UARTRec>:
{
	u32 Local_U32_Counter = 0;
	while(1)
	{
		Local_U32_Counter++;
		if(GET_BIT(UCSRA_REG,RXC_BIT) == UART_FINISHED_RECEIVING)
     eca:	eb e2       	ldi	r30, 0x2B	; 43
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	88 23       	and	r24, r24
     ed2:	ec f7       	brge	.-6      	; 0xece <M_UART_Void_UARTRec+0x4>
		{
			return UDR_REG;
     ed4:	8c b1       	in	r24, 0x0c	; 12
			break;
		}
	}
	return 0;
}
     ed6:	08 95       	ret

00000ed8 <M_UART_Void_UARTClear>:

void M_UART_Void_UARTClear(void)
{
	UDR_REG=0;
     ed8:	1c b8       	out	0x0c, r1	; 12
}
     eda:	08 95       	ret

00000edc <M_UART_Void_UARTSetCallBack>:
void M_UART_Void_UARTSetCallBack(void(*Copy_Ptr)(void))
{
	UART_CallBack = Copy_Ptr;
     edc:	90 93 63 03 	sts	0x0363, r25
     ee0:	80 93 62 03 	sts	0x0362, r24
}
     ee4:	08 95       	ret

00000ee6 <M_UART_Void_UARTSendString>:

void M_UART_Void_UARTSendString(u8 Copy_U8_CharNum,u8* Copy_U8_String)
{
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	08 2f       	mov	r16, r24
     ef4:	eb 01       	movw	r28, r22
     ef6:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ef8:	0f 2e       	mov	r0, r31
     efa:	f0 ea       	ldi	r31, 0xA0	; 160
     efc:	ef 2e       	mov	r14, r31
     efe:	ff e0       	ldi	r31, 0x0F	; 15
     f00:	ff 2e       	mov	r15, r31
     f02:	f0 2d       	mov	r31, r0
	u8 Local_U8_Counter = 0;
	while(Local_U8_Counter<=Copy_U8_CharNum)
	{
		M_UART_Void_UARTSend((u16)Copy_U8_String[Local_U8_Counter]);
     f04:	fe 01       	movw	r30, r28
     f06:	e1 0f       	add	r30, r17
     f08:	f1 1d       	adc	r31, r1
     f0a:	80 81       	ld	r24, Z
     f0c:	0e 94 56 07 	call	0xeac	; 0xeac <M_UART_Void_UARTSend>
		Local_U8_Counter++;
     f10:	1f 5f       	subi	r17, 0xFF	; 255
     f12:	c7 01       	movw	r24, r14
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <M_UART_Void_UARTSendString+0x2e>
}

void M_UART_Void_UARTSendString(u8 Copy_U8_CharNum,u8* Copy_U8_String)
{
	u8 Local_U8_Counter = 0;
	while(Local_U8_Counter<=Copy_U8_CharNum)
     f18:	01 17       	cp	r16, r17
     f1a:	a0 f7       	brcc	.-24     	; 0xf04 <M_UART_Void_UARTSendString+0x1e>
	{
		M_UART_Void_UARTSend((u16)Copy_U8_String[Local_U8_Counter]);
		Local_U8_Counter++;
		_delay_ms(1);
	}
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	08 95       	ret

00000f2a <__vector_13>:

ISR(USART_RXC_vect){
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	2f 93       	push	r18
     f36:	3f 93       	push	r19
     f38:	4f 93       	push	r20
     f3a:	5f 93       	push	r21
     f3c:	6f 93       	push	r22
     f3e:	7f 93       	push	r23
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	af 93       	push	r26
     f46:	bf 93       	push	r27
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31


	UART_CallBack();
     f4c:	e0 91 62 03 	lds	r30, 0x0362
     f50:	f0 91 63 03 	lds	r31, 0x0363
     f54:	09 95       	icall
}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <M_UART_Void_UARTDeinit>:

void M_UART_Void_UARTDeinit(void)
{
	CLR_BIT(UCSRB_REG,RXEN_BIT);
     f78:	ea e2       	ldi	r30, 0x2A	; 42
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	80 83       	st	Z, r24
	CLR_BIT(UCSRB_REG,TXEN_BIT);
     f82:	80 81       	ld	r24, Z
     f84:	87 7f       	andi	r24, 0xF7	; 247
     f86:	80 83       	st	Z, r24
}
     f88:	08 95       	ret

00000f8a <M_UART_Void_UARTInit>:

void M_UART_Void_UARTInit(void)
{
	u8 Local_U8_UCSRCValue = 0b10000000;

	M_DIO_Void_SetPinDirection(PD0_PIN,INPUT);
     f8a:	88 e2       	ldi	r24, 0x28	; 40
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD1_PIN,OUTPUT);
     f92:	89 e2       	ldi	r24, 0x29	; 41
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>

	/* TO SELECT CHARACTER SIZE -> 8 BITS */
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     f9a:	ea e2       	ldi	r30, 0x2A	; 42
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8b 7f       	andi	r24, 0xFB	; 251
     fa2:	80 83       	st	Z, r24
#if   UART_STOP_BITS   ==   UART_1_STOP_BIT
	CLR_BIT(Local_U8_UCSRCValue,USBS_BIT);
#elif UART_STOP_BITS   ==   UART_2_STOP_BIT
	SET_BIT(Local_U8_UCSRCValue,USBS_BIT);
#endif
	UCSRC_REG = Local_U8_UCSRCValue;
     fa4:	86 e8       	ldi	r24, 0x86	; 134
     fa6:	80 bd       	out	0x20, r24	; 32
	/* TO SELECT BAUDRATE -> 9600 */
	UBRRL_REG = ((F_OSC * (u32)1000000) / ((u32)16 * UART_BAUDRATE)) - 1;
     fa8:	87 e6       	ldi	r24, 0x67	; 103
     faa:	89 b9       	out	0x09, r24	; 9
	SET_BIT(UCSRB_REG,7);
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	80 83       	st	Z, r24
	/* TO ENABLE RX CICUIT */
	SET_BIT(UCSRB_REG,RXEN_BIT);
     fb2:	80 81       	ld	r24, Z
     fb4:	80 61       	ori	r24, 0x10	; 16
     fb6:	80 83       	st	Z, r24
	/* TO ENABLE TX CIRCUIT */
	SET_BIT(UCSRB_REG,TXEN_BIT);
     fb8:	80 81       	ld	r24, Z
     fba:	88 60       	ori	r24, 0x08	; 8
     fbc:	80 83       	st	Z, r24
}
     fbe:	08 95       	ret

00000fc0 <M_Timer_Void_TimerInit>:
void (*Timer1_CallBack) (void);
void (*Timer2_CallBack) (void);

void M_Timer_Void_TimerInit(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
     fc0:	88 23       	and	r24, r24
     fc2:	69 f4       	brne	.+26     	; 0xfde <M_Timer_Void_TimerInit+0x1e>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_MODE   ==   NORMAL_MODE
		CLR_BIT(TCCR0_REG,WGM00_BIT);
     fc4:	e3 e5       	ldi	r30, 0x53	; 83
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7b       	andi	r24, 0xBF	; 191
     fcc:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,WGM01_BIT);
     fce:	80 81       	ld	r24, Z
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	80 83       	st	Z, r24
		/* TO ENABLE TIMER0 OVERFLOW INT */
		SET_BIT(TIMSK_REG,TOIE0_BIT);
     fd4:	e9 e5       	ldi	r30, 0x59	; 89
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	80 83       	st	Z, r24
     fde:	08 95       	ret

00000fe0 <M_Timer_Void_TimerSetTime>:
void M_Timer_Void_TimerSetTime(u8 Copy_U8_TimerChannel,u32 Copy_U32_DesiredTime)
{
	u32 Local_U32_TickTime   = TIMER_PRESCALER_DV / F_OSC;       /* result will be in micro second */
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
	u8 Local_U8_DF  = 255;
	switch(Copy_U8_TimerChannel)
     fe0:	88 23       	and	r24, r24
     fe2:	71 f5       	brne	.+92     	; 0x1040 <M_Timer_Void_TimerSetTime+0x60>
	}
}
void M_Timer_Void_TimerSetTime(u8 Copy_U8_TimerChannel,u32 Copy_U32_DesiredTime)
{
	u32 Local_U32_TickTime   = TIMER_PRESCALER_DV / F_OSC;       /* result will be in micro second */
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
     fe4:	cb 01       	movw	r24, r22
     fe6:	ba 01       	movw	r22, r20
     fe8:	28 ee       	ldi	r18, 0xE8	; 232
     fea:	33 e0       	ldi	r19, 0x03	; 3
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__mulsi3>
     ff4:	68 94       	set
     ff6:	15 f8       	bld	r1, 5
     ff8:	96 95       	lsr	r25
     ffa:	87 95       	ror	r24
     ffc:	77 95       	ror	r23
     ffe:	67 95       	ror	r22
    1000:	16 94       	lsr	r1
    1002:	d1 f7       	brne	.-12     	; 0xff8 <M_Timer_Void_TimerSetTime+0x18>
	u8 Local_U8_DF  = 255;
	switch(Copy_U8_TimerChannel)
	{
	case TIMER0_CHANNEL:
#if TIMER0_MODE   ==   NORMAL_MODE
		Timer_U32_NumOfOverFlows = Local_U32_TotalTicks / 256;
    1004:	27 2f       	mov	r18, r23
    1006:	38 2f       	mov	r19, r24
    1008:	49 2f       	mov	r20, r25
    100a:	55 27       	eor	r21, r21
    100c:	20 93 3a 03 	sts	0x033A, r18
    1010:	30 93 3b 03 	sts	0x033B, r19
    1014:	40 93 3c 03 	sts	0x033C, r20
    1018:	50 93 3d 03 	sts	0x033D, r21
		u8 Timer_U8_RemTicks     = Local_U32_TotalTicks % 256 ;
    101c:	86 2f       	mov	r24, r22
		if(Timer_U8_RemTicks != 0)
    101e:	66 23       	and	r22, r22
    1020:	79 f0       	breq	.+30     	; 0x1040 <M_Timer_Void_TimerSetTime+0x60>
		{
			TCNT0_REG = 256 - Timer_U8_RemTicks;
    1022:	81 95       	neg	r24
    1024:	82 bf       	out	0x32, r24	; 50
			Timer_U32_NumOfOverFlows++;
    1026:	da 01       	movw	r26, r20
    1028:	c9 01       	movw	r24, r18
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	a1 1d       	adc	r26, r1
    102e:	b1 1d       	adc	r27, r1
    1030:	80 93 3a 03 	sts	0x033A, r24
    1034:	90 93 3b 03 	sts	0x033B, r25
    1038:	a0 93 3c 03 	sts	0x033C, r26
    103c:	b0 93 3d 03 	sts	0x033D, r27
    1040:	08 95       	ret

00001042 <M_Timer_Void_TimerStart>:

}

void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	89 f0       	breq	.+34     	; 0x1068 <M_Timer_Void_TimerStart+0x26>
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	18 f0       	brcs	.+6      	; 0x1050 <M_Timer_Void_TimerStart+0xe>
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	21 f5       	brne	.+72     	; 0x1096 <M_Timer_Void_TimerStart+0x54>
    104e:	18 c0       	rjmp	.+48     	; 0x1080 <M_Timer_Void_TimerStart+0x3e>
	{
	case TIMER0_CHANNEL:
#if   TIMER_PRESCALER_DV   ==   1024
		SET_BIT(TCCR0_REG,CS00_BIT);
    1050:	e3 e5       	ldi	r30, 0x53	; 83
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    105a:	80 81       	ld	r24, Z
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,CS02_BIT);
    1060:	80 81       	ld	r24, Z
    1062:	84 60       	ori	r24, 0x04	; 4
    1064:	80 83       	st	Z, r24
    1066:	08 95       	ret
		SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
		/* TO SELECT TIMER1 PRESCALER DV -> 256 */
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    1068:	ee e4       	ldi	r30, 0x4E	; 78
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    1072:	80 81       	ld	r24, Z
    1074:	8d 7f       	andi	r24, 0xFD	; 253
    1076:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
    1078:	80 81       	ld	r24, Z
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	80 83       	st	Z, r24
    107e:	08 95       	ret
		break;
	case TIMER2_CHANNEL:
		SET_BIT(TCCR2_REG,CS20_BIT);
    1080:	e5 e4       	ldi	r30, 0x45	; 69
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	81 60       	ori	r24, 0x01	; 1
    1088:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG,CS21_BIT);
    108a:	80 81       	ld	r24, Z
    108c:	8d 7f       	andi	r24, 0xFD	; 253
    108e:	80 83       	st	Z, r24
		SET_BIT(TCCR2_REG,CS22_BIT);
    1090:	80 81       	ld	r24, Z
    1092:	84 60       	ori	r24, 0x04	; 4
    1094:	80 83       	st	Z, r24
    1096:	08 95       	ret

00001098 <M_Timer_Void_TimerStop>:
	default : break;
	}
}
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	89 f0       	breq	.+34     	; 0x10be <M_Timer_Void_TimerStop+0x26>
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <M_Timer_Void_TimerStop+0xe>
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	21 f5       	brne	.+72     	; 0x10ec <M_Timer_Void_TimerStop+0x54>
    10a4:	18 c0       	rjmp	.+48     	; 0x10d6 <M_Timer_Void_TimerStop+0x3e>
	{
	case TIMER0_CHANNEL:
		CLR_BIT(TCCR0_REG,CS00_BIT);
    10a6:	e3 e5       	ldi	r30, 0x53	; 83
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8e 7f       	andi	r24, 0xFE	; 254
    10ae:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS01_BIT);
    10b0:	80 81       	ld	r24, Z
    10b2:	8d 7f       	andi	r24, 0xFD	; 253
    10b4:	80 83       	st	Z, r24
		CLR_BIT(TCCR0_REG,CS02_BIT);
    10b6:	80 81       	ld	r24, Z
    10b8:	8b 7f       	andi	r24, 0xFB	; 251
    10ba:	80 83       	st	Z, r24
    10bc:	08 95       	ret
		break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    10be:	ee e4       	ldi	r30, 0x4E	; 78
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8e 7f       	andi	r24, 0xFE	; 254
    10c6:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    10c8:	80 81       	ld	r24, Z
    10ca:	8d 7f       	andi	r24, 0xFD	; 253
    10cc:	80 83       	st	Z, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    10ce:	80 81       	ld	r24, Z
    10d0:	8b 7f       	andi	r24, 0xFB	; 251
    10d2:	80 83       	st	Z, r24
    10d4:	08 95       	ret
		break;
	case TIMER2_CHANNEL:
		CLR_BIT(TCCR2_REG,CS00_BIT);
    10d6:	e5 e4       	ldi	r30, 0x45	; 69
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG,CS01_BIT);
    10e0:	80 81       	ld	r24, Z
    10e2:	8d 7f       	andi	r24, 0xFD	; 253
    10e4:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG,CS02_BIT);
    10e6:	80 81       	ld	r24, Z
    10e8:	8b 7f       	andi	r24, 0xFB	; 251
    10ea:	80 83       	st	Z, r24
    10ec:	08 95       	ret

000010ee <M_Timer_Void_PWMSetDutyCycle>:
		break;
	default : break;
	}
}
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	7a 01       	movw	r14, r20
    10f8:	8b 01       	movw	r16, r22
	switch(Copy_U8_TimerChannel)
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	51 f1       	breq	.+84     	; 0x1152 <M_Timer_Void_PWMSetDutyCycle+0x64>
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	20 f0       	brcs	.+8      	; 0x110a <M_Timer_Void_PWMSetDutyCycle+0x1c>
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	09 f0       	breq	.+2      	; 0x1108 <M_Timer_Void_PWMSetDutyCycle+0x1a>
    1106:	57 c0       	rjmp	.+174    	; 0x11b6 <M_Timer_Void_PWMSetDutyCycle+0xc8>
    1108:	3f c0       	rjmp	.+126    	; 0x1188 <M_Timer_Void_PWMSetDutyCycle+0x9a>
	{
	case TIMER0_CHANNEL:
#if   PWM0_MODE   ==   FAST_PWM
#if   PWM0_MODE2   ==   NON_INVERTED
		if(Copy_F32_DutyCycle == 0)
    110a:	cb 01       	movw	r24, r22
    110c:	ba 01       	movw	r22, r20
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    111a:	88 23       	and	r24, r24
    111c:	11 f4       	brne	.+4      	; 0x1122 <M_Timer_Void_PWMSetDutyCycle+0x34>
		{
			OCR0_REG = 0;
    111e:	1c be       	out	0x3c, r1	; 60
    1120:	4a c0       	rjmp	.+148    	; 0x11b6 <M_Timer_Void_PWMSetDutyCycle+0xc8>
		}
		else
		{
			OCR0_REG = ((Copy_F32_DutyCycle * 256) / 100) - 1;
    1122:	c8 01       	movw	r24, r16
    1124:	b7 01       	movw	r22, r14
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e8       	ldi	r20, 0x80	; 128
    112c:	53 e4       	ldi	r21, 0x43	; 67
    112e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	48 ec       	ldi	r20, 0xC8	; 200
    1138:	52 e4       	ldi	r21, 0x42	; 66
    113a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    114a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114e:	6c bf       	out	0x3c, r22	; 60
    1150:	32 c0       	rjmp	.+100    	; 0x11b6 <M_Timer_Void_PWMSetDutyCycle+0xc8>

#endif
#endif
		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG) / 100) - 1;
    1152:	66 b5       	in	r22, 0x26	; 38
    1154:	77 b5       	in	r23, 0x27	; 39
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    115e:	a8 01       	movw	r20, r16
    1160:	97 01       	movw	r18, r14
    1162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	48 ec       	ldi	r20, 0xC8	; 200
    116c:	52 e4       	ldi	r21, 0x42	; 66
    116e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e8       	ldi	r20, 0x80	; 128
    1178:	5f e3       	ldi	r21, 0x3F	; 63
    117a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	7b bd       	out	0x2b, r23	; 43
    1184:	6a bd       	out	0x2a, r22	; 42
    1186:	17 c0       	rjmp	.+46     	; 0x11b6 <M_Timer_Void_PWMSetDutyCycle+0xc8>
		break;
	case TIMER2_CHANNEL:
		OCR2_REG = ((Copy_F32_DutyCycle * 256) / 100) - 1;
    1188:	cb 01       	movw	r24, r22
    118a:	ba 01       	movw	r22, r20
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e8       	ldi	r20, 0x80	; 128
    1192:	53 e4       	ldi	r21, 0x43	; 67
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	48 ec       	ldi	r20, 0xC8	; 200
    119e:	52 e4       	ldi	r21, 0x42	; 66
    11a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e8       	ldi	r20, 0x80	; 128
    11aa:	5f e3       	ldi	r21, 0x3F	; 63
    11ac:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	63 bd       	out	0x23, r22	; 35
		break;
	default:  break;
	}
}
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	08 95       	ret

000011c0 <M_Timer_Void_PWMSetFreaquancy>:
void M_Timer_Void_PWMSetFreaquancy(u8 Copy_U8_Freq)
{
	ICR1_REG = ((F_OSC * 1000000 / 256) / Copy_U8_Freq);
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	64 e2       	ldi	r22, 0x24	; 36
    11ca:	74 ef       	ldi	r23, 0xF4	; 244
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 6d 1c 	call	0x38da	; 0x38da <__divmodsi4>
    11d4:	37 bd       	out	0x27, r19	; 39
    11d6:	26 bd       	out	0x26, r18	; 38
}
    11d8:	08 95       	ret

000011da <M_Timer_Void_PWMStart>:
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    11da:	0e 94 21 08 	call	0x1042	; 0x1042 <M_Timer_Void_TimerStart>
}
    11de:	08 95       	ret

000011e0 <M_Timer_Void_PWMStop>:
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    11e0:	0e 94 4c 08 	call	0x1098	; 0x1098 <M_Timer_Void_TimerStop>
}
    11e4:	08 95       	ret

000011e6 <M_Timer_Void_SetCallBack>:

void M_Timer_Void_SetCallBack(u8 Copy_U8_TimerChannel,void(*Copy_Ptr)(void))
{
	switch(Copy_U8_TimerChannel)
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	51 f0       	breq	.+20     	; 0x11fe <M_Timer_Void_SetCallBack+0x18>
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	18 f0       	brcs	.+6      	; 0x11f4 <M_Timer_Void_SetCallBack+0xe>
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	79 f4       	brne	.+30     	; 0x1210 <M_Timer_Void_SetCallBack+0x2a>
    11f2:	0a c0       	rjmp	.+20     	; 0x1208 <M_Timer_Void_SetCallBack+0x22>
	{
	case TIMER0_CHANNEL:
		Timer0_CallBack = Copy_Ptr;
    11f4:	70 93 69 03 	sts	0x0369, r23
    11f8:	60 93 68 03 	sts	0x0368, r22
    11fc:	08 95       	ret
		break;
	case TIMER1_CHANNEL:
		Timer1_CallBack = Copy_Ptr;
    11fe:	70 93 67 03 	sts	0x0367, r23
    1202:	60 93 66 03 	sts	0x0366, r22
    1206:	08 95       	ret
		break;
	case TIMER2_CHANNEL:
		Timer2_CallBack = Copy_Ptr;
    1208:	70 93 65 03 	sts	0x0365, r23
    120c:	60 93 64 03 	sts	0x0364, r22
    1210:	08 95       	ret

00001212 <__vector_11>:
		break;
	}
}
#if TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    1212:	1f 92       	push	r1
    1214:	0f 92       	push	r0
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	0f 92       	push	r0
    121a:	11 24       	eor	r1, r1
    121c:	2f 93       	push	r18
    121e:	3f 93       	push	r19
    1220:	4f 93       	push	r20
    1222:	5f 93       	push	r21
    1224:	6f 93       	push	r22
    1226:	7f 93       	push	r23
    1228:	8f 93       	push	r24
    122a:	9f 93       	push	r25
    122c:	af 93       	push	r26
    122e:	bf 93       	push	r27
    1230:	ef 93       	push	r30
    1232:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    1234:	80 91 43 03 	lds	r24, 0x0343
    1238:	90 91 44 03 	lds	r25, 0x0344
    123c:	a0 91 45 03 	lds	r26, 0x0345
    1240:	b0 91 46 03 	lds	r27, 0x0346
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	a1 1d       	adc	r26, r1
    1248:	b1 1d       	adc	r27, r1
    124a:	80 93 43 03 	sts	0x0343, r24
    124e:	90 93 44 03 	sts	0x0344, r25
    1252:	a0 93 45 03 	sts	0x0345, r26
    1256:	b0 93 46 03 	sts	0x0346, r27
	if(Local_U32_Counter == Timer_U32_NumOfOverFlows)
    125a:	20 91 3a 03 	lds	r18, 0x033A
    125e:	30 91 3b 03 	lds	r19, 0x033B
    1262:	40 91 3c 03 	lds	r20, 0x033C
    1266:	50 91 3d 03 	lds	r21, 0x033D
    126a:	82 17       	cp	r24, r18
    126c:	93 07       	cpc	r25, r19
    126e:	a4 07       	cpc	r26, r20
    1270:	b5 07       	cpc	r27, r21
    1272:	89 f4       	brne	.+34     	; 0x1296 <__vector_11+0x84>
	{
		Timer0_CallBack();
    1274:	e0 91 68 03 	lds	r30, 0x0368
    1278:	f0 91 69 03 	lds	r31, 0x0369
    127c:	09 95       	icall
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    127e:	80 91 3e 03 	lds	r24, 0x033E
    1282:	81 95       	neg	r24
    1284:	82 bf       	out	0x32, r24	; 50
		Local_U32_Counter = 0;
    1286:	10 92 43 03 	sts	0x0343, r1
    128a:	10 92 44 03 	sts	0x0344, r1
    128e:	10 92 45 03 	sts	0x0345, r1
    1292:	10 92 46 03 	sts	0x0346, r1
	}
}
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	4f 91       	pop	r20
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <M_Timer_Void_PWMInit>:



void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
	switch(Copy_U8_TimerChannel)
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	c9 f0       	breq	.+50     	; 0x12ee <M_Timer_Void_PWMInit+0x36>
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <M_Timer_Void_PWMInit+0x10>
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <M_Timer_Void_PWMInit+0xe>
    12c4:	41 c0       	rjmp	.+130    	; 0x1348 <M_Timer_Void_PWMInit+0x90>
    12c6:	2e c0       	rjmp	.+92     	; 0x1324 <M_Timer_Void_PWMInit+0x6c>
	{
	case TIMER0_CHANNEL:
		M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    12c8:	87 e1       	ldi	r24, 0x17	; 23
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
#if   PWM0_MODE   ==   FAST_PWM
		SET_BIT(TCCR0_REG,WGM00_BIT);
    12d0:	e3 e5       	ldi	r30, 0x53	; 83
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	80 64       	ori	r24, 0x40	; 64
    12d8:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,WGM01_BIT);
    12da:	80 81       	ld	r24, Z
    12dc:	88 60       	ori	r24, 0x08	; 8
    12de:	80 83       	st	Z, r24
#elif PWM0_MODE   ==   PHASE_CORRECT_PWM
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLR_BIT(TCCR0_REG,WGM01_BIT);
#endif
#if   PWM0_MODE2   ==   NON_INVERTED
		CLR_BIT(TCCR0_REG,COM00_BIT);
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 7e       	andi	r24, 0xEF	; 239
    12e4:	80 83       	st	Z, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    12e6:	80 81       	ld	r24, Z
    12e8:	80 62       	ori	r24, 0x20	; 32
    12ea:	80 83       	st	Z, r24
    12ec:	08 95       	ret
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    12ee:	8d e2       	ldi	r24, 0x2D	; 45
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
		/* TO SELECT MODE NUMBER 14 AT TABLE (47) */
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    12f6:	af e4       	ldi	r26, 0x4F	; 79
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	8c 91       	ld	r24, X
    12fc:	8e 7f       	andi	r24, 0xFE	; 254
    12fe:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    1300:	8c 91       	ld	r24, X
    1302:	82 60       	ori	r24, 0x02	; 2
    1304:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    1306:	ee e4       	ldi	r30, 0x4E	; 78
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 60       	ori	r24, 0x08	; 8
    130e:	80 83       	st	Z, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    1310:	80 81       	ld	r24, Z
    1312:	80 61       	ori	r24, 0x10	; 16
    1314:	80 83       	st	Z, r24
		/* TO SELECT NON INVERTED MODE */
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    1316:	8c 91       	ld	r24, X
    1318:	8f 7b       	andi	r24, 0xBF	; 191
    131a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    131c:	8c 91       	ld	r24, X
    131e:	80 68       	ori	r24, 0x80	; 128
    1320:	8c 93       	st	X, r24
    1322:	08 95       	ret
		break;
	case TIMER2_CHANNEL:
		M_DIO_Void_SetPinDirection(PD7_PIN,OUTPUT);
    1324:	8f e2       	ldi	r24, 0x2F	; 47
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
		SET_BIT(TCCR2_REG,WGM20_BIT);
    132c:	e5 e4       	ldi	r30, 0x45	; 69
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 64       	ori	r24, 0x40	; 64
    1334:	80 83       	st	Z, r24
		SET_BIT(TCCR2_REG,WGM21_BIT);
    1336:	80 81       	ld	r24, Z
    1338:	88 60       	ori	r24, 0x08	; 8
    133a:	80 83       	st	Z, r24
		CLR_BIT(TCCR2_REG,COM20_BIT);
    133c:	80 81       	ld	r24, Z
    133e:	8f 7e       	andi	r24, 0xEF	; 239
    1340:	80 83       	st	Z, r24
		SET_BIT(TCCR2_REG,COM21_BIT);
    1342:	80 81       	ld	r24, Z
    1344:	80 62       	ori	r24, 0x20	; 32
    1346:	80 83       	st	Z, r24
    1348:	08 95       	ret

0000134a <M_SPI_U8_SPITransive>:
	SET_BIT(SPCR_REG,SPE_BIT);
}
#include "LED_Interface.h"
u8   M_SPI_U8_SPITransive(u8 Copy_U8_DataSend)
{
	SPDR_REG = Copy_U8_DataSend;
    134a:	8f b9       	out	0x0f, r24	; 15
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	50 e0       	ldi	r21, 0x00	; 0
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(SPSR_REG,SPIF_BIT) == SPI_FINISHED_TRANSIVE)
    1354:	ee e2       	ldi	r30, 0x2E	; 46
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	88 23       	and	r24, r24
    135c:	64 f0       	brlt	.+24     	; 0x1376 <M_SPI_U8_SPITransive+0x2c>
{
	SPDR_REG = Copy_U8_DataSend;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	4f 4f       	sbci	r20, 0xFF	; 255
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
#include "LED_Interface.h"
u8   M_SPI_U8_SPITransive(u8 Copy_U8_DataSend)
{
	SPDR_REG = Copy_U8_DataSend;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter < POLLING_TIME)
    1366:	20 38       	cpi	r18, 0x80	; 128
    1368:	84 e8       	ldi	r24, 0x84	; 132
    136a:	38 07       	cpc	r19, r24
    136c:	8e e1       	ldi	r24, 0x1E	; 30
    136e:	48 07       	cpc	r20, r24
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	58 07       	cpc	r21, r24
    1374:	89 f7       	brne	.-30     	; 0x1358 <M_SPI_U8_SPITransive+0xe>
		{
			//H_LED_Void_LedSetOn(LED0);
			break;
		}
	}
	return SPDR_REG;
    1376:	8f b1       	in	r24, 0x0f	; 15
}
    1378:	08 95       	ret

0000137a <M_SPI_Void_SPIInit>:
#include "SPI_Config.h"
#include "SPI_Interface.h"
#include "SPI_Private.h"

void M_SPI_Void_SPIInit(void)
{
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
	M_DIO_Void_SetPinDirection(PB5_PIN,OUTPUT);
	M_DIO_Void_SetPinDirection(PB6_PIN,INPUT);
	M_DIO_Void_SetPinDirection(PB4_PIN,OUTPUT);
	M_DIO_Void_SetPinDirection(PB7_PIN,OUTPUT);
#elif SPI_MODE   ==   SPI_SLAVE_MODE
	CLR_BIT(SPCR_REG,MSTR_BIT);
    137e:	0d e2       	ldi	r16, 0x2D	; 45
    1380:	10 e0       	ldi	r17, 0x00	; 0
    1382:	f8 01       	movw	r30, r16
    1384:	80 81       	ld	r24, Z
    1386:	8f 7e       	andi	r24, 0xEF	; 239
    1388:	80 83       	st	Z, r24
	M_DIO_Void_SetPinDirection(PB5_PIN,INPUT);
    138a:	89 e1       	ldi	r24, 0x19	; 25
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PB6_PIN,OUTPUT);
    1392:	8a e1       	ldi	r24, 0x1A	; 26
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PB4_PIN,INPUT);
    139a:	88 e1       	ldi	r24, 0x18	; 24
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PB7_PIN,INPUT);
    13a2:	8b e1       	ldi	r24, 0x1B	; 27
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
#endif
	/* TO SELECT SENDING FROM LSB */
	SET_BIT(SPCR_REG,DORD_BIT);
    13aa:	f8 01       	movw	r30, r16
    13ac:	80 81       	ld	r24, Z
    13ae:	80 62       	ori	r24, 0x20	; 32
    13b0:	80 83       	st	Z, r24
	/* TO ENABLE SPI CIRCUIT */
	SET_BIT(SPCR_REG,SPE_BIT);
    13b2:	80 81       	ld	r24, Z
    13b4:	80 64       	ori	r24, 0x40	; 64
    13b6:	80 83       	st	Z, r24
}
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <M_I2C_Void_I2CInit>:

void M_I2C_Void_I2CInit(void)
{
#if   I2C_MODE   ==   I2C_MASTER_MODE
	/* TO SELECT F_SCL -> 400 KHZ */
	TWBR_REG = 12;
    13be:	8c e0       	ldi	r24, 0x0C	; 12
    13c0:	80 b9       	out	0x00, r24	; 0
#elif I2C_MODE   ==   I2C_SLAVE_MODE
	TWAR_REG = (SLAVE_ADDRESS << 1 ) | GENERAL_CALL_RESPONSE ;
#endif
	/* TO ENABLE I2C CIRCUIT */
	SET_BIT(TWCR_REG,TWEN_BIT);
    13c2:	e6 e5       	ldi	r30, 0x56	; 86
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	84 60       	ori	r24, 0x04	; 4
    13ca:	80 83       	st	Z, r24
}
    13cc:	08 95       	ret

000013ce <M_I2C_Void_I2CStartCondition>:
void M_I2C_Void_I2CStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA_BIT);  /* TO MAKE A START CONDITION */
    13ce:	e6 e5       	ldi	r30, 0x56	; 86
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 62       	ori	r24, 0x20	; 32
    13d6:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    13d8:	80 81       	ld	r24, Z
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    13de:	80 81       	ld	r24, Z
    13e0:	88 23       	and	r24, r24
    13e2:	ec f7       	brge	.-6      	; 0x13de <M_I2C_Void_I2CStartCondition+0x10>
	while((TWSR_REG & 0xF8) != START_CONDITION_HAS_BEEN_TRANSMITTED);
    13e4:	e1 e2       	ldi	r30, 0x21	; 33
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	88 7f       	andi	r24, 0xF8	; 248
    13ec:	88 30       	cpi	r24, 0x08	; 8
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <M_I2C_Void_I2CStartCondition+0x1a>
}
    13f0:	08 95       	ret

000013f2 <M_I2C_Void_I2CStopCondition>:
void M_I2C_Void_I2CStopCondition(void)
{
	SET_BIT(TWCR_REG,TWSTO_BIT);  /* TO MAKE A STOP CONDITION */
    13f2:	e6 e5       	ldi	r30, 0x56	; 86
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	80 61       	ori	r24, 0x10	; 16
    13fa:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    13fc:	80 81       	ld	r24, Z
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	80 83       	st	Z, r24
}
    1402:	08 95       	ret

00001404 <M_I2C_Void_I2CRepeatedStart>:
void M_I2C_Void_I2CRepeatedStart(void)
{
	SET_BIT(TWCR_REG,TWSTA_BIT);  /* TO CLEAR STA BIT ACCORDING TO TABLE */
    1404:	e6 e5       	ldi	r30, 0x56	; 86
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 62       	ori	r24, 0x20	; 32
    140c:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    140e:	80 81       	ld	r24, Z
    1410:	80 68       	ori	r24, 0x80	; 128
    1412:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1414:	80 81       	ld	r24, Z
    1416:	88 23       	and	r24, r24
    1418:	ec f7       	brge	.-6      	; 0x1414 <M_I2C_Void_I2CRepeatedStart+0x10>
	while((TWSR_REG & 0xF8) != REPEATED_START_CONDITION_HAS_BEEN_TRANSMITTED);
    141a:	e1 e2       	ldi	r30, 0x21	; 33
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	88 7f       	andi	r24, 0xF8	; 248
    1422:	80 31       	cpi	r24, 0x10	; 16
    1424:	e1 f7       	brne	.-8      	; 0x141e <M_I2C_Void_I2CRepeatedStart+0x1a>
}
    1426:	08 95       	ret

00001428 <M_I2C_Void_I2CSendSlaveAddressWrite>:
void M_I2C_Void_I2CSendSlaveAddressWrite(u8 Copy_U8_Address)
{
	TWDR_REG = Copy_U8_Address << 1;
    1428:	88 0f       	add	r24, r24
    142a:	83 b9       	out	0x03, r24	; 3
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    142c:	e6 e5       	ldi	r30, 0x56	; 86
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 68       	ori	r24, 0x80	; 128
    1434:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1436:	80 81       	ld	r24, Z
    1438:	88 23       	and	r24, r24
    143a:	ec f7       	brge	.-6      	; 0x1436 <M_I2C_Void_I2CSendSlaveAddressWrite+0xe>
	while((TWSR_REG & 0xF8) != SLAVE_ADDRESS_W_TRANSMITTED_ACK_REC);
    143c:	e1 e2       	ldi	r30, 0x21	; 33
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	88 7f       	andi	r24, 0xF8	; 248
    1444:	88 31       	cpi	r24, 0x18	; 24
    1446:	e1 f7       	brne	.-8      	; 0x1440 <M_I2C_Void_I2CSendSlaveAddressWrite+0x18>
}
    1448:	08 95       	ret

0000144a <M_I2C_Void_I2CSendSlaveAddressRead>:
void M_I2C_Void_I2CSendSlaveAddressRead(u8 Copy_U8_Address)
{
	TWDR_REG = (Copy_U8_Address << 1) | 1;
    144a:	88 0f       	add	r24, r24
    144c:	81 60       	ori	r24, 0x01	; 1
    144e:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG,TWSTA_BIT);  /* TO CLEAR STA BIT ACCORDING TO TABLE */
    1450:	e6 e5       	ldi	r30, 0x56	; 86
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8f 7d       	andi	r24, 0xDF	; 223
    1458:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    145a:	80 81       	ld	r24, Z
    145c:	80 68       	ori	r24, 0x80	; 128
    145e:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1460:	80 81       	ld	r24, Z
    1462:	88 23       	and	r24, r24
    1464:	ec f7       	brge	.-6      	; 0x1460 <M_I2C_Void_I2CSendSlaveAddressRead+0x16>
	while((TWSR_REG & 0xF8) != SLAVE_ADDRESS_R_TRANSMITTED_ACK_REC);
    1466:	e1 e2       	ldi	r30, 0x21	; 33
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	88 7f       	andi	r24, 0xF8	; 248
    146e:	80 34       	cpi	r24, 0x40	; 64
    1470:	e1 f7       	brne	.-8      	; 0x146a <M_I2C_Void_I2CSendSlaveAddressRead+0x20>
}
    1472:	08 95       	ret

00001474 <M_I2C_Void_I2CSendByte>:
void M_I2C_Void_I2CSendByte(u8 Copy_U8_Data)
{
	TWDR_REG = Copy_U8_Data;
    1474:	83 b9       	out	0x03, r24	; 3
	CLR_BIT(TWCR_REG,TWSTA_BIT);  /* TO CLEAR STA BIT ACCORDING TO TABLE */
    1476:	e6 e5       	ldi	r30, 0x56	; 86
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8f 7d       	andi	r24, 0xDF	; 223
    147e:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    1480:	80 81       	ld	r24, Z
    1482:	80 68       	ori	r24, 0x80	; 128
    1484:	80 83       	st	Z, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1486:	80 81       	ld	r24, Z
    1488:	88 23       	and	r24, r24
    148a:	ec f7       	brge	.-6      	; 0x1486 <M_I2C_Void_I2CSendByte+0x12>
	while((TWSR_REG & 0xF8) != BYTE_TRANSMITTED_ACK_REC);
    148c:	e1 e2       	ldi	r30, 0x21	; 33
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	88 7f       	andi	r24, 0xF8	; 248
    1494:	88 32       	cpi	r24, 0x28	; 40
    1496:	e1 f7       	brne	.-8      	; 0x1490 <M_I2C_Void_I2CSendByte+0x1c>
}
    1498:	08 95       	ret

0000149a <M_I2C_Void_I2CReadByte>:
u8   M_I2C_Void_I2CReadByte(void)
{
	CLR_BIT(TWCR_REG,TWSTA_BIT);  /* TO CLEAR STA BIT ACCORDING TO TABLE */
    149a:	e6 e5       	ldi	r30, 0x56	; 86
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 7d       	andi	r24, 0xDF	; 223
    14a2:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,6);
    14a4:	80 81       	ld	r24, Z
    14a6:	80 64       	ori	r24, 0x40	; 64
    14a8:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  /* TO CLEAR THE FLAG */
    14aa:	80 81       	ld	r24, Z
    14ac:	80 68       	ori	r24, 0x80	; 128
    14ae:	80 83       	st	Z, r24
	u8 Local_U8_Data = 0;
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    14b0:	80 81       	ld	r24, Z
    14b2:	88 23       	and	r24, r24
    14b4:	ec f7       	brge	.-6      	; 0x14b0 <M_I2C_Void_I2CReadByte+0x16>
	while((TWSR_REG & 0xF8) != BYTE_REC_ACK_TRANSMITTED);
    14b6:	e1 e2       	ldi	r30, 0x21	; 33
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	88 7f       	andi	r24, 0xF8	; 248
    14be:	80 35       	cpi	r24, 0x50	; 80
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <M_I2C_Void_I2CReadByte+0x20>
	Local_U8_Data = TWDR_REG;
    14c2:	83 b1       	in	r24, 0x03	; 3
	return Local_U8_Data;
}
    14c4:	08 95       	ret

000014c6 <M_I2C_Void_I2CReInit>:

void M_I2C_Void_I2CReInit(void)
{
	TWCR_REG=0x00;
    14c6:	e6 e5       	ldi	r30, 0x56	; 86
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	10 82       	st	Z, r1
	SET_BIT(TWCR_REG,TWEN_BIT);
    14cc:	80 81       	ld	r24, Z
    14ce:	84 60       	ori	r24, 0x04	; 4
    14d0:	80 83       	st	Z, r24
}
    14d2:	08 95       	ret

000014d4 <M_GIE_Void_GlobalInterruptEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"

void M_GIE_Void_GlobalInterruptEnable(void)
{
	SET_BIT(SREG_REG,I_BIT);
    14d4:	ef e5       	ldi	r30, 0x5F	; 95
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	80 68       	ori	r24, 0x80	; 128
    14dc:	80 83       	st	Z, r24
}
    14de:	08 95       	ret

000014e0 <M_GIE_Void_GlobalInterruptDisable>:
void M_GIE_Void_GlobalInterruptDisable(void)
{
	CLR_BIT(SREG_REG,I_BIT);
    14e0:	ef e5       	ldi	r30, 0x5F	; 95
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 77       	andi	r24, 0x7F	; 127
    14e8:	80 83       	st	Z, r24
}
    14ea:	08 95       	ret

000014ec <M_EXT_INT_Void_ExtIntInit>:

void (*EXT_INT_CallBack) (void);

void M_EXT_INT_Void_ExtIntInit(u8 Copy_U8_Num)
{
	switch(Copy_U8_Num)
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	99 f0       	breq	.+38     	; 0x1516 <M_EXT_INT_Void_ExtIntInit+0x2a>
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	18 f0       	brcs	.+6      	; 0x14fa <M_EXT_INT_Void_ExtIntInit+0xe>
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	39 f5       	brne	.+78     	; 0x1546 <M_EXT_INT_Void_ExtIntInit+0x5a>
    14f8:	1c c0       	rjmp	.+56     	; 0x1532 <M_EXT_INT_Void_ExtIntInit+0x46>
	{
	case EXT_INT_0:
#if   SENSE_CONTROL0   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
    14fa:	e5 e5       	ldi	r30, 0x55	; 85
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	81 60       	ori	r24, 0x01	; 1
    1502:	80 83       	st	Z, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    1504:	80 81       	ld	r24, Z
    1506:	82 60       	ori	r24, 0x02	; 2
    1508:	80 83       	st	Z, r24
#elif SENSE_CONTROL0   ==   ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT0_BIT);
    150a:	eb e5       	ldi	r30, 0x5B	; 91
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	80 64       	ori	r24, 0x40	; 64
    1512:	80 83       	st	Z, r24
    1514:	08 95       	ret
	case EXT_INT_1:
#if   SENSE_CONTROL1   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		SET_BIT(MCUCR_REG,ISC11_BIT);
#elif SENSE_CONTROL1   ==   FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8b 7f       	andi	r24, 0xFB	; 251
    151e:	80 83       	st	Z, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    1520:	80 81       	ld	r24, Z
    1522:	88 60       	ori	r24, 0x08	; 8
    1524:	80 83       	st	Z, r24
#elif SENSE_CONTROL1   ==   ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT1_BIT);
    1526:	eb e5       	ldi	r30, 0x5B	; 91
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	80 68       	ori	r24, 0x80	; 128
    152e:	80 83       	st	Z, r24
    1530:	08 95       	ret
		break;
	case EXT_INT_2:
#if   SENSE_CONTROL2   ==   RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    1532:	e4 e5       	ldi	r30, 0x54	; 84
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	80 64       	ori	r24, 0x40	; 64
    153a:	80 83       	st	Z, r24
#elif SENSE_CONTROL2   ==   FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT2_BIT);
    153c:	eb e5       	ldi	r30, 0x5B	; 91
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 62       	ori	r24, 0x20	; 32
    1544:	80 83       	st	Z, r24
    1546:	08 95       	ret

00001548 <M_EXT_INT_Void_SetCallBack>:
	}
}

void M_EXT_INT_Void_SetCallBack(void(*Copy_Ptr)(void))
{
	EXT_INT_CallBack = Copy_Ptr;
    1548:	90 93 6b 03 	sts	0x036B, r25
    154c:	80 93 6a 03 	sts	0x036A, r24
}
    1550:	08 95       	ret

00001552 <__vector_1>:

ISR(INT0_vect)
{
    1552:	1f 92       	push	r1
    1554:	0f 92       	push	r0
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	0f 92       	push	r0
    155a:	11 24       	eor	r1, r1
    155c:	2f 93       	push	r18
    155e:	3f 93       	push	r19
    1560:	4f 93       	push	r20
    1562:	5f 93       	push	r21
    1564:	6f 93       	push	r22
    1566:	7f 93       	push	r23
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31
	EXT_INT_CallBack();
    1574:	e0 91 6a 03 	lds	r30, 0x036A
    1578:	f0 91 6b 03 	lds	r31, 0x036B
    157c:	09 95       	icall
}
    157e:	ff 91       	pop	r31
    1580:	ef 91       	pop	r30
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	7f 91       	pop	r23
    158c:	6f 91       	pop	r22
    158e:	5f 91       	pop	r21
    1590:	4f 91       	pop	r20
    1592:	3f 91       	pop	r19
    1594:	2f 91       	pop	r18
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__vector_2>:
ISR(INT1_vect)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1

}
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <__vector_3>:
ISR(INT2_vect)
{
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1

}
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	0f 90       	pop	r0
    15c4:	1f 90       	pop	r1
    15c6:	18 95       	reti

000015c8 <M_DIO_Void_SetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    15c8:	28 2f       	mov	r18, r24
    15ca:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    15cc:	6a e0       	ldi	r22, 0x0A	; 10
    15ce:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    15d2:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    15d4:	82 2f       	mov	r24, r18
    15d6:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
			switch(Copy_U8_State)
    15da:	33 23       	and	r19, r19
    15dc:	21 f0       	breq	.+8      	; 0x15e6 <M_DIO_Void_SetPinDirection+0x1e>
    15de:	31 30       	cpi	r19, 0x01	; 1
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <M_DIO_Void_SetPinDirection+0x1c>
    15e2:	86 c0       	rjmp	.+268    	; 0x16f0 <M_DIO_Void_SetPinDirection+0x128>
    15e4:	46 c0       	rjmp	.+140    	; 0x1672 <M_DIO_Void_SetPinDirection+0xaa>
			{
			case INPUT :
				switch(Local_U8_Port)
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	d1 f0       	breq	.+52     	; 0x161e <M_DIO_Void_SetPinDirection+0x56>
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	20 f4       	brcc	.+8      	; 0x15f6 <M_DIO_Void_SetPinDirection+0x2e>
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <M_DIO_Void_SetPinDirection+0x2c>
    15f2:	7e c0       	rjmp	.+252    	; 0x16f0 <M_DIO_Void_SetPinDirection+0x128>
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <M_DIO_Void_SetPinDirection+0x3a>
    15f6:	83 30       	cpi	r24, 0x03	; 3
    15f8:	01 f1       	breq	.+64     	; 0x163a <M_DIO_Void_SetPinDirection+0x72>
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	09 f0       	breq	.+2      	; 0x1600 <M_DIO_Void_SetPinDirection+0x38>
    15fe:	78 c0       	rjmp	.+240    	; 0x16f0 <M_DIO_Void_SetPinDirection+0x128>
    1600:	2a c0       	rjmp	.+84     	; 0x1656 <M_DIO_Void_SetPinDirection+0x8e>
				{
				case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
    1602:	ea e3       	ldi	r30, 0x3A	; 58
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	20 81       	ld	r18, Z
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <M_DIO_Void_SetPinDirection+0x4a>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	4a 95       	dec	r20
    1614:	e2 f7       	brpl	.-8      	; 0x160e <M_DIO_Void_SetPinDirection+0x46>
    1616:	80 95       	com	r24
    1618:	82 23       	and	r24, r18
    161a:	80 83       	st	Z, r24
    161c:	08 95       	ret
				case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
    161e:	e7 e3       	ldi	r30, 0x37	; 55
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	20 81       	ld	r18, Z
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <M_DIO_Void_SetPinDirection+0x66>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	4a 95       	dec	r20
    1630:	e2 f7       	brpl	.-8      	; 0x162a <M_DIO_Void_SetPinDirection+0x62>
    1632:	80 95       	com	r24
    1634:	82 23       	and	r24, r18
    1636:	80 83       	st	Z, r24
    1638:	08 95       	ret
				case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
    163a:	e4 e3       	ldi	r30, 0x34	; 52
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	20 81       	ld	r18, Z
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <M_DIO_Void_SetPinDirection+0x82>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	4a 95       	dec	r20
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <M_DIO_Void_SetPinDirection+0x7e>
    164e:	80 95       	com	r24
    1650:	82 23       	and	r24, r18
    1652:	80 83       	st	Z, r24
    1654:	08 95       	ret
				case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
    1656:	e1 e3       	ldi	r30, 0x31	; 49
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	20 81       	ld	r18, Z
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <M_DIO_Void_SetPinDirection+0x9e>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	4a 95       	dec	r20
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <M_DIO_Void_SetPinDirection+0x9a>
    166a:	80 95       	com	r24
    166c:	82 23       	and	r24, r18
    166e:	80 83       	st	Z, r24
    1670:	08 95       	ret
				default:                                break;
				}
				break;
			case OUTPUT:
				switch(Local_U8_Port)
    1672:	82 30       	cpi	r24, 0x02	; 2
    1674:	b9 f0       	breq	.+46     	; 0x16a4 <M_DIO_Void_SetPinDirection+0xdc>
    1676:	83 30       	cpi	r24, 0x03	; 3
    1678:	18 f4       	brcc	.+6      	; 0x1680 <M_DIO_Void_SetPinDirection+0xb8>
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	c9 f5       	brne	.+114    	; 0x16f0 <M_DIO_Void_SetPinDirection+0x128>
    167e:	05 c0       	rjmp	.+10     	; 0x168a <M_DIO_Void_SetPinDirection+0xc2>
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	e9 f0       	breq	.+58     	; 0x16be <M_DIO_Void_SetPinDirection+0xf6>
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	a1 f5       	brne	.+104    	; 0x16f0 <M_DIO_Void_SetPinDirection+0x128>
    1688:	27 c0       	rjmp	.+78     	; 0x16d8 <M_DIO_Void_SetPinDirection+0x110>
				{
				case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
    168a:	ea e3       	ldi	r30, 0x3A	; 58
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	20 81       	ld	r18, Z
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <M_DIO_Void_SetPinDirection+0xd2>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	4a 95       	dec	r20
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <M_DIO_Void_SetPinDirection+0xce>
    169e:	28 2b       	or	r18, r24
    16a0:	20 83       	st	Z, r18
    16a2:	08 95       	ret
				case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
    16a4:	e7 e3       	ldi	r30, 0x37	; 55
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	20 81       	ld	r18, Z
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <M_DIO_Void_SetPinDirection+0xec>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	4a 95       	dec	r20
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <M_DIO_Void_SetPinDirection+0xe8>
    16b8:	28 2b       	or	r18, r24
    16ba:	20 83       	st	Z, r18
    16bc:	08 95       	ret
				case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
    16be:	e4 e3       	ldi	r30, 0x34	; 52
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	20 81       	ld	r18, Z
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <M_DIO_Void_SetPinDirection+0x106>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	4a 95       	dec	r20
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <M_DIO_Void_SetPinDirection+0x102>
    16d2:	28 2b       	or	r18, r24
    16d4:	20 83       	st	Z, r18
    16d6:	08 95       	ret
				case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
    16d8:	e1 e3       	ldi	r30, 0x31	; 49
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	20 81       	ld	r18, Z
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <M_DIO_Void_SetPinDirection+0x120>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	4a 95       	dec	r20
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <M_DIO_Void_SetPinDirection+0x11c>
    16ec:	28 2b       	or	r18, r24
    16ee:	20 83       	st	Z, r18
    16f0:	08 95       	ret

000016f2 <M_DIO_Void_SetPinValue>:
				default:                                break;
			}
}

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
    16f2:	28 2f       	mov	r18, r24
    16f4:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    16f6:	6a e0       	ldi	r22, 0x0A	; 10
    16f8:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    16fc:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    16fe:	82 2f       	mov	r24, r18
    1700:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
			switch(Copy_U8_State)
    1704:	33 23       	and	r19, r19
    1706:	21 f0       	breq	.+8      	; 0x1710 <M_DIO_Void_SetPinValue+0x1e>
    1708:	31 30       	cpi	r19, 0x01	; 1
    170a:	09 f0       	breq	.+2      	; 0x170e <M_DIO_Void_SetPinValue+0x1c>
    170c:	86 c0       	rjmp	.+268    	; 0x181a <M_DIO_Void_SetPinValue+0x128>
    170e:	46 c0       	rjmp	.+140    	; 0x179c <M_DIO_Void_SetPinValue+0xaa>
			{
			case LOW :
				switch(Local_U8_Port)
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	d1 f0       	breq	.+52     	; 0x1748 <M_DIO_Void_SetPinValue+0x56>
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	20 f4       	brcc	.+8      	; 0x1720 <M_DIO_Void_SetPinValue+0x2e>
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	09 f0       	breq	.+2      	; 0x171e <M_DIO_Void_SetPinValue+0x2c>
    171c:	7e c0       	rjmp	.+252    	; 0x181a <M_DIO_Void_SetPinValue+0x128>
    171e:	06 c0       	rjmp	.+12     	; 0x172c <M_DIO_Void_SetPinValue+0x3a>
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	01 f1       	breq	.+64     	; 0x1764 <M_DIO_Void_SetPinValue+0x72>
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	09 f0       	breq	.+2      	; 0x172a <M_DIO_Void_SetPinValue+0x38>
    1728:	78 c0       	rjmp	.+240    	; 0x181a <M_DIO_Void_SetPinValue+0x128>
    172a:	2a c0       	rjmp	.+84     	; 0x1780 <M_DIO_Void_SetPinValue+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    172c:	eb e3       	ldi	r30, 0x3B	; 59
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	20 81       	ld	r18, Z
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <M_DIO_Void_SetPinValue+0x4a>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	4a 95       	dec	r20
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <M_DIO_Void_SetPinValue+0x46>
    1740:	80 95       	com	r24
    1742:	82 23       	and	r24, r18
    1744:	80 83       	st	Z, r24
    1746:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1748:	e8 e3       	ldi	r30, 0x38	; 56
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	20 81       	ld	r18, Z
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <M_DIO_Void_SetPinValue+0x66>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	4a 95       	dec	r20
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <M_DIO_Void_SetPinValue+0x62>
    175c:	80 95       	com	r24
    175e:	82 23       	and	r24, r18
    1760:	80 83       	st	Z, r24
    1762:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1764:	e5 e3       	ldi	r30, 0x35	; 53
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	20 81       	ld	r18, Z
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <M_DIO_Void_SetPinValue+0x82>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	4a 95       	dec	r20
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <M_DIO_Void_SetPinValue+0x7e>
    1778:	80 95       	com	r24
    177a:	82 23       	and	r24, r18
    177c:	80 83       	st	Z, r24
    177e:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    1780:	e2 e3       	ldi	r30, 0x32	; 50
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	20 81       	ld	r18, Z
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <M_DIO_Void_SetPinValue+0x9e>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	4a 95       	dec	r20
    1792:	e2 f7       	brpl	.-8      	; 0x178c <M_DIO_Void_SetPinValue+0x9a>
    1794:	80 95       	com	r24
    1796:	82 23       	and	r24, r18
    1798:	80 83       	st	Z, r24
    179a:	08 95       	ret
				default:                                 break;
				}
				break;
			case HIGH:
				switch(Local_U8_Port)
    179c:	82 30       	cpi	r24, 0x02	; 2
    179e:	b9 f0       	breq	.+46     	; 0x17ce <M_DIO_Void_SetPinValue+0xdc>
    17a0:	83 30       	cpi	r24, 0x03	; 3
    17a2:	18 f4       	brcc	.+6      	; 0x17aa <M_DIO_Void_SetPinValue+0xb8>
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	c9 f5       	brne	.+114    	; 0x181a <M_DIO_Void_SetPinValue+0x128>
    17a8:	05 c0       	rjmp	.+10     	; 0x17b4 <M_DIO_Void_SetPinValue+0xc2>
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	e9 f0       	breq	.+58     	; 0x17e8 <M_DIO_Void_SetPinValue+0xf6>
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	a1 f5       	brne	.+104    	; 0x181a <M_DIO_Void_SetPinValue+0x128>
    17b2:	27 c0       	rjmp	.+78     	; 0x1802 <M_DIO_Void_SetPinValue+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    17b4:	eb e3       	ldi	r30, 0x3B	; 59
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	20 81       	ld	r18, Z
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <M_DIO_Void_SetPinValue+0xd2>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	4a 95       	dec	r20
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <M_DIO_Void_SetPinValue+0xce>
    17c8:	28 2b       	or	r18, r24
    17ca:	20 83       	st	Z, r18
    17cc:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    17ce:	e8 e3       	ldi	r30, 0x38	; 56
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	20 81       	ld	r18, Z
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <M_DIO_Void_SetPinValue+0xec>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	4a 95       	dec	r20
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <M_DIO_Void_SetPinValue+0xe8>
    17e2:	28 2b       	or	r18, r24
    17e4:	20 83       	st	Z, r18
    17e6:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    17e8:	e5 e3       	ldi	r30, 0x35	; 53
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	20 81       	ld	r18, Z
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <M_DIO_Void_SetPinValue+0x106>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	4a 95       	dec	r20
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <M_DIO_Void_SetPinValue+0x102>
    17fc:	28 2b       	or	r18, r24
    17fe:	20 83       	st	Z, r18
    1800:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    1802:	e2 e3       	ldi	r30, 0x32	; 50
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	20 81       	ld	r18, Z
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <M_DIO_Void_SetPinValue+0x120>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	4a 95       	dec	r20
    1814:	e2 f7       	brpl	.-8      	; 0x180e <M_DIO_Void_SetPinValue+0x11c>
    1816:	28 2b       	or	r18, r24
    1818:	20 83       	st	Z, r18
    181a:	08 95       	ret

0000181c <M_DIO_Void_TogPin>:
				break;
				default:                                 break;
			}
}
void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
    181c:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    181e:	6a e0       	ldi	r22, 0x0A	; 10
    1820:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    1824:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	switch(Local_U8_Port)
    1826:	82 2f       	mov	r24, r18
    1828:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	b9 f0       	breq	.+46     	; 0x185e <M_DIO_Void_TogPin+0x42>
    1830:	83 30       	cpi	r24, 0x03	; 3
    1832:	18 f4       	brcc	.+6      	; 0x183a <M_DIO_Void_TogPin+0x1e>
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	c9 f5       	brne	.+114    	; 0x18aa <M_DIO_Void_TogPin+0x8e>
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <M_DIO_Void_TogPin+0x28>
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	e9 f0       	breq	.+58     	; 0x1878 <M_DIO_Void_TogPin+0x5c>
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	a1 f5       	brne	.+104    	; 0x18aa <M_DIO_Void_TogPin+0x8e>
    1842:	27 c0       	rjmp	.+78     	; 0x1892 <M_DIO_Void_TogPin+0x76>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
    1844:	eb e3       	ldi	r30, 0x3B	; 59
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	20 81       	ld	r18, Z
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <M_DIO_Void_TogPin+0x38>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	3a 95       	dec	r19
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <M_DIO_Void_TogPin+0x34>
    1858:	28 27       	eor	r18, r24
    185a:	20 83       	st	Z, r18
    185c:	08 95       	ret
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	20 81       	ld	r18, Z
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <M_DIO_Void_TogPin+0x52>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	3a 95       	dec	r19
    1870:	e2 f7       	brpl	.-8      	; 0x186a <M_DIO_Void_TogPin+0x4e>
    1872:	28 27       	eor	r18, r24
    1874:	20 83       	st	Z, r18
    1876:	08 95       	ret
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
    1878:	e5 e3       	ldi	r30, 0x35	; 53
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	20 81       	ld	r18, Z
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <M_DIO_Void_TogPin+0x6c>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	3a 95       	dec	r19
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <M_DIO_Void_TogPin+0x68>
    188c:	28 27       	eor	r18, r24
    188e:	20 83       	st	Z, r18
    1890:	08 95       	ret
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
    1892:	e2 e3       	ldi	r30, 0x32	; 50
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	20 81       	ld	r18, Z
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <M_DIO_Void_TogPin+0x86>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	3a 95       	dec	r19
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <M_DIO_Void_TogPin+0x82>
    18a6:	28 27       	eor	r18, r24
    18a8:	20 83       	st	Z, r18
    18aa:	08 95       	ret

000018ac <M_DIO_U8_GetPinValue>:
	default:                                 break;
	}
}
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    18ac:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    18ae:	6a e0       	ldi	r22, 0x0A	; 10
    18b0:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    18b4:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Port)
    18b6:	82 2f       	mov	r24, r18
    18b8:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	a1 f0       	breq	.+40     	; 0x18e8 <M_DIO_U8_GetPinValue+0x3c>
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	18 f4       	brcc	.+6      	; 0x18ca <M_DIO_U8_GetPinValue+0x1e>
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	29 f4       	brne	.+10     	; 0x18d2 <M_DIO_U8_GetPinValue+0x26>
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <M_DIO_U8_GetPinValue+0x2a>
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	b1 f0       	breq	.+44     	; 0x18fa <M_DIO_U8_GetPinValue+0x4e>
    18ce:	84 30       	cpi	r24, 0x04	; 4
    18d0:	e9 f0       	breq	.+58     	; 0x190c <M_DIO_U8_GetPinValue+0x60>
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	08 95       	ret
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
    18d6:	89 b3       	in	r24, 0x19	; 25
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <M_DIO_U8_GetPinValue+0x34>
    18dc:	95 95       	asr	r25
    18de:	87 95       	ror	r24
    18e0:	3a 95       	dec	r19
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <M_DIO_U8_GetPinValue+0x30>
    18e4:	81 70       	andi	r24, 0x01	; 1
    18e6:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
    18e8:	86 b3       	in	r24, 0x16	; 22
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <M_DIO_U8_GetPinValue+0x46>
    18ee:	95 95       	asr	r25
    18f0:	87 95       	ror	r24
    18f2:	3a 95       	dec	r19
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <M_DIO_U8_GetPinValue+0x42>
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
    18fa:	83 b3       	in	r24, 0x13	; 19
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <M_DIO_U8_GetPinValue+0x58>
    1900:	95 95       	asr	r25
    1902:	87 95       	ror	r24
    1904:	3a 95       	dec	r19
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <M_DIO_U8_GetPinValue+0x54>
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
    190c:	80 b3       	in	r24, 0x10	; 16
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <M_DIO_U8_GetPinValue+0x6a>
    1912:	95 95       	asr	r25
    1914:	87 95       	ror	r24
    1916:	3a 95       	dec	r19
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <M_DIO_U8_GetPinValue+0x66>
    191a:	81 70       	andi	r24, 0x01	; 1
	default:                                                   break;
	}
	return Local_U8_Reading;
}
    191c:	08 95       	ret

0000191e <M_DIO_Void_SetPinPullUpRes>:
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Num,u8 Copy_U8_State)
{
    191e:	28 2f       	mov	r18, r24
    1920:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
    1922:	6a e0       	ldi	r22, 0x0A	; 10
    1924:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    1928:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
    192a:	82 2f       	mov	r24, r18
    192c:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
			switch(Copy_U8_State)
    1930:	33 23       	and	r19, r19
    1932:	21 f0       	breq	.+8      	; 0x193c <M_DIO_Void_SetPinPullUpRes+0x1e>
    1934:	31 30       	cpi	r19, 0x01	; 1
    1936:	09 f0       	breq	.+2      	; 0x193a <M_DIO_Void_SetPinPullUpRes+0x1c>
    1938:	86 c0       	rjmp	.+268    	; 0x1a46 <M_DIO_Void_SetPinPullUpRes+0x128>
    193a:	46 c0       	rjmp	.+140    	; 0x19c8 <M_DIO_Void_SetPinPullUpRes+0xaa>
			{
			case DISABLE :
				switch(Local_U8_Port)
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	d1 f0       	breq	.+52     	; 0x1974 <M_DIO_Void_SetPinPullUpRes+0x56>
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	20 f4       	brcc	.+8      	; 0x194c <M_DIO_Void_SetPinPullUpRes+0x2e>
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	09 f0       	breq	.+2      	; 0x194a <M_DIO_Void_SetPinPullUpRes+0x2c>
    1948:	7e c0       	rjmp	.+252    	; 0x1a46 <M_DIO_Void_SetPinPullUpRes+0x128>
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <M_DIO_Void_SetPinPullUpRes+0x3a>
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	01 f1       	breq	.+64     	; 0x1990 <M_DIO_Void_SetPinPullUpRes+0x72>
    1950:	84 30       	cpi	r24, 0x04	; 4
    1952:	09 f0       	breq	.+2      	; 0x1956 <M_DIO_Void_SetPinPullUpRes+0x38>
    1954:	78 c0       	rjmp	.+240    	; 0x1a46 <M_DIO_Void_SetPinPullUpRes+0x128>
    1956:	2a c0       	rjmp	.+84     	; 0x19ac <M_DIO_Void_SetPinPullUpRes+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    1958:	eb e3       	ldi	r30, 0x3B	; 59
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	20 81       	ld	r18, Z
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <M_DIO_Void_SetPinPullUpRes+0x4a>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	4a 95       	dec	r20
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <M_DIO_Void_SetPinPullUpRes+0x46>
    196c:	80 95       	com	r24
    196e:	82 23       	and	r24, r18
    1970:	80 83       	st	Z, r24
    1972:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1974:	e8 e3       	ldi	r30, 0x38	; 56
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	20 81       	ld	r18, Z
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <M_DIO_Void_SetPinPullUpRes+0x66>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	4a 95       	dec	r20
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <M_DIO_Void_SetPinPullUpRes+0x62>
    1988:	80 95       	com	r24
    198a:	82 23       	and	r24, r18
    198c:	80 83       	st	Z, r24
    198e:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	20 81       	ld	r18, Z
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <M_DIO_Void_SetPinPullUpRes+0x82>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	4a 95       	dec	r20
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <M_DIO_Void_SetPinPullUpRes+0x7e>
    19a4:	80 95       	com	r24
    19a6:	82 23       	and	r24, r18
    19a8:	80 83       	st	Z, r24
    19aa:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    19ac:	e2 e3       	ldi	r30, 0x32	; 50
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	20 81       	ld	r18, Z
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <M_DIO_Void_SetPinPullUpRes+0x9e>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	4a 95       	dec	r20
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <M_DIO_Void_SetPinPullUpRes+0x9a>
    19c0:	80 95       	com	r24
    19c2:	82 23       	and	r24, r18
    19c4:	80 83       	st	Z, r24
    19c6:	08 95       	ret
				default:                                 break;
				}
				break;
			case ENABLE:
				switch(Local_U8_Port)
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	b9 f0       	breq	.+46     	; 0x19fa <M_DIO_Void_SetPinPullUpRes+0xdc>
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	18 f4       	brcc	.+6      	; 0x19d6 <M_DIO_Void_SetPinPullUpRes+0xb8>
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	c9 f5       	brne	.+114    	; 0x1a46 <M_DIO_Void_SetPinPullUpRes+0x128>
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <M_DIO_Void_SetPinPullUpRes+0xc2>
    19d6:	83 30       	cpi	r24, 0x03	; 3
    19d8:	e9 f0       	breq	.+58     	; 0x1a14 <M_DIO_Void_SetPinPullUpRes+0xf6>
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	a1 f5       	brne	.+104    	; 0x1a46 <M_DIO_Void_SetPinPullUpRes+0x128>
    19de:	27 c0       	rjmp	.+78     	; 0x1a2e <M_DIO_Void_SetPinPullUpRes+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    19e0:	eb e3       	ldi	r30, 0x3B	; 59
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	20 81       	ld	r18, Z
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <M_DIO_Void_SetPinPullUpRes+0xd2>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	4a 95       	dec	r20
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <M_DIO_Void_SetPinPullUpRes+0xce>
    19f4:	28 2b       	or	r18, r24
    19f6:	20 83       	st	Z, r18
    19f8:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    19fa:	e8 e3       	ldi	r30, 0x38	; 56
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	20 81       	ld	r18, Z
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <M_DIO_Void_SetPinPullUpRes+0xec>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	4a 95       	dec	r20
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <M_DIO_Void_SetPinPullUpRes+0xe8>
    1a0e:	28 2b       	or	r18, r24
    1a10:	20 83       	st	Z, r18
    1a12:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1a14:	e5 e3       	ldi	r30, 0x35	; 53
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	20 81       	ld	r18, Z
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <M_DIO_Void_SetPinPullUpRes+0x106>
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	4a 95       	dec	r20
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <M_DIO_Void_SetPinPullUpRes+0x102>
    1a28:	28 2b       	or	r18, r24
    1a2a:	20 83       	st	Z, r18
    1a2c:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    1a2e:	e2 e3       	ldi	r30, 0x32	; 50
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	20 81       	ld	r18, Z
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <M_DIO_Void_SetPinPullUpRes+0x120>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	4a 95       	dec	r20
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <M_DIO_Void_SetPinPullUpRes+0x11c>
    1a42:	28 2b       	or	r18, r24
    1a44:	20 83       	st	Z, r18
    1a46:	08 95       	ret

00001a48 <M_ADC_Void_ADCInit>:


void M_ADC_Void_ADCInit(void)
{
#if   ADC_V_REF_MODE   ==   AVCC
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    1a48:	e7 e2       	ldi	r30, 0x27	; 39
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	8f 77       	andi	r24, 0x7F	; 127
    1a50:	80 83       	st	Z, r24
	SET_BIT(ADMUX_REG,REFS0_BIT);
    1a52:	80 81       	ld	r24, Z
    1a54:	80 64       	ori	r24, 0x40	; 64
    1a56:	80 83       	st	Z, r24
	SET_BIT(ADMUX_REG,REFS1_BIT);
	SET_BIT(ADMUX_REG,REFS0_BIT);
#endif

	/* TO SELECT RIGHT ADDJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1a58:	80 81       	ld	r24, Z
    1a5a:	8f 7d       	andi	r24, 0xDF	; 223
    1a5c:	80 83       	st	Z, r24

#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    1a5e:	e6 e2       	ldi	r30, 0x26	; 38
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	84 60       	ori	r24, 0x04	; 4
    1a66:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    1a68:	80 81       	ld	r24, Z
    1a6a:	82 60       	ori	r24, 0x02	; 2
    1a6c:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    1a6e:	80 81       	ld	r24, Z
    1a70:	81 60       	ori	r24, 0x01	; 1
    1a72:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
#endif

	SET_BIT(ADCSRA_REG,ADATE_BIT);
    1a74:	80 81       	ld	r24, Z
    1a76:	80 62       	ori	r24, 0x20	; 32
    1a78:	80 83       	st	Z, r24
	/* TO ENABLE ADC CIRCUIT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 68       	ori	r24, 0x80	; 128
    1a7e:	80 83       	st	Z, r24
}
    1a80:	08 95       	ret

00001a82 <M_ADC_U16_ADCRead>:
u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
	u32 Local_U32_Counter = 0;
	switch(Copy_U8_AdcChannel)
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	d1 f0       	breq	.+52     	; 0x1aba <M_ADC_U16_ADCRead+0x38>
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	30 f0       	brcs	.+12     	; 0x1a96 <M_ADC_U16_ADCRead+0x14>
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	41 f1       	breq	.+80     	; 0x1ade <M_ADC_U16_ADCRead+0x5c>
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <M_ADC_U16_ADCRead+0x12>
    1a92:	48 c0       	rjmp	.+144    	; 0x1b24 <M_ADC_U16_ADCRead+0xa2>
    1a94:	36 c0       	rjmp	.+108    	; 0x1b02 <M_ADC_U16_ADCRead+0x80>
	{
	case ADC_CHANNEL_0:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    1a96:	e7 e2       	ldi	r30, 0x27	; 39
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 7e       	andi	r24, 0xEF	; 239
    1a9e:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    1aa0:	80 81       	ld	r24, Z
    1aa2:	87 7f       	andi	r24, 0xF7	; 247
    1aa4:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8b 7f       	andi	r24, 0xFB	; 251
    1aaa:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    1aac:	80 81       	ld	r24, Z
    1aae:	8d 7f       	andi	r24, 0xFD	; 253
    1ab0:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8e 7f       	andi	r24, 0xFE	; 254
    1ab6:	80 83       	st	Z, r24
    1ab8:	35 c0       	rjmp	.+106    	; 0x1b24 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_1:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    1aba:	e7 e2       	ldi	r30, 0x27	; 39
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8f 7e       	andi	r24, 0xEF	; 239
    1ac2:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    1ac4:	80 81       	ld	r24, Z
    1ac6:	87 7f       	andi	r24, 0xF7	; 247
    1ac8:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1aca:	80 81       	ld	r24, Z
    1acc:	8b 7f       	andi	r24, 0xFB	; 251
    1ace:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8d 7f       	andi	r24, 0xFD	; 253
    1ad4:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    1ad6:	80 81       	ld	r24, Z
    1ad8:	81 60       	ori	r24, 0x01	; 1
    1ada:	80 83       	st	Z, r24
    1adc:	23 c0       	rjmp	.+70     	; 0x1b24 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_2:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    1ade:	e7 e2       	ldi	r30, 0x27	; 39
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 7e       	andi	r24, 0xEF	; 239
    1ae6:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    1ae8:	80 81       	ld	r24, Z
    1aea:	87 7f       	andi	r24, 0xF7	; 247
    1aec:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1aee:	80 81       	ld	r24, Z
    1af0:	8b 7f       	andi	r24, 0xFB	; 251
    1af2:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    1af4:	80 81       	ld	r24, Z
    1af6:	82 60       	ori	r24, 0x02	; 2
    1af8:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    1afa:	80 81       	ld	r24, Z
    1afc:	8e 7f       	andi	r24, 0xFE	; 254
    1afe:	80 83       	st	Z, r24
    1b00:	11 c0       	rjmp	.+34     	; 0x1b24 <M_ADC_U16_ADCRead+0xa2>
		break;
	case ADC_CHANNEL_3:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    1b02:	e7 e2       	ldi	r30, 0x27	; 39
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 7e       	andi	r24, 0xEF	; 239
    1b0a:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    1b0c:	80 81       	ld	r24, Z
    1b0e:	87 7f       	andi	r24, 0xF7	; 247
    1b10:	80 83       	st	Z, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    1b12:	80 81       	ld	r24, Z
    1b14:	8b 7f       	andi	r24, 0xFB	; 251
    1b16:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    1b18:	80 81       	ld	r24, Z
    1b1a:	82 60       	ori	r24, 0x02	; 2
    1b1c:	80 83       	st	Z, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    1b1e:	80 81       	ld	r24, Z
    1b20:	81 60       	ori	r24, 0x01	; 1
    1b22:	80 83       	st	Z, r24
		break;
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1b24:	e6 e2       	ldi	r30, 0x26	; 38
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 64       	ori	r24, 0x40	; 64
    1b2c:	80 83       	st	Z, r24
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	50 e0       	ldi	r21, 0x00	; 0

	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
    1b36:	80 81       	ld	r24, Z
    1b38:	84 fd       	sbrc	r24, 4
    1b3a:	0c c0       	rjmp	.+24     	; 0x1b54 <M_ADC_U16_ADCRead+0xd2>
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	while(Local_U32_Counter < POLLING_TIME)
	{
		Local_U32_Counter++;
    1b3c:	2f 5f       	subi	r18, 0xFF	; 255
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	4f 4f       	sbci	r20, 0xFF	; 255
    1b42:	5f 4f       	sbci	r21, 0xFF	; 255
	default:  break;
	}
	/* TO START CONVERTION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);

	while(Local_U32_Counter < POLLING_TIME)
    1b44:	20 30       	cpi	r18, 0x00	; 0
    1b46:	8d e2       	ldi	r24, 0x2D	; 45
    1b48:	38 07       	cpc	r19, r24
    1b4a:	81 e3       	ldi	r24, 0x31	; 49
    1b4c:	48 07       	cpc	r20, r24
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	58 07       	cpc	r21, r24
    1b52:	89 f7       	brne	.-30     	; 0x1b36 <M_ADC_U16_ADCRead+0xb4>
		if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCL_REG;
    1b54:	24 b1       	in	r18, 0x04	; 4
    1b56:	35 b1       	in	r19, 0x05	; 5
}
    1b58:	82 2f       	mov	r24, r18
    1b5a:	93 2f       	mov	r25, r19
    1b5c:	08 95       	ret

00001b5e <H_Servo_Void_ServoSetStop>:
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
}
void H_Servo_Void_ServoSetStop(void)
{
M_Timer_Void_PWMStop(TIMER1_CHANNEL);
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <M_Timer_Void_PWMStop>
}
    1b64:	08 95       	ret

00001b66 <H_Servo_Void_ServoSetStart>:
	f32 Local_F32_Value = ((Copy_U8_Angel * 5.0 ) / 180.0) + 5.0;
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Local_F32_Value);
}
void H_Servo_Void_ServoSetStart(void)
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	0e 94 ed 08 	call	0x11da	; 0x11da <M_Timer_Void_PWMStart>
}
    1b6c:	08 95       	ret

00001b6e <H_Servo_Void_ServoSetAngel>:
	M_Timer_Void_PWMSetFreaquancy(50);
}
void H_Servo_Void_ServoSetAngel(u8 Copy_U8_Angel)
{
	f32 Local_F32_Value = ((Copy_U8_Angel * 5.0 ) / 180.0) + 5.0;
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Local_F32_Value);
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	aa 27       	eor	r26, r26
    1b72:	97 fd       	sbrc	r25, 7
    1b74:	a0 95       	com	r26
    1b76:	ba 2f       	mov	r27, r26
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 ea       	ldi	r20, 0xA0	; 160
    1b86:	50 e4       	ldi	r21, 0x40	; 64
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	44 e3       	ldi	r20, 0x34	; 52
    1b92:	53 e4       	ldi	r21, 0x43	; 67
    1b94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 ea       	ldi	r20, 0xA0	; 160
    1b9e:	50 e4       	ldi	r21, 0x40	; 64
    1ba0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1ba4:	ab 01       	movw	r20, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	0e 94 77 08 	call	0x10ee	; 0x10ee <M_Timer_Void_PWMSetDutyCycle>
}
    1bae:	08 95       	ret

00001bb0 <H_Servo_Void_ServoInit>:

#include "Servo_Interface.h"

void H_Servo_Void_ServoInit(void)
{
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Timer_Void_PWMInit>
	M_Timer_Void_PWMSetFreaquancy(50);
    1bb6:	82 e3       	ldi	r24, 0x32	; 50
    1bb8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_Timer_Void_PWMSetFreaquancy>
}
    1bbc:	08 95       	ret

00001bbe <H_SSD_Void_SSDDigitDisplay>:
	}
}

static void H_SSD_Void_SSDDigitDisplay(u8 Copy_U8_Number)
{
	switch(Copy_U8_Number)
    1bbe:	84 30       	cpi	r24, 0x04	; 4
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <H_SSD_Void_SSDDigitDisplay+0x6>
    1bc2:	63 c0       	rjmp	.+198    	; 0x1c8a <H_SSD_Void_SSDDigitDisplay+0xcc>
    1bc4:	85 30       	cpi	r24, 0x05	; 5
    1bc6:	50 f4       	brcc	.+20     	; 0x1bdc <H_SSD_Void_SSDDigitDisplay+0x1e>
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	61 f1       	breq	.+88     	; 0x1c24 <H_SSD_Void_SSDDigitDisplay+0x66>
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	c8 f0       	brcs	.+50     	; 0x1c02 <H_SSD_Void_SSDDigitDisplay+0x44>
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	c9 f1       	breq	.+114    	; 0x1c46 <H_SSD_Void_SSDDigitDisplay+0x88>
    1bd4:	83 30       	cpi	r24, 0x03	; 3
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <H_SSD_Void_SSDDigitDisplay+0x1c>
    1bd8:	bd c0       	rjmp	.+378    	; 0x1d54 <H_SSD_Void_SSDDigitDisplay+0x196>
    1bda:	46 c0       	rjmp	.+140    	; 0x1c68 <H_SSD_Void_SSDDigitDisplay+0xaa>
    1bdc:	87 30       	cpi	r24, 0x07	; 7
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <H_SSD_Void_SSDDigitDisplay+0x24>
    1be0:	87 c0       	rjmp	.+270    	; 0x1cf0 <H_SSD_Void_SSDDigitDisplay+0x132>
    1be2:	88 30       	cpi	r24, 0x08	; 8
    1be4:	38 f4       	brcc	.+14     	; 0x1bf4 <H_SSD_Void_SSDDigitDisplay+0x36>
    1be6:	85 30       	cpi	r24, 0x05	; 5
    1be8:	09 f4       	brne	.+2      	; 0x1bec <H_SSD_Void_SSDDigitDisplay+0x2e>
    1bea:	60 c0       	rjmp	.+192    	; 0x1cac <H_SSD_Void_SSDDigitDisplay+0xee>
    1bec:	86 30       	cpi	r24, 0x06	; 6
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <H_SSD_Void_SSDDigitDisplay+0x34>
    1bf0:	b1 c0       	rjmp	.+354    	; 0x1d54 <H_SSD_Void_SSDDigitDisplay+0x196>
    1bf2:	6d c0       	rjmp	.+218    	; 0x1cce <H_SSD_Void_SSDDigitDisplay+0x110>
    1bf4:	88 30       	cpi	r24, 0x08	; 8
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <H_SSD_Void_SSDDigitDisplay+0x3c>
    1bf8:	8c c0       	rjmp	.+280    	; 0x1d12 <H_SSD_Void_SSDDigitDisplay+0x154>
    1bfa:	89 30       	cpi	r24, 0x09	; 9
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <H_SSD_Void_SSDDigitDisplay+0x42>
    1bfe:	aa c0       	rjmp	.+340    	; 0x1d54 <H_SSD_Void_SSDDigitDisplay+0x196>
    1c00:	99 c0       	rjmp	.+306    	; 0x1d34 <H_SSD_Void_SSDDigitDisplay+0x176>
	{
	case 0:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1c02:	8e e0       	ldi	r24, 0x0E	; 14
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1c0a:	8f e0       	ldi	r24, 0x0F	; 15
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1c12:	80 e1       	ldi	r24, 0x10	; 16
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1c1a:	81 e1       	ldi	r24, 0x11	; 17
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1c22:	08 95       	ret
		break;
	case 1:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1c24:	8e e0       	ldi	r24, 0x0E	; 14
    1c26:	61 e0       	ldi	r22, 0x01	; 1
    1c28:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1c2c:	8f e0       	ldi	r24, 0x0F	; 15
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1c34:	80 e1       	ldi	r24, 0x10	; 16
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1c3c:	81 e1       	ldi	r24, 0x11	; 17
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1c44:	08 95       	ret
		break;
	case 2:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1c46:	8e e0       	ldi	r24, 0x0E	; 14
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    1c4e:	8f e0       	ldi	r24, 0x0F	; 15
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1c56:	80 e1       	ldi	r24, 0x10	; 16
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1c5e:	81 e1       	ldi	r24, 0x11	; 17
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1c66:	08 95       	ret
		break;
	case 3:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1c68:	8e e0       	ldi	r24, 0x0E	; 14
    1c6a:	61 e0       	ldi	r22, 0x01	; 1
    1c6c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    1c70:	8f e0       	ldi	r24, 0x0F	; 15
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1c78:	80 e1       	ldi	r24, 0x10	; 16
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1c80:	81 e1       	ldi	r24, 0x11	; 17
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1c88:	08 95       	ret
		break;
	case 4:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1c8a:	8e e0       	ldi	r24, 0x0E	; 14
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1c92:	8f e0       	ldi	r24, 0x0F	; 15
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    1c9a:	80 e1       	ldi	r24, 0x10	; 16
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1ca2:	81 e1       	ldi	r24, 0x11	; 17
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1caa:	08 95       	ret
		break;
	case 5:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1cac:	8e e0       	ldi	r24, 0x0E	; 14
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1cb4:	8f e0       	ldi	r24, 0x0F	; 15
    1cb6:	60 e0       	ldi	r22, 0x00	; 0
    1cb8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    1cbc:	80 e1       	ldi	r24, 0x10	; 16
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1cc4:	81 e1       	ldi	r24, 0x11	; 17
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1ccc:	08 95       	ret
		break;
	case 6:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1cce:	8e e0       	ldi	r24, 0x0E	; 14
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    1cd6:	8f e0       	ldi	r24, 0x0F	; 15
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    1cde:	80 e1       	ldi	r24, 0x10	; 16
    1ce0:	61 e0       	ldi	r22, 0x01	; 1
    1ce2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1ce6:	81 e1       	ldi	r24, 0x11	; 17
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1cee:	08 95       	ret
		break;
	case 7:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1cf0:	8e e0       	ldi	r24, 0x0E	; 14
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
    1cf8:	8f e0       	ldi	r24, 0x0F	; 15
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
    1d00:	80 e1       	ldi	r24, 0x10	; 16
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
    1d08:	81 e1       	ldi	r24, 0x11	; 17
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1d10:	08 95       	ret
		break;
	case 8:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
    1d12:	8e e0       	ldi	r24, 0x0E	; 14
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1d1a:	8f e0       	ldi	r24, 0x0F	; 15
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1d22:	80 e1       	ldi	r24, 0x10	; 16
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,HIGH);
    1d2a:	81 e1       	ldi	r24, 0x11	; 17
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1d32:	08 95       	ret
		break;
	case 9:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
    1d34:	8e e0       	ldi	r24, 0x0E	; 14
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
    1d3c:	8f e0       	ldi	r24, 0x0F	; 15
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
    1d44:	80 e1       	ldi	r24, 0x10	; 16
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,HIGH);
    1d4c:	81 e1       	ldi	r24, 0x11	; 17
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1d54:	08 95       	ret

00001d56 <H_SSD_Void_SSDWriteNumber>:

	M_DIO_Void_SetPinDirection(SSD_EN1_PIN,OUTPUT);
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
}
void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number)
{
    1d56:	ef 92       	push	r14
    1d58:	ff 92       	push	r15
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	28 2f       	mov	r18, r24
	u32 Local_U32_Counter = 0;
	for(;Local_U32_Counter < 500;Local_U32_Counter++)
	{
	u8 Local_U8_Ones = Copy_U8_Number % 10;
    1d64:	6a e0       	ldi	r22, 0x0A	; 10
    1d66:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    1d6a:	e9 2e       	mov	r14, r25
	u8 Local_U8_Tens = Copy_U8_Number / 10;
    1d6c:	82 2f       	mov	r24, r18
    1d6e:	0e 94 2b 1c 	call	0x3856	; 0x3856 <__udivmodqi4>
    1d72:	f8 2e       	mov	r15, r24
    1d74:	c0 e0       	ldi	r28, 0x00	; 0
    1d76:	d0 e0       	ldi	r29, 0x00	; 0
    1d78:	00 ea       	ldi	r16, 0xA0	; 160
    1d7a:	1f e0       	ldi	r17, 0x0F	; 15
	H_SSD_Void_SSDDigitDisplay(Local_U8_Tens);
    1d7c:	8f 2d       	mov	r24, r15
    1d7e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <H_SSD_Void_SSDDigitDisplay>
	M_DIO_Void_SetPinValue(SSD_EN2_PIN,HIGH);
    1d82:	86 e1       	ldi	r24, 0x16	; 22
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <H_SSD_Void_SSDWriteNumber+0x36>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN2_PIN,LOW);
    1d90:	86 e1       	ldi	r24, 0x16	; 22
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	H_SSD_Void_SSDDigitDisplay(Local_U8_Ones);
    1d98:	8e 2d       	mov	r24, r14
    1d9a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <H_SSD_Void_SSDDigitDisplay>
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
    1d9e:	85 e1       	ldi	r24, 0x15	; 21
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1da6:	c8 01       	movw	r24, r16
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <H_SSD_Void_SSDWriteNumber+0x52>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
    1dac:	85 e1       	ldi	r24, 0x15	; 21
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1db4:	21 96       	adiw	r28, 0x01	; 1
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
}
void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number)
{
	u32 Local_U32_Counter = 0;
	for(;Local_U32_Counter < 500;Local_U32_Counter++)
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	c4 3f       	cpi	r28, 0xF4	; 244
    1dba:	d8 07       	cpc	r29, r24
    1dbc:	f9 f6       	brne	.-66     	; 0x1d7c <H_SSD_Void_SSDWriteNumber+0x26>
	H_SSD_Void_SSDDigitDisplay(Local_U8_Ones);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
	}
}
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	08 95       	ret

00001dcc <H_SSD_Void_SSDInit>:
#include "SSD_Interface.h"
#include "SSD_Private.h"

void H_SSD_Void_SSDInit(void)
{
	M_DIO_Void_SetPinDirection(SSD_A_PIN,OUTPUT);
    1dcc:	8e e0       	ldi	r24, 0x0E	; 14
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_B_PIN,OUTPUT);
    1dd4:	8f e0       	ldi	r24, 0x0F	; 15
    1dd6:	61 e0       	ldi	r22, 0x01	; 1
    1dd8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_C_PIN,OUTPUT);
    1ddc:	80 e1       	ldi	r24, 0x10	; 16
    1dde:	61 e0       	ldi	r22, 0x01	; 1
    1de0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_D_PIN,OUTPUT);
    1de4:	81 e1       	ldi	r24, 0x11	; 17
    1de6:	61 e0       	ldi	r22, 0x01	; 1
    1de8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(SSD_EN1_PIN,OUTPUT);
    1dec:	85 e1       	ldi	r24, 0x15	; 21
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
    1df4:	86 e1       	ldi	r24, 0x16	; 22
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
}
    1dfc:	08 95       	ret

00001dfe <H_PB_U8_PBRead>:

}
u8   H_PB_U8_PBRead(u8 Copy_U8_PushButton)
{
	u8 Local_U8_Reading = RELEASED;
	switch (Copy_U8_PushButton)
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	11 f1       	breq	.+68     	; 0x1e46 <H_PB_U8_PBRead+0x48>
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	20 f0       	brcs	.+8      	; 0x1e0e <H_PB_U8_PBRead+0x10>
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <H_PB_U8_PBRead+0xe>
    1e0a:	51 c0       	rjmp	.+162    	; 0x1eae <H_PB_U8_PBRead+0xb0>
    1e0c:	36 c0       	rjmp	.+108    	; 0x1e7a <H_PB_U8_PBRead+0x7c>
	{
	case PB0 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    1e0e:	84 e1       	ldi	r24, 0x14	; 20
    1e10:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <H_PB_U8_PBRead+0x1c>
    1e18:	4a c0       	rjmp	.+148    	; 0x1eae <H_PB_U8_PBRead+0xb0>
    1e1a:	24 e1       	ldi	r18, 0x14	; 20
    1e1c:	35 e0       	ldi	r19, 0x05	; 5
    1e1e:	40 e9       	ldi	r20, 0x90	; 144
    1e20:	51 e0       	ldi	r21, 0x01	; 1
    1e22:	ca 01       	movw	r24, r20
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <H_PB_U8_PBRead+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	21 50       	subi	r18, 0x01	; 1
    1e2a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	d1 f7       	brne	.-12     	; 0x1e22 <H_PB_U8_PBRead+0x24>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    1e2e:	84 e1       	ldi	r24, 0x14	; 20
    1e30:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <H_PB_U8_PBRead+0x3c>
    1e38:	3a c0       	rjmp	.+116    	; 0x1eae <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED);
    1e3a:	84 e1       	ldi	r24, 0x14	; 20
    1e3c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	d9 f3       	breq	.-10     	; 0x1e3a <H_PB_U8_PBRead+0x3c>
    1e44:	36 c0       	rjmp	.+108    	; 0x1eb2 <H_PB_U8_PBRead+0xb4>
				Local_U8_Reading = PRESSED;
			}
		}
		break;
	case PB1 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    1e46:	8e e2       	ldi	r24, 0x2E	; 46
    1e48:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	79 f5       	brne	.+94     	; 0x1eae <H_PB_U8_PBRead+0xb0>
    1e50:	24 e1       	ldi	r18, 0x14	; 20
    1e52:	35 e0       	ldi	r19, 0x05	; 5
    1e54:	40 e9       	ldi	r20, 0x90	; 144
    1e56:	51 e0       	ldi	r21, 0x01	; 1
    1e58:	ca 01       	movw	r24, r20
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	f1 f7       	brne	.-4      	; 0x1e5a <H_PB_U8_PBRead+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5e:	21 50       	subi	r18, 0x01	; 1
    1e60:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	d1 f7       	brne	.-12     	; 0x1e58 <H_PB_U8_PBRead+0x5a>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    1e64:	8e e2       	ldi	r24, 0x2E	; 46
    1e66:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	01 f5       	brne	.+64     	; 0x1eae <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED);
    1e6e:	8e e2       	ldi	r24, 0x2E	; 46
    1e70:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	d9 f3       	breq	.-10     	; 0x1e6e <H_PB_U8_PBRead+0x70>
    1e78:	1c c0       	rjmp	.+56     	; 0x1eb2 <H_PB_U8_PBRead+0xb4>
				Local_U8_Reading = PRESSED;
			}
		}
		break;
	case PB2 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    1e7a:	8a e2       	ldi	r24, 0x2A	; 42
    1e7c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	a9 f4       	brne	.+42     	; 0x1eae <H_PB_U8_PBRead+0xb0>
    1e84:	24 e1       	ldi	r18, 0x14	; 20
    1e86:	35 e0       	ldi	r19, 0x05	; 5
    1e88:	40 e9       	ldi	r20, 0x90	; 144
    1e8a:	51 e0       	ldi	r21, 0x01	; 1
    1e8c:	ca 01       	movw	r24, r20
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <H_PB_U8_PBRead+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e96:	d1 f7       	brne	.-12     	; 0x1e8c <H_PB_U8_PBRead+0x8e>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    1e98:	8a e2       	ldi	r24, 0x2A	; 42
    1e9a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	31 f4       	brne	.+12     	; 0x1eae <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED);
    1ea2:	8a e2       	ldi	r24, 0x2A	; 42
    1ea4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	d9 f3       	breq	.-10     	; 0x1ea2 <H_PB_U8_PBRead+0xa4>
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <H_PB_U8_PBRead+0xb4>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	08 95       	ret
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	default  :                                                     break;
	}
	return Local_U8_Reading;
}
    1eb4:	08 95       	ret

00001eb6 <H_PB_Void_PBInit>:
#include "PB_Interface.h"


void H_PB_Void_PBInit(u8 Copy_U8_PushButton)
{
	switch (Copy_U8_PushButton)
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	51 f0       	breq	.+20     	; 0x1ece <H_PB_Void_PBInit+0x18>
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	18 f0       	brcs	.+6      	; 0x1ec4 <H_PB_Void_PBInit+0xe>
    1ebe:	82 30       	cpi	r24, 0x02	; 2
    1ec0:	79 f4       	brne	.+30     	; 0x1ee0 <H_PB_Void_PBInit+0x2a>
    1ec2:	0a c0       	rjmp	.+20     	; 0x1ed8 <H_PB_Void_PBInit+0x22>
	{
	case PB0 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
    1ec4:	84 e1       	ldi	r24, 0x14	; 20
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    1ecc:	08 95       	ret
	case PB1 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
    1ece:	84 e1       	ldi	r24, 0x14	; 20
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    1ed6:	08 95       	ret
	case PB2 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
    1ed8:	84 e1       	ldi	r24, 0x14	; 20
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    1ee0:	08 95       	ret

00001ee2 <H_LM35_Void_LM35Read>:
{
	M_ADC_Void_ADCInit();
}
u16  H_LM35_Void_LM35Read(void)
{
	 u16 Local_U16_AdcValue = M_ADC_U16_ADCRead(LM35_PIN);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <M_ADC_U16_ADCRead>
    1ee8:	a0 e0       	ldi	r26, 0x00	; 0
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	24 ef       	ldi	r18, 0xF4	; 244
    1ef2:	31 e0       	ldi	r19, 0x01	; 1
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__mulsi3>
    1efc:	2f ef       	ldi	r18, 0xFF	; 255
    1efe:	33 e0       	ldi	r19, 0x03	; 3
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	0e 94 4b 1c 	call	0x3896	; 0x3896 <__udivmodsi4>
    1f08:	82 2f       	mov	r24, r18
    1f0a:	93 2f       	mov	r25, r19
	 u16 temp               = ((u32)Local_U16_AdcValue * 500) / 1023;
	 return temp;
}
    1f0c:	08 95       	ret

00001f0e <H_LM35_Void_LM35Init>:

#include "LM35_Interface.h"

void H_LM35_Void_LM35Init(void)
{
	M_ADC_Void_ADCInit();
    1f0e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <M_ADC_Void_ADCInit>
}
    1f12:	08 95       	ret

00001f14 <H_LED_Void_LedTog>:
	default:                                         break;
	}
}
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	b1 f0       	breq	.+44     	; 0x1f44 <H_LED_Void_LedTog+0x30>
    1f18:	83 30       	cpi	r24, 0x03	; 3
    1f1a:	28 f4       	brcc	.+10     	; 0x1f26 <H_LED_Void_LedTog+0x12>
    1f1c:	88 23       	and	r24, r24
    1f1e:	51 f0       	breq	.+20     	; 0x1f34 <H_LED_Void_LedTog+0x20>
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	f9 f4       	brne	.+62     	; 0x1f62 <H_LED_Void_LedTog+0x4e>
    1f24:	0b c0       	rjmp	.+22     	; 0x1f3c <H_LED_Void_LedTog+0x28>
    1f26:	84 30       	cpi	r24, 0x04	; 4
    1f28:	a9 f0       	breq	.+42     	; 0x1f54 <H_LED_Void_LedTog+0x40>
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	78 f0       	brcs	.+30     	; 0x1f4c <H_LED_Void_LedTog+0x38>
    1f2e:	85 30       	cpi	r24, 0x05	; 5
    1f30:	c1 f4       	brne	.+48     	; 0x1f62 <H_LED_Void_LedTog+0x4e>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <H_LED_Void_LedTog+0x48>
	{
	case LED0: M_DIO_Void_TogPin(LED0_PIN); break;
    1f34:	80 e2       	ldi	r24, 0x20	; 32
    1f36:	0e 94 0e 0c 	call	0x181c	; 0x181c <M_DIO_Void_TogPin>
    1f3a:	08 95       	ret
	case LED1: M_DIO_Void_TogPin(LED1_PIN); break;
    1f3c:	85 e2       	ldi	r24, 0x25	; 37
    1f3e:	0e 94 0e 0c 	call	0x181c	; 0x181c <M_DIO_Void_TogPin>
    1f42:	08 95       	ret
	case LED2: M_DIO_Void_TogPin(LED2_PIN); break;
    1f44:	8b e2       	ldi	r24, 0x2B	; 43
    1f46:	0e 94 0e 0c 	call	0x181c	; 0x181c <M_DIO_Void_TogPin>
    1f4a:	08 95       	ret
	case LED3: M_DIO_Void_TogPin(LED3_PIN); break;
    1f4c:	8a e2       	ldi	r24, 0x2A	; 42
    1f4e:	0e 94 0e 0c 	call	0x181c	; 0x181c <M_DIO_Void_TogPin>
    1f52:	08 95       	ret
	case LED4: M_DIO_Void_TogPin(LED4_PIN); break;
    1f54:	8e e2       	ldi	r24, 0x2E	; 46
    1f56:	0e 94 0e 0c 	call	0x181c	; 0x181c <M_DIO_Void_TogPin>
    1f5a:	08 95       	ret
	case LED5: M_DIO_Void_TogPin(LED5_PIN); break;
    1f5c:	84 e1       	ldi	r24, 0x14	; 20
    1f5e:	0e 94 0e 0c 	call	0x181c	; 0x181c <M_DIO_Void_TogPin>
    1f62:	08 95       	ret

00001f64 <H_LED_Void_LedSetOff>:
	default:                                          break;
	}
}
void H_LED_Void_LedSetOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	c1 f0       	breq	.+48     	; 0x1f98 <H_LED_Void_LedSetOff+0x34>
    1f68:	83 30       	cpi	r24, 0x03	; 3
    1f6a:	28 f4       	brcc	.+10     	; 0x1f76 <H_LED_Void_LedSetOff+0x12>
    1f6c:	88 23       	and	r24, r24
    1f6e:	51 f0       	breq	.+20     	; 0x1f84 <H_LED_Void_LedSetOff+0x20>
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	29 f5       	brne	.+74     	; 0x1fbe <H_LED_Void_LedSetOff+0x5a>
    1f74:	0c c0       	rjmp	.+24     	; 0x1f8e <H_LED_Void_LedSetOff+0x2a>
    1f76:	84 30       	cpi	r24, 0x04	; 4
    1f78:	c9 f0       	breq	.+50     	; 0x1fac <H_LED_Void_LedSetOff+0x48>
    1f7a:	84 30       	cpi	r24, 0x04	; 4
    1f7c:	90 f0       	brcs	.+36     	; 0x1fa2 <H_LED_Void_LedSetOff+0x3e>
    1f7e:	85 30       	cpi	r24, 0x05	; 5
    1f80:	f1 f4       	brne	.+60     	; 0x1fbe <H_LED_Void_LedSetOff+0x5a>
    1f82:	19 c0       	rjmp	.+50     	; 0x1fb6 <H_LED_Void_LedSetOff+0x52>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,LOW); break;
    1f84:	80 e2       	ldi	r24, 0x20	; 32
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1f8c:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,LOW); break;
    1f8e:	85 e2       	ldi	r24, 0x25	; 37
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1f96:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,LOW); break;
    1f98:	8b e2       	ldi	r24, 0x2B	; 43
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1fa0:	08 95       	ret
	case LED3: M_DIO_Void_SetPinValue(LED3_PIN,LOW); break;
    1fa2:	8a e2       	ldi	r24, 0x2A	; 42
    1fa4:	60 e0       	ldi	r22, 0x00	; 0
    1fa6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1faa:	08 95       	ret
	case LED4: M_DIO_Void_SetPinValue(LED4_PIN,LOW); break;
    1fac:	8e e2       	ldi	r24, 0x2E	; 46
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1fb4:	08 95       	ret
	case LED5: M_DIO_Void_SetPinValue(LED5_PIN,LOW); break;
    1fb6:	84 e1       	ldi	r24, 0x14	; 20
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1fbe:	08 95       	ret

00001fc0 <H_LED_Void_LedSetOn>:
	default:                                                break;
	}
}
void H_LED_Void_LedSetOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1fc0:	82 30       	cpi	r24, 0x02	; 2
    1fc2:	c1 f0       	breq	.+48     	; 0x1ff4 <H_LED_Void_LedSetOn+0x34>
    1fc4:	83 30       	cpi	r24, 0x03	; 3
    1fc6:	28 f4       	brcc	.+10     	; 0x1fd2 <H_LED_Void_LedSetOn+0x12>
    1fc8:	88 23       	and	r24, r24
    1fca:	51 f0       	breq	.+20     	; 0x1fe0 <H_LED_Void_LedSetOn+0x20>
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	29 f5       	brne	.+74     	; 0x201a <H_LED_Void_LedSetOn+0x5a>
    1fd0:	0c c0       	rjmp	.+24     	; 0x1fea <H_LED_Void_LedSetOn+0x2a>
    1fd2:	84 30       	cpi	r24, 0x04	; 4
    1fd4:	c9 f0       	breq	.+50     	; 0x2008 <H_LED_Void_LedSetOn+0x48>
    1fd6:	84 30       	cpi	r24, 0x04	; 4
    1fd8:	90 f0       	brcs	.+36     	; 0x1ffe <H_LED_Void_LedSetOn+0x3e>
    1fda:	85 30       	cpi	r24, 0x05	; 5
    1fdc:	f1 f4       	brne	.+60     	; 0x201a <H_LED_Void_LedSetOn+0x5a>
    1fde:	19 c0       	rjmp	.+50     	; 0x2012 <H_LED_Void_LedSetOn+0x52>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,HIGH); break;
    1fe0:	80 e2       	ldi	r24, 0x20	; 32
    1fe2:	61 e0       	ldi	r22, 0x01	; 1
    1fe4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1fe8:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,HIGH); break;
    1fea:	85 e2       	ldi	r24, 0x25	; 37
    1fec:	61 e0       	ldi	r22, 0x01	; 1
    1fee:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1ff2:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,HIGH); break;
    1ff4:	8b e2       	ldi	r24, 0x2B	; 43
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    1ffc:	08 95       	ret
	case LED3: M_DIO_Void_SetPinValue(LED3_PIN,HIGH); break;
    1ffe:	8a e2       	ldi	r24, 0x2A	; 42
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    2006:	08 95       	ret
	case LED4: M_DIO_Void_SetPinValue(LED4_PIN,HIGH); break;
    2008:	8e e2       	ldi	r24, 0x2E	; 46
    200a:	61 e0       	ldi	r22, 0x01	; 1
    200c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    2010:	08 95       	ret
	case LED5: M_DIO_Void_SetPinValue(LED5_PIN,HIGH); break;
    2012:	84 e1       	ldi	r24, 0x14	; 20
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    201a:	08 95       	ret

0000201c <H_LED_Void_LedInit>:
#include "LED_Interface.h"


void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	c1 f0       	breq	.+48     	; 0x2050 <H_LED_Void_LedInit+0x34>
    2020:	83 30       	cpi	r24, 0x03	; 3
    2022:	28 f4       	brcc	.+10     	; 0x202e <H_LED_Void_LedInit+0x12>
    2024:	88 23       	and	r24, r24
    2026:	51 f0       	breq	.+20     	; 0x203c <H_LED_Void_LedInit+0x20>
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	29 f5       	brne	.+74     	; 0x2076 <H_LED_Void_LedInit+0x5a>
    202c:	0c c0       	rjmp	.+24     	; 0x2046 <H_LED_Void_LedInit+0x2a>
    202e:	84 30       	cpi	r24, 0x04	; 4
    2030:	c9 f0       	breq	.+50     	; 0x2064 <H_LED_Void_LedInit+0x48>
    2032:	84 30       	cpi	r24, 0x04	; 4
    2034:	90 f0       	brcs	.+36     	; 0x205a <H_LED_Void_LedInit+0x3e>
    2036:	85 30       	cpi	r24, 0x05	; 5
    2038:	f1 f4       	brne	.+60     	; 0x2076 <H_LED_Void_LedInit+0x5a>
    203a:	19 c0       	rjmp	.+50     	; 0x206e <H_LED_Void_LedInit+0x52>
	{
	case LED0: M_DIO_Void_SetPinDirection(LED0_PIN,OUTPUT); break;
    203c:	80 e2       	ldi	r24, 0x20	; 32
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    2044:	08 95       	ret
	case LED1: M_DIO_Void_SetPinDirection(LED1_PIN,OUTPUT); break;
    2046:	85 e2       	ldi	r24, 0x25	; 37
    2048:	61 e0       	ldi	r22, 0x01	; 1
    204a:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    204e:	08 95       	ret
	case LED2: M_DIO_Void_SetPinDirection(LED2_PIN,OUTPUT); break;
    2050:	8b e2       	ldi	r24, 0x2B	; 43
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    2058:	08 95       	ret
	case LED3: M_DIO_Void_SetPinDirection(LED3_PIN,OUTPUT); break;
    205a:	8a e2       	ldi	r24, 0x2A	; 42
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    2062:	08 95       	ret
	case LED4: M_DIO_Void_SetPinDirection(LED4_PIN,OUTPUT); break;
    2064:	8e e2       	ldi	r24, 0x2E	; 46
    2066:	61 e0       	ldi	r22, 0x01	; 1
    2068:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    206c:	08 95       	ret
	case LED5: M_DIO_Void_SetPinDirection(LED5_PIN,OUTPUT); break;
    206e:	84 e1       	ldi	r24, 0x14	; 20
    2070:	61 e0       	ldi	r22, 0x01	; 1
    2072:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
    2076:	08 95       	ret

00002078 <H_LCD_Void_SetCallBack>:
	}
}

void H_LCD_Void_SetCallBack(u8(*Copy_Ptr)(void))
{
	LCD_CallBack=Copy_Ptr;
    2078:	90 93 6d 03 	sts	0x036D, r25
    207c:	80 93 6c 03 	sts	0x036C, r24
}
    2080:	08 95       	ret

00002082 <H_LCD_Void_SetLCDPins>:
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
}

static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
    2082:	1f 93       	push	r17
    2084:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 4 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 5 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 6 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 7 & 0x01);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
    2086:	68 2f       	mov	r22, r24
    2088:	61 70       	andi	r22, 0x01	; 1
    208a:	8e e0       	ldi	r24, 0x0E	; 14
    208c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
    2090:	61 2f       	mov	r22, r17
    2092:	66 95       	lsr	r22
    2094:	61 70       	andi	r22, 0x01	; 1
    2096:	8f e0       	ldi	r24, 0x0F	; 15
    2098:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
    209c:	61 2f       	mov	r22, r17
    209e:	66 95       	lsr	r22
    20a0:	66 95       	lsr	r22
    20a2:	61 70       	andi	r22, 0x01	; 1
    20a4:	80 e1       	ldi	r24, 0x10	; 16
    20a6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
    20aa:	16 95       	lsr	r17
    20ac:	16 95       	lsr	r17
    20ae:	16 95       	lsr	r17
    20b0:	11 70       	andi	r17, 0x01	; 1
    20b2:	81 e1       	ldi	r24, 0x11	; 17
    20b4:	61 2f       	mov	r22, r17
    20b6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
#endif
}
    20ba:	1f 91       	pop	r17
    20bc:	08 95       	ret

000020be <H_LCD_Void_LCDWriteCommand>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    20c6:	85 e1       	ldi	r24, 0x15	; 21
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
    20ce:	8f 2d       	mov	r24, r15
    20d0:	82 95       	swap	r24
    20d2:	8f 70       	andi	r24, 0x0F	; 15
    20d4:	0e 94 41 10 	call	0x2082	; 0x2082 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    20d8:	87 e1       	ldi	r24, 0x17	; 23
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    20e0:	00 ea       	ldi	r16, 0xA0	; 160
    20e2:	1f e0       	ldi	r17, 0x0F	; 15
    20e4:	c8 01       	movw	r24, r16
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <H_LCD_Void_LCDWriteCommand+0x28>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    20ea:	87 e1       	ldi	r24, 0x17	; 23
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    20f2:	c8 01       	movw	r24, r16
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <H_LCD_Void_LCDWriteCommand+0x36>
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
    20f8:	8f 2d       	mov	r24, r15
    20fa:	0e 94 41 10 	call	0x2082	; 0x2082 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    20fe:	87 e1       	ldi	r24, 0x17	; 23
    2100:	61 e0       	ldi	r22, 0x01	; 1
    2102:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    2106:	c8 01       	movw	r24, r16
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <H_LCD_Void_LCDWriteCommand+0x4a>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    210c:	87 e1       	ldi	r24, 0x17	; 23
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    2114:	c8 01       	movw	r24, r16
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <H_LCD_Void_LCDWriteCommand+0x58>
#endif
	_delay_ms(1);
}
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	08 95       	ret

00002122 <H_LCD_Void_LCDClear>:
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
}

void H_LCD_Void_LCDClear(void)
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	0e 94 5f 10 	call	0x20be	; 0x20be <H_LCD_Void_LCDWriteCommand>
}
    2128:	08 95       	ret

0000212a <H_LCD_Void_LCDGoTo>:
		Local_S8_Counter--;
	}
}

void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <H_LCD_Void_LCDGoTo+0x6>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Arr [2] = {0x80 , 0xC0};
    2134:	90 e8       	ldi	r25, 0x80	; 128
    2136:	99 83       	std	Y+1, r25	; 0x01
    2138:	90 ec       	ldi	r25, 0xC0	; 192
    213a:	9a 83       	std	Y+2, r25	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
    213c:	fe 01       	movw	r30, r28
    213e:	e8 0f       	add	r30, r24
    2140:	f1 1d       	adc	r31, r1
    2142:	81 81       	ldd	r24, Z+1	; 0x01
    2144:	86 0f       	add	r24, r22
    2146:	0e 94 5f 10 	call	0x20be	; 0x20be <H_LCD_Void_LCDWriteCommand>
}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <H_LCD_Void_LCDWriteCharacter>:
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
#endif

}
void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    215c:	85 e1       	ldi	r24, 0x15	; 21
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Character >> 4);
    2164:	8f 2d       	mov	r24, r15
    2166:	82 95       	swap	r24
    2168:	8f 70       	andi	r24, 0x0F	; 15
    216a:	0e 94 41 10 	call	0x2082	; 0x2082 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    216e:	87 e1       	ldi	r24, 0x17	; 23
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    2176:	00 ea       	ldi	r16, 0xA0	; 160
    2178:	1f e0       	ldi	r17, 0x0F	; 15
    217a:	c8 01       	movw	r24, r16
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <H_LCD_Void_LCDWriteCharacter+0x28>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2180:	87 e1       	ldi	r24, 0x17	; 23
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    2188:	c8 01       	movw	r24, r16
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <H_LCD_Void_LCDWriteCharacter+0x36>
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
    218e:	8f 2d       	mov	r24, r15
    2190:	0e 94 41 10 	call	0x2082	; 0x2082 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2194:	87 e1       	ldi	r24, 0x17	; 23
    2196:	61 e0       	ldi	r22, 0x01	; 1
    2198:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    219c:	c8 01       	movw	r24, r16
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <H_LCD_Void_LCDWriteCharacter+0x4a>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    21a2:	87 e1       	ldi	r24, 0x17	; 23
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    21aa:	c8 01       	movw	r24, r16
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <H_LCD_Void_LCDWriteCharacter+0x58>
#endif
	_delay_ms(1);
}
    21b0:	1f 91       	pop	r17
    21b2:	0f 91       	pop	r16
    21b4:	ff 90       	pop	r15
    21b6:	08 95       	ret

000021b8 <H_LCD_Void_LCDWriteNumber>:
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)
{
    21b8:	af 92       	push	r10
    21ba:	bf 92       	push	r11
    21bc:	cf 92       	push	r12
    21be:	df 92       	push	r13
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	62 97       	sbiw	r28, 0x12	; 18
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	6b 01       	movw	r12, r22
    21dc:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = -1;
	u8 Local_U8_Arr[16];
	if(Copy_S32_Num < 0)
    21de:	99 23       	and	r25, r25
    21e0:	5c f4       	brge	.+22     	; 0x21f8 <H_LCD_Void_LCDWriteNumber+0x40>
	{
		Copy_S32_Num = Copy_S32_Num * -1;
    21e2:	f0 94       	com	r15
    21e4:	e0 94       	com	r14
    21e6:	d0 94       	com	r13
    21e8:	c0 94       	com	r12
    21ea:	c1 1c       	adc	r12, r1
    21ec:	d1 1c       	adc	r13, r1
    21ee:	e1 1c       	adc	r14, r1
    21f0:	f1 1c       	adc	r15, r1
		H_LCD_Void_LCDWriteCharacter('-');
    21f2:	8d e2       	ldi	r24, 0x2D	; 45
    21f4:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
    21f8:	0f ef       	ldi	r16, 0xFF	; 255
	}
	do
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
    21fa:	5e 01       	movw	r10, r28
    21fc:	08 94       	sec
    21fe:	a1 1c       	adc	r10, r1
    2200:	b1 1c       	adc	r11, r1
		Copy_S32_Num = Copy_S32_Num * -1;
		H_LCD_Void_LCDWriteCharacter('-');
	}
	do
	{
		Local_S8_Counter++;
    2202:	0f 5f       	subi	r16, 0xFF	; 255
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
    2204:	80 2f       	mov	r24, r16
    2206:	99 27       	eor	r25, r25
    2208:	87 fd       	sbrc	r24, 7
    220a:	90 95       	com	r25
    220c:	95 01       	movw	r18, r10
    220e:	28 0f       	add	r18, r24
    2210:	39 1f       	adc	r19, r25
    2212:	3a 8b       	std	Y+18, r19	; 0x12
    2214:	29 8b       	std	Y+17, r18	; 0x11
    2216:	c7 01       	movw	r24, r14
    2218:	b6 01       	movw	r22, r12
    221a:	2a e0       	ldi	r18, 0x0A	; 10
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	0e 94 6d 1c 	call	0x38da	; 0x38da <__divmodsi4>
    2226:	e9 89       	ldd	r30, Y+17	; 0x11
    2228:	fa 89       	ldd	r31, Y+18	; 0x12
    222a:	60 83       	st	Z, r22
		Copy_S32_Num = Copy_S32_Num / 10;
    222c:	c7 01       	movw	r24, r14
    222e:	b6 01       	movw	r22, r12
    2230:	2a e0       	ldi	r18, 0x0A	; 10
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	0e 94 6d 1c 	call	0x38da	; 0x38da <__divmodsi4>
    223c:	82 2f       	mov	r24, r18
    223e:	93 2f       	mov	r25, r19
    2240:	a4 2f       	mov	r26, r20
    2242:	b5 2f       	mov	r27, r21
    2244:	6c 01       	movw	r12, r24
    2246:	7d 01       	movw	r14, r26
	}while(Copy_S32_Num != 0);
    2248:	c1 14       	cp	r12, r1
    224a:	d1 04       	cpc	r13, r1
    224c:	e1 04       	cpc	r14, r1
    224e:	f1 04       	cpc	r15, r1
    2250:	c1 f6       	brne	.-80     	; 0x2202 <H_LCD_Void_LCDWriteNumber+0x4a>
	while(Local_S8_Counter >= 0)
    2252:	00 23       	and	r16, r16
    2254:	8c f0       	brlt	.+34     	; 0x2278 <H_LCD_Void_LCDWriteNumber+0xc0>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
    2256:	7e 01       	movw	r14, r28
    2258:	08 94       	sec
    225a:	e1 1c       	adc	r14, r1
    225c:	f1 1c       	adc	r15, r1
    225e:	80 2f       	mov	r24, r16
    2260:	99 27       	eor	r25, r25
    2262:	87 fd       	sbrc	r24, 7
    2264:	90 95       	com	r25
    2266:	f7 01       	movw	r30, r14
    2268:	e8 0f       	add	r30, r24
    226a:	f9 1f       	adc	r31, r25
    226c:	80 81       	ld	r24, Z
    226e:	80 5d       	subi	r24, 0xD0	; 208
    2270:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
    2274:	01 50       	subi	r16, 0x01	; 1
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}while(Copy_S32_Num != 0);
	while(Local_S8_Counter >= 0)
    2276:	9a f7       	brpl	.-26     	; 0x225e <H_LCD_Void_LCDWriteNumber+0xa6>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}
}
    2278:	62 96       	adiw	r28, 0x12	; 18
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	bf 90       	pop	r11
    2294:	af 90       	pop	r10
    2296:	08 95       	ret

00002298 <H_LCD_Void_LCDWriteString>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    22a0:	88 81       	ld	r24, Y
    22a2:	88 23       	and	r24, r24
    22a4:	51 f0       	breq	.+20     	; 0x22ba <H_LCD_Void_LCDWriteString+0x22>
    22a6:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
    22a8:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    22ac:	1f 5f       	subi	r17, 0xFF	; 255
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    22ae:	fe 01       	movw	r30, r28
    22b0:	e1 0f       	add	r30, r17
    22b2:	f1 1d       	adc	r31, r1
    22b4:	80 81       	ld	r24, Z
    22b6:	88 23       	and	r24, r24
    22b8:	b9 f7       	brne	.-18     	; 0x22a8 <H_LCD_Void_LCDWriteString+0x10>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	08 95       	ret

000022c2 <H_LCD_Void_LCDAccessDenied>:
	}
}

void H_LCD_Void_LCDAccessDenied(void)
{
	H_LCD_Void_LCDClear();
    22c2:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
	H_LCD_Void_LCDGoTo(0,0);
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
	H_LCD_Void_LCDWriteString(" Access Denied");
    22ce:	80 e6       	ldi	r24, 0x60	; 96
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    22d6:	20 e1       	ldi	r18, 0x10	; 16
    22d8:	37 e2       	ldi	r19, 0x27	; 39
    22da:	40 e9       	ldi	r20, 0x90	; 144
    22dc:	51 e0       	ldi	r21, 0x01	; 1
    22de:	ca 01       	movw	r24, r20
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <H_LCD_Void_LCDAccessDenied+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	21 50       	subi	r18, 0x01	; 1
    22e6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	d1 f7       	brne	.-12     	; 0x22de <H_LCD_Void_LCDAccessDenied+0x1c>
	_delay_ms(1000);
}
    22ea:	08 95       	ret

000022ec <H_LCD_Void_LCDUserCheck>:
{
	LCD_CallBack=Copy_Ptr;
}

void H_LCD_Void_LCDUserCheck(u8* Copy_U8_User)
{
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	ec 01       	movw	r28, r24
	if(Global_A_U8_Status==1 || Global_A_U8_Status==2)
    22f2:	80 91 5b 03 	lds	r24, 0x035B
    22f6:	81 50       	subi	r24, 0x01	; 1
    22f8:	82 30       	cpi	r24, 0x02	; 2
    22fa:	00 f5       	brcc	.+64     	; 0x233c <H_LCD_Void_LCDUserCheck+0x50>
	{
		H_LCD_Void_LCDClear();
    22fc:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
		H_LCD_Void_LCDGoTo(0,0);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString("Welcome ");
    2308:	8f e6       	ldi	r24, 0x6F	; 111
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDWriteString(Copy_U8_User);
    2310:	ce 01       	movw	r24, r28
    2312:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDGoTo(0,12);
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	6c e0       	ldi	r22, 0x0C	; 12
    231a:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString("    ");
    231e:	88 e7       	ldi	r24, 0x78	; 120
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    2326:	20 e3       	ldi	r18, 0x30	; 48
    2328:	35 e7       	ldi	r19, 0x75	; 117
    232a:	40 e9       	ldi	r20, 0x90	; 144
    232c:	51 e0       	ldi	r21, 0x01	; 1
    232e:	ca 01       	movw	r24, r20
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <H_LCD_Void_LCDUserCheck+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	21 50       	subi	r18, 0x01	; 1
    2336:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	d1 f7       	brne	.-12     	; 0x232e <H_LCD_Void_LCDUserCheck+0x42>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <H_LCD_Void_LCDUserCheck+0x78>
		_delay_ms(3000);
	}
	else
	{
		H_LCD_Void_LCDClear();
    233c:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
		H_LCD_Void_LCDGoTo(0,0);
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString("Wrong input ):");
    2348:	8d e7       	ldi	r24, 0x7D	; 125
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    2350:	20 e3       	ldi	r18, 0x30	; 48
    2352:	35 e7       	ldi	r19, 0x75	; 117
    2354:	40 e9       	ldi	r20, 0x90	; 144
    2356:	51 e0       	ldi	r21, 0x01	; 1
    2358:	ca 01       	movw	r24, r20
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <H_LCD_Void_LCDUserCheck+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	21 50       	subi	r18, 0x01	; 1
    2360:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	d1 f7       	brne	.-12     	; 0x2358 <H_LCD_Void_LCDUserCheck+0x6c>
		_delay_ms(3000);
	}
}
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	08 95       	ret

0000236a <H_LCD_Void_LCDWelcome>:
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
#endif
}

u8 H_LCD_Void_LCDWelcome(void)
{
    236a:	2f 92       	push	r2
    236c:	3f 92       	push	r3
    236e:	4f 92       	push	r4
    2370:	5f 92       	push	r5
    2372:	6f 92       	push	r6
    2374:	7f 92       	push	r7
    2376:	8f 92       	push	r8
    2378:	9f 92       	push	r9
    237a:	af 92       	push	r10
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
		u8 Local_U8_Read=0;
		H_LCD_Void_LCDClear();
		switch(Global_A_U8_Status)
		{
		case 0:
			H_LCD_Void_LCDWriteString("--)Smart Home(--");
    238e:	0f 2e       	mov	r0, r31
    2390:	fc e8       	ldi	r31, 0x8C	; 140
    2392:	6f 2e       	mov	r6, r31
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	7f 2e       	mov	r7, r31
    2398:	f0 2d       	mov	r31, r0
			break;
		case 1:
			H_LCD_Void_LCDWriteString("Smart Home(User)");
			break;
		case 2:
			H_LCD_Void_LCDWriteString("Smart Home(User)");
    239a:	0f 2e       	mov	r0, r31
    239c:	fd e9       	ldi	r31, 0x9D	; 157
    239e:	cf 2e       	mov	r12, r31
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	df 2e       	mov	r13, r31
    23a4:	f0 2d       	mov	r31, r0
			break;
		case 3:
			H_LCD_Void_LCDWriteString("Smart Home(Mina)");
    23a6:	0f 2e       	mov	r0, r31
    23a8:	fe ea       	ldi	r31, 0xAE	; 174
    23aa:	4f 2e       	mov	r4, r31
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	5f 2e       	mov	r5, r31
    23b0:	f0 2d       	mov	r31, r0
			break;
		}
		H_LCD_Void_LCDGoTo(1,0);
		H_LCD_Void_LCDWriteString("AvailableDevices");
    23b2:	cf eb       	ldi	r28, 0xBF	; 191
    23b4:	d0 e0       	ldi	r29, 0x00	; 0
			if(Local_U8_Read!=0)
				return Local_U8_Read;
		}
		H_LCD_Void_LCDClear();
		H_LCD_Void_LCDGoTo(0,0);
		H_LCD_Void_LCDWriteString("1- Lamps 1:5");
    23b6:	0f 2e       	mov	r0, r31
    23b8:	f0 ed       	ldi	r31, 0xD0	; 208
    23ba:	8f 2e       	mov	r8, r31
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	9f 2e       	mov	r9, r31
    23c0:	f0 2d       	mov	r31, r0
		H_LCD_Void_LCDGoTo(1,0);
		H_LCD_Void_LCDWriteString("2- AC 6");
    23c2:	0f 2e       	mov	r0, r31
    23c4:	fd ed       	ldi	r31, 0xDD	; 221
    23c6:	af 2e       	mov	r10, r31
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	bf 2e       	mov	r11, r31
    23cc:	f0 2d       	mov	r31, r0
		switch(Global_A_U8_Status)
		{
		case 0:
			H_LCD_Void_LCDGoTo(1,8);
			H_LCD_Void_LCDWriteString("3- Door");
    23ce:	0f 2e       	mov	r0, r31
    23d0:	f5 ee       	ldi	r31, 0xE5	; 229
    23d2:	2f 2e       	mov	r2, r31
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	3f 2e       	mov	r3, r31
    23d8:	f0 2d       	mov	r31, r0
{
	while(1)
	{
		u32 Local_U32_Counter=0;
		u8 Local_U8_Read=0;
		H_LCD_Void_LCDClear();
    23da:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
		switch(Global_A_U8_Status)
    23de:	80 91 5b 03 	lds	r24, 0x035B
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	59 f0       	breq	.+22     	; 0x23fc <H_LCD_Void_LCDWelcome+0x92>
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	28 f0       	brcs	.+10     	; 0x23f4 <H_LCD_Void_LCDWelcome+0x8a>
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	59 f0       	breq	.+22     	; 0x2404 <H_LCD_Void_LCDWelcome+0x9a>
    23ee:	83 30       	cpi	r24, 0x03	; 3
    23f0:	81 f4       	brne	.+32     	; 0x2412 <H_LCD_Void_LCDWelcome+0xa8>
    23f2:	0c c0       	rjmp	.+24     	; 0x240c <H_LCD_Void_LCDWelcome+0xa2>
		{
		case 0:
			H_LCD_Void_LCDWriteString("--)Smart Home(--");
    23f4:	c3 01       	movw	r24, r6
    23f6:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    23fa:	0b c0       	rjmp	.+22     	; 0x2412 <H_LCD_Void_LCDWelcome+0xa8>
			break;
		case 1:
			H_LCD_Void_LCDWriteString("Smart Home(User)");
    23fc:	c6 01       	movw	r24, r12
    23fe:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    2402:	07 c0       	rjmp	.+14     	; 0x2412 <H_LCD_Void_LCDWelcome+0xa8>
			break;
		case 2:
			H_LCD_Void_LCDWriteString("Smart Home(User)");
    2404:	c6 01       	movw	r24, r12
    2406:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    240a:	03 c0       	rjmp	.+6      	; 0x2412 <H_LCD_Void_LCDWelcome+0xa8>
			break;
		case 3:
			H_LCD_Void_LCDWriteString("Smart Home(Mina)");
    240c:	c2 01       	movw	r24, r4
    240e:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
			break;
		}
		H_LCD_Void_LCDGoTo(1,0);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString("AvailableDevices");
    241a:	ce 01       	movw	r24, r28
    241c:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
		Local_U32_Counter=Global_A_U32_Timer_s+5;
    2420:	80 91 57 03 	lds	r24, 0x0357
    2424:	90 91 58 03 	lds	r25, 0x0358
    2428:	a0 91 59 03 	lds	r26, 0x0359
    242c:	b0 91 5a 03 	lds	r27, 0x035A
    2430:	0f 2e       	mov	r0, r31
    2432:	f5 e0       	ldi	r31, 0x05	; 5
    2434:	ef 2e       	mov	r14, r31
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	ff 2e       	mov	r15, r31
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	0f 2f       	mov	r16, r31
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	1f 2f       	mov	r17, r31
    2442:	f0 2d       	mov	r31, r0
    2444:	e8 0e       	add	r14, r24
    2446:	f9 1e       	adc	r15, r25
    2448:	0a 1f       	adc	r16, r26
    244a:	1b 1f       	adc	r17, r27
    244c:	08 c0       	rjmp	.+16     	; 0x245e <H_LCD_Void_LCDWelcome+0xf4>
		while(Global_A_U32_Timer_s <=Local_U32_Counter)
		{
			Local_U8_Read=LCD_CallBack();
    244e:	e0 91 6c 03 	lds	r30, 0x036C
    2452:	f0 91 6d 03 	lds	r31, 0x036D
    2456:	09 95       	icall
			if(Local_U8_Read!=0)
    2458:	88 23       	and	r24, r24
    245a:	09 f0       	breq	.+2      	; 0x245e <H_LCD_Void_LCDWelcome+0xf4>
    245c:	a1 c0       	rjmp	.+322    	; 0x25a0 <H_LCD_Void_LCDWelcome+0x236>
			break;
		}
		H_LCD_Void_LCDGoTo(1,0);
		H_LCD_Void_LCDWriteString("AvailableDevices");
		Local_U32_Counter=Global_A_U32_Timer_s+5;
		while(Global_A_U32_Timer_s <=Local_U32_Counter)
    245e:	80 91 57 03 	lds	r24, 0x0357
    2462:	90 91 58 03 	lds	r25, 0x0358
    2466:	a0 91 59 03 	lds	r26, 0x0359
    246a:	b0 91 5a 03 	lds	r27, 0x035A
    246e:	e8 16       	cp	r14, r24
    2470:	f9 06       	cpc	r15, r25
    2472:	0a 07       	cpc	r16, r26
    2474:	1b 07       	cpc	r17, r27
    2476:	58 f7       	brcc	.-42     	; 0x244e <H_LCD_Void_LCDWelcome+0xe4>
		{
			Local_U8_Read=LCD_CallBack();
			if(Local_U8_Read!=0)
				return Local_U8_Read;
		}
		H_LCD_Void_LCDClear();
    2478:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
		H_LCD_Void_LCDGoTo(0,0);
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString("1- Lamps 1:5");
    2484:	c4 01       	movw	r24, r8
    2486:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
		H_LCD_Void_LCDGoTo(1,0);
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString("2- AC 6");
    2492:	c5 01       	movw	r24, r10
    2494:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
		switch(Global_A_U8_Status)
    2498:	80 91 5b 03 	lds	r24, 0x035B
    249c:	88 23       	and	r24, r24
    249e:	19 f0       	breq	.+6      	; 0x24a6 <H_LCD_Void_LCDWelcome+0x13c>
    24a0:	83 30       	cpi	r24, 0x03	; 3
    24a2:	81 f4       	brne	.+32     	; 0x24c4 <H_LCD_Void_LCDWelcome+0x15a>
    24a4:	08 c0       	rjmp	.+16     	; 0x24b6 <H_LCD_Void_LCDWelcome+0x14c>
		{
		case 0:
			H_LCD_Void_LCDGoTo(1,8);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	68 e0       	ldi	r22, 0x08	; 8
    24aa:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteString("3- Door");
    24ae:	c1 01       	movw	r24, r2
    24b0:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    24b4:	07 c0       	rjmp	.+14     	; 0x24c4 <H_LCD_Void_LCDWelcome+0x15a>
			break;
		case 3:
			H_LCD_Void_LCDGoTo(1,9);
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	69 e0       	ldi	r22, 0x09	; 9
    24ba:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteString("3- Door");
    24be:	c1 01       	movw	r24, r2
    24c0:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
			break;
		}
		Local_U32_Counter=Global_A_U32_Timer_s+5;
    24c4:	80 91 57 03 	lds	r24, 0x0357
    24c8:	90 91 58 03 	lds	r25, 0x0358
    24cc:	a0 91 59 03 	lds	r26, 0x0359
    24d0:	b0 91 5a 03 	lds	r27, 0x035A
    24d4:	0f 2e       	mov	r0, r31
    24d6:	f5 e0       	ldi	r31, 0x05	; 5
    24d8:	ef 2e       	mov	r14, r31
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	ff 2e       	mov	r15, r31
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	0f 2f       	mov	r16, r31
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	1f 2f       	mov	r17, r31
    24e6:	f0 2d       	mov	r31, r0
    24e8:	e8 0e       	add	r14, r24
    24ea:	f9 1e       	adc	r15, r25
    24ec:	0a 1f       	adc	r16, r26
    24ee:	1b 1f       	adc	r17, r27
    24f0:	08 c0       	rjmp	.+16     	; 0x2502 <H_LCD_Void_LCDWelcome+0x198>
		while(Global_A_U32_Timer_s <=Local_U32_Counter)
		{
			Local_U8_Read=LCD_CallBack();
    24f2:	e0 91 6c 03 	lds	r30, 0x036C
    24f6:	f0 91 6d 03 	lds	r31, 0x036D
    24fa:	09 95       	icall
			if(Local_U8_Read!=0)
    24fc:	88 23       	and	r24, r24
    24fe:	09 f0       	breq	.+2      	; 0x2502 <H_LCD_Void_LCDWelcome+0x198>
    2500:	4f c0       	rjmp	.+158    	; 0x25a0 <H_LCD_Void_LCDWelcome+0x236>
			H_LCD_Void_LCDGoTo(1,9);
			H_LCD_Void_LCDWriteString("3- Door");
			break;
		}
		Local_U32_Counter=Global_A_U32_Timer_s+5;
		while(Global_A_U32_Timer_s <=Local_U32_Counter)
    2502:	80 91 57 03 	lds	r24, 0x0357
    2506:	90 91 58 03 	lds	r25, 0x0358
    250a:	a0 91 59 03 	lds	r26, 0x0359
    250e:	b0 91 5a 03 	lds	r27, 0x035A
    2512:	e8 16       	cp	r14, r24
    2514:	f9 06       	cpc	r15, r25
    2516:	0a 07       	cpc	r16, r26
    2518:	1b 07       	cpc	r17, r27
    251a:	58 f7       	brcc	.-42     	; 0x24f2 <H_LCD_Void_LCDWelcome+0x188>
		{
			Local_U8_Read=LCD_CallBack();
			if(Local_U8_Read!=0)
				return Local_U8_Read;
		}
		switch(Global_A_U8_Status)
    251c:	80 91 5b 03 	lds	r24, 0x035B
    2520:	88 23       	and	r24, r24
    2522:	09 f0       	breq	.+2      	; 0x2526 <H_LCD_Void_LCDWelcome+0x1bc>
    2524:	5a cf       	rjmp	.-332    	; 0x23da <H_LCD_Void_LCDWelcome+0x70>
		{
		case 0:
			H_LCD_Void_LCDGoTo(0,0);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	60 e0       	ldi	r22, 0x00	; 0
    252a:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteString("To login, Please");
    252e:	8d ee       	ldi	r24, 0xED	; 237
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
			H_LCD_Void_LCDGoTo(1,0);
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteString("enter ur username");
    253e:	8e ef       	ldi	r24, 0xFE	; 254
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
			Local_U32_Counter=Global_A_U32_Timer_s+5;
    2546:	80 91 57 03 	lds	r24, 0x0357
    254a:	90 91 58 03 	lds	r25, 0x0358
    254e:	a0 91 59 03 	lds	r26, 0x0359
    2552:	b0 91 5a 03 	lds	r27, 0x035A
    2556:	0f 2e       	mov	r0, r31
    2558:	f5 e0       	ldi	r31, 0x05	; 5
    255a:	ef 2e       	mov	r14, r31
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	ff 2e       	mov	r15, r31
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	0f 2f       	mov	r16, r31
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	1f 2f       	mov	r17, r31
    2568:	f0 2d       	mov	r31, r0
    256a:	e8 0e       	add	r14, r24
    256c:	f9 1e       	adc	r15, r25
    256e:	0a 1f       	adc	r16, r26
    2570:	1b 1f       	adc	r17, r27
    2572:	07 c0       	rjmp	.+14     	; 0x2582 <H_LCD_Void_LCDWelcome+0x218>
			while(Global_A_U32_Timer_s <=Local_U32_Counter)
			{
				Local_U8_Read=LCD_CallBack();
    2574:	e0 91 6c 03 	lds	r30, 0x036C
    2578:	f0 91 6d 03 	lds	r31, 0x036D
    257c:	09 95       	icall
				if(Local_U8_Read!=0)
    257e:	88 23       	and	r24, r24
    2580:	79 f4       	brne	.+30     	; 0x25a0 <H_LCD_Void_LCDWelcome+0x236>
			H_LCD_Void_LCDGoTo(0,0);
			H_LCD_Void_LCDWriteString("To login, Please");
			H_LCD_Void_LCDGoTo(1,0);
			H_LCD_Void_LCDWriteString("enter ur username");
			Local_U32_Counter=Global_A_U32_Timer_s+5;
			while(Global_A_U32_Timer_s <=Local_U32_Counter)
    2582:	80 91 57 03 	lds	r24, 0x0357
    2586:	90 91 58 03 	lds	r25, 0x0358
    258a:	a0 91 59 03 	lds	r26, 0x0359
    258e:	b0 91 5a 03 	lds	r27, 0x035A
    2592:	e8 16       	cp	r14, r24
    2594:	f9 06       	cpc	r15, r25
    2596:	0a 07       	cpc	r16, r26
    2598:	1b 07       	cpc	r17, r27
    259a:	08 f4       	brcc	.+2      	; 0x259e <H_LCD_Void_LCDWelcome+0x234>
    259c:	1e cf       	rjmp	.-452    	; 0x23da <H_LCD_Void_LCDWelcome+0x70>
    259e:	ea cf       	rjmp	.-44     	; 0x2574 <H_LCD_Void_LCDWelcome+0x20a>
					return Local_U8_Read;
			}
			break;
		}
	}
}
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	ff 90       	pop	r15
    25aa:	ef 90       	pop	r14
    25ac:	df 90       	pop	r13
    25ae:	cf 90       	pop	r12
    25b0:	bf 90       	pop	r11
    25b2:	af 90       	pop	r10
    25b4:	9f 90       	pop	r9
    25b6:	8f 90       	pop	r8
    25b8:	7f 90       	pop	r7
    25ba:	6f 90       	pop	r6
    25bc:	5f 90       	pop	r5
    25be:	4f 90       	pop	r4
    25c0:	3f 90       	pop	r3
    25c2:	2f 90       	pop	r2
    25c4:	08 95       	ret

000025c6 <H_LCD_Void_LCDInit>:
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
	H_LCD_Void_LCDWriteCommand(LCD_8_BIT_MODE);
	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    25c6:	8e e0       	ldi	r24, 0x0E	; 14
    25c8:	61 e0       	ldi	r22, 0x01	; 1
    25ca:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    25ce:	8f e0       	ldi	r24, 0x0F	; 15
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    25d6:	80 e1       	ldi	r24, 0x10	; 16
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    25de:	81 e1       	ldi	r24, 0x11	; 17
    25e0:	61 e0       	ldi	r22, 0x01	; 1
    25e2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    25e6:	85 e1       	ldi	r24, 0x15	; 21
    25e8:	61 e0       	ldi	r22, 0x01	; 1
    25ea:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    25ee:	87 e1       	ldi	r24, 0x17	; 23
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    25f6:	86 e1       	ldi	r24, 0x16	; 22
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    25fe:	86 e1       	ldi	r24, 0x16	; 22
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
    2606:	83 e3       	ldi	r24, 0x33	; 51
    2608:	0e 94 5f 10 	call	0x20be	; 0x20be <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
    260c:	82 e3       	ldi	r24, 0x32	; 50
    260e:	0e 94 5f 10 	call	0x20be	; 0x20be <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
    2612:	88 e2       	ldi	r24, 0x28	; 40
    2614:	0e 94 5f 10 	call	0x20be	; 0x20be <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    2618:	8c e0       	ldi	r24, 0x0C	; 12
    261a:	0e 94 5f 10 	call	0x20be	; 0x20be <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	0e 94 5f 10 	call	0x20be	; 0x20be <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	0e 94 5f 10 	call	0x20be	; 0x20be <H_LCD_Void_LCDWriteCommand>
#endif

}
    262a:	08 95       	ret

0000262c <H_KeyPad_Void_SetCallBack>:
	return Local_U8_ArrUser;
}

void H_KeyPad_Void_SetCallBack(void(*Copy_Ptr)(u8,u8,u8*))
{
	KeyPad_CallBack=Copy_Ptr;
    262c:	90 93 6f 03 	sts	0x036F, r25
    2630:	80 93 6e 03 	sts	0x036E, r24
}
    2634:	08 95       	ret

00002636 <H_KeyPad_U8_KeyPadRead>:
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
}
u8   H_KeyPad_U8_KeyPadRead(void)
{
    2636:	6f 92       	push	r6
    2638:	7f 92       	push	r7
    263a:	8f 92       	push	r8
    263c:	9f 92       	push	r9
    263e:	af 92       	push	r10
    2640:	bf 92       	push	r11
    2642:	cf 92       	push	r12
    2644:	df 92       	push	r13
    2646:	ef 92       	push	r14
    2648:	ff 92       	push	r15
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	60 97       	sbiw	r28, 0x10	; 16
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_Arr [4][4] = { { '1' , '2' , '3' , 'A' },
			{ '4' , '5' , '6' , 'B' },
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }};
    2662:	de 01       	movw	r26, r28
    2664:	11 96       	adiw	r26, 0x01	; 1
    2666:	e9 e2       	ldi	r30, 0x29	; 41
    2668:	f3 e0       	ldi	r31, 0x03	; 3
    266a:	80 e1       	ldi	r24, 0x10	; 16
    266c:	01 90       	ld	r0, Z+
    266e:	0d 92       	st	X+, r0
    2670:	81 50       	subi	r24, 0x01	; 1
    2672:	e1 f7       	brne	.-8      	; 0x266c <H_KeyPad_U8_KeyPadRead+0x36>
    2674:	99 24       	eor	r9, r9
    2676:	cc 24       	eor	r12, r12
    2678:	dd 24       	eor	r13, r13
	u8 Local_U8_Reading = 0;
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
    267a:	0f 2e       	mov	r0, r31
    267c:	f8 e1       	ldi	r31, 0x18	; 24
    267e:	8f 2e       	mov	r8, r31
    2680:	f0 2d       	mov	r31, r0
    2682:	00 e9       	ldi	r16, 0x90	; 144
    2684:	11 e0       	ldi	r17, 0x01	; 1
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
		{
			if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    2686:	80 eb       	ldi	r24, 0xB0	; 176
    2688:	94 e0       	ldi	r25, 0x04	; 4
    268a:	b8 2e       	mov	r11, r24
    268c:	a9 2e       	mov	r10, r25
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
				{
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
    268e:	3e 01       	movw	r6, r28
    2690:	08 94       	sec
    2692:	61 1c       	adc	r6, r1
    2694:	71 1c       	adc	r7, r1
u8   H_KeyPad_U8_KeyPadRead(void)
{
	u8 Local_U8_Arr [4][4] = { { '1' , '2' , '3' , 'A' },
			{ '4' , '5' , '6' , 'B' },
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }};
    2696:	0f 2e       	mov	r0, r31
    2698:	f1 e2       	ldi	r31, 0x21	; 33
    269a:	ef 2e       	mov	r14, r31
    269c:	f0 2d       	mov	r31, r0
    269e:	ec 0c       	add	r14, r12
	u8 Local_U8_Reading = 0;
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
    26a0:	8e 2d       	mov	r24, r14
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    26a8:	f8 2c       	mov	r15, r8
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
		{
			if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    26aa:	8f 2d       	mov	r24, r15
    26ac:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    26b0:	88 23       	and	r24, r24
    26b2:	c9 f4       	brne	.+50     	; 0x26e6 <H_KeyPad_U8_KeyPadRead+0xb0>
    26b4:	8b 2d       	mov	r24, r11
    26b6:	9a 2d       	mov	r25, r10
    26b8:	f8 01       	movw	r30, r16
    26ba:	31 97       	sbiw	r30, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <H_KeyPad_U8_KeyPadRead+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	d9 f7       	brne	.-10     	; 0x26b8 <H_KeyPad_U8_KeyPadRead+0x82>
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(Local_U8_Col) == KEYPAD_PRESSED)
    26c2:	8f 2d       	mov	r24, r15
    26c4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <M_DIO_U8_GetPinValue>
    26c8:	88 23       	and	r24, r24
    26ca:	69 f4       	brne	.+26     	; 0x26e6 <H_KeyPad_U8_KeyPadRead+0xb0>
				{
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
    26cc:	c6 01       	movw	r24, r12
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	f3 01       	movw	r30, r6
    26d8:	e8 0f       	add	r30, r24
    26da:	f9 1f       	adc	r31, r25
    26dc:	ef 0d       	add	r30, r15
    26de:	f1 1d       	adc	r31, r1
    26e0:	78 97       	sbiw	r30, 0x18	; 24
    26e2:	90 80       	ld	r9, Z
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <H_KeyPad_U8_KeyPadRead+0xb8>
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
    26e6:	f3 94       	inc	r15
    26e8:	8c e1       	ldi	r24, 0x1C	; 28
    26ea:	f8 16       	cp	r15, r24
    26ec:	f1 f6       	brne	.-68     	; 0x26aa <H_KeyPad_U8_KeyPadRead+0x74>
					Local_U8_Reading = Local_U8_Arr[Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
					break;
				}
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
    26ee:	8e 2d       	mov	r24, r14
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    26f6:	08 94       	sec
    26f8:	c1 1c       	adc	r12, r1
    26fa:	d1 1c       	adc	r13, r1
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }};
	u8 Local_U8_Reading = 0;
	u8 Local_U8_Row = 0;
	u8 Local_U8_Col = 0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
    26fc:	84 e0       	ldi	r24, 0x04	; 4
    26fe:	c8 16       	cp	r12, r24
    2700:	d1 04       	cpc	r13, r1
    2702:	49 f6       	brne	.-110    	; 0x2696 <H_KeyPad_U8_KeyPadRead+0x60>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
	}
	return Local_U8_Reading;
}
    2704:	89 2d       	mov	r24, r9
    2706:	60 96       	adiw	r28, 0x10	; 16
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	1f 91       	pop	r17
    2718:	0f 91       	pop	r16
    271a:	ff 90       	pop	r15
    271c:	ef 90       	pop	r14
    271e:	df 90       	pop	r13
    2720:	cf 90       	pop	r12
    2722:	bf 90       	pop	r11
    2724:	af 90       	pop	r10
    2726:	9f 90       	pop	r9
    2728:	8f 90       	pop	r8
    272a:	7f 90       	pop	r7
    272c:	6f 90       	pop	r6
    272e:	08 95       	ret

00002730 <H_KeyPad_U8_KeyPadGetUser>:

u8 *H_KeyPad_U8_KeyPadGetUser(u8 Local_U8_FirstElement)
{
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
	static u8 Local_U8_ArrUser[8];
	Local_U8_ArrUser[0]=0;
	Local_U8_ArrUser[1]=0;
    2738:	08 e4       	ldi	r16, 0x48	; 72
    273a:	13 e0       	ldi	r17, 0x03	; 3
    273c:	f8 01       	movw	r30, r16
    273e:	11 92       	st	Z+, r1
	Local_U8_ArrUser[2]=0;
    2740:	10 82       	st	Z, r1
	Local_U8_ArrUser[3]=0;
    2742:	f8 01       	movw	r30, r16
    2744:	12 82       	std	Z+2, r1	; 0x02
	Local_U8_ArrUser[4]=0;
    2746:	13 82       	std	Z+3, r1	; 0x03
	Local_U8_ArrUser[5]=0;
    2748:	14 82       	std	Z+4, r1	; 0x04
	Local_U8_ArrUser[6]=0;
    274a:	15 82       	std	Z+5, r1	; 0x05
	Local_U8_ArrUser[7]=0;
    274c:	16 82       	std	Z+6, r1	; 0x06
	Local_U8_ArrUser[0]=Local_U8_FirstElement;
    274e:	82 93       	st	-Z, r24
    2750:	8f 01       	movw	r16, r30
	KeyPad_CallBack(0,0,"UserName:");
    2752:	e0 91 6e 03 	lds	r30, 0x036E
    2756:	f0 91 6f 03 	lds	r31, 0x036F
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	40 e1       	ldi	r20, 0x10	; 16
    2760:	51 e0       	ldi	r21, 0x01	; 1
    2762:	09 95       	icall
	KeyPad_CallBack(0,9,Local_U8_ArrUser);
    2764:	e0 91 6e 03 	lds	r30, 0x036E
    2768:	f0 91 6f 03 	lds	r31, 0x036F
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	69 e0       	ldi	r22, 0x09	; 9
    2770:	a8 01       	movw	r20, r16
    2772:	09 95       	icall
    2774:	20 e1       	ldi	r18, 0x10	; 16
    2776:	37 e2       	ldi	r19, 0x27	; 39
    2778:	40 e9       	ldi	r20, 0x90	; 144
    277a:	51 e0       	ldi	r21, 0x01	; 1
    277c:	ca 01       	movw	r24, r20
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <H_KeyPad_U8_KeyPadGetUser+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	21 50       	subi	r18, 0x01	; 1
    2784:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	d1 f7       	brne	.-12     	; 0x277c <H_KeyPad_U8_KeyPadGetUser+0x4c>
	_delay_ms(1000);
	while(1)
	{
		Local_U8_ArrUser[1]=H_KeyPad_U8_KeyPadRead();
    2788:	c8 e4       	ldi	r28, 0x48	; 72
    278a:	d3 e0       	ldi	r29, 0x03	; 3
    278c:	0e 94 1b 13 	call	0x2636	; 0x2636 <H_KeyPad_U8_KeyPadRead>
    2790:	88 83       	st	Y, r24
		if(Local_U8_ArrUser[1]!=0)
    2792:	88 23       	and	r24, r24
    2794:	d9 f3       	breq	.-10     	; 0x278c <H_KeyPad_U8_KeyPadGetUser+0x5c>
			break;
	}
	KeyPad_CallBack(0,10,Local_U8_ArrUser+1);
    2796:	e0 91 6e 03 	lds	r30, 0x036E
    279a:	f0 91 6f 03 	lds	r31, 0x036F
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	6a e0       	ldi	r22, 0x0A	; 10
    27a2:	48 e4       	ldi	r20, 0x48	; 72
    27a4:	53 e0       	ldi	r21, 0x03	; 3
    27a6:	09 95       	icall
    27a8:	28 e8       	ldi	r18, 0x88	; 136
    27aa:	33 e1       	ldi	r19, 0x13	; 19
    27ac:	40 e9       	ldi	r20, 0x90	; 144
    27ae:	51 e0       	ldi	r21, 0x01	; 1
    27b0:	ca 01       	movw	r24, r20
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <H_KeyPad_U8_KeyPadGetUser+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b6:	21 50       	subi	r18, 0x01	; 1
    27b8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	d1 f7       	brne	.-12     	; 0x27b0 <H_KeyPad_U8_KeyPadGetUser+0x80>
	_delay_ms(500);
	while(1)
	{
		Local_U8_ArrUser[2]=H_KeyPad_U8_KeyPadRead();
    27bc:	c9 e4       	ldi	r28, 0x49	; 73
    27be:	d3 e0       	ldi	r29, 0x03	; 3
    27c0:	0e 94 1b 13 	call	0x2636	; 0x2636 <H_KeyPad_U8_KeyPadRead>
    27c4:	88 83       	st	Y, r24
		if(Local_U8_ArrUser[2]!=0)
    27c6:	88 23       	and	r24, r24
    27c8:	d9 f3       	breq	.-10     	; 0x27c0 <H_KeyPad_U8_KeyPadGetUser+0x90>
			break;
	}
	KeyPad_CallBack(0,11,Local_U8_ArrUser+2);
    27ca:	e0 91 6e 03 	lds	r30, 0x036E
    27ce:	f0 91 6f 03 	lds	r31, 0x036F
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	6b e0       	ldi	r22, 0x0B	; 11
    27d6:	49 e4       	ldi	r20, 0x49	; 73
    27d8:	53 e0       	ldi	r21, 0x03	; 3
    27da:	09 95       	icall
    27dc:	28 e8       	ldi	r18, 0x88	; 136
    27de:	33 e1       	ldi	r19, 0x13	; 19
    27e0:	40 e9       	ldi	r20, 0x90	; 144
    27e2:	51 e0       	ldi	r21, 0x01	; 1
    27e4:	ca 01       	movw	r24, r20
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <H_KeyPad_U8_KeyPadGetUser+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	21 50       	subi	r18, 0x01	; 1
    27ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	d1 f7       	brne	.-12     	; 0x27e4 <H_KeyPad_U8_KeyPadGetUser+0xb4>
	_delay_ms(500);
	while(1)
	{
		Local_U8_ArrUser[3]=H_KeyPad_U8_KeyPadRead();
    27f0:	ca e4       	ldi	r28, 0x4A	; 74
    27f2:	d3 e0       	ldi	r29, 0x03	; 3
    27f4:	0e 94 1b 13 	call	0x2636	; 0x2636 <H_KeyPad_U8_KeyPadRead>
    27f8:	88 83       	st	Y, r24
		if(Local_U8_ArrUser[3]!=0)
    27fa:	88 23       	and	r24, r24
    27fc:	d9 f3       	breq	.-10     	; 0x27f4 <H_KeyPad_U8_KeyPadGetUser+0xc4>
			break;
	}
	KeyPad_CallBack(0,12,Local_U8_ArrUser+3);
    27fe:	e0 91 6e 03 	lds	r30, 0x036E
    2802:	f0 91 6f 03 	lds	r31, 0x036F
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	6c e0       	ldi	r22, 0x0C	; 12
    280a:	4a e4       	ldi	r20, 0x4A	; 74
    280c:	53 e0       	ldi	r21, 0x03	; 3
    280e:	09 95       	icall
    2810:	28 e8       	ldi	r18, 0x88	; 136
    2812:	33 e1       	ldi	r19, 0x13	; 19
    2814:	40 e9       	ldi	r20, 0x90	; 144
    2816:	51 e0       	ldi	r21, 0x01	; 1
    2818:	ca 01       	movw	r24, r20
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <H_KeyPad_U8_KeyPadGetUser+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281e:	21 50       	subi	r18, 0x01	; 1
    2820:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2822:	d1 f7       	brne	.-12     	; 0x2818 <H_KeyPad_U8_KeyPadGetUser+0xe8>
	_delay_ms(500);
	KeyPad_CallBack(1,0,"Password: ");
    2824:	e0 91 6e 03 	lds	r30, 0x036E
    2828:	f0 91 6f 03 	lds	r31, 0x036F
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	4a e1       	ldi	r20, 0x1A	; 26
    2832:	51 e0       	ldi	r21, 0x01	; 1
    2834:	09 95       	icall
	while(1)
	{
		Local_U8_ArrUser[4]=H_KeyPad_U8_KeyPadRead();
    2836:	cb e4       	ldi	r28, 0x4B	; 75
    2838:	d3 e0       	ldi	r29, 0x03	; 3
    283a:	0e 94 1b 13 	call	0x2636	; 0x2636 <H_KeyPad_U8_KeyPadRead>
    283e:	88 83       	st	Y, r24
		if(Local_U8_ArrUser[4]!=0)
    2840:	88 23       	and	r24, r24
    2842:	d9 f3       	breq	.-10     	; 0x283a <H_KeyPad_U8_KeyPadGetUser+0x10a>
			break;
	}
	KeyPad_CallBack(1,9,Local_U8_ArrUser+4);
    2844:	e0 91 6e 03 	lds	r30, 0x036E
    2848:	f0 91 6f 03 	lds	r31, 0x036F
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	69 e0       	ldi	r22, 0x09	; 9
    2850:	4b e4       	ldi	r20, 0x4B	; 75
    2852:	53 e0       	ldi	r21, 0x03	; 3
    2854:	09 95       	icall
    2856:	28 e8       	ldi	r18, 0x88	; 136
    2858:	33 e1       	ldi	r19, 0x13	; 19
    285a:	40 e9       	ldi	r20, 0x90	; 144
    285c:	51 e0       	ldi	r21, 0x01	; 1
    285e:	ca 01       	movw	r24, r20
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <H_KeyPad_U8_KeyPadGetUser+0x130>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	21 50       	subi	r18, 0x01	; 1
    2866:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	d1 f7       	brne	.-12     	; 0x285e <H_KeyPad_U8_KeyPadGetUser+0x12e>
	_delay_ms(500);
	while(1)
	{
		Local_U8_ArrUser[5]=H_KeyPad_U8_KeyPadRead();
    286a:	cc e4       	ldi	r28, 0x4C	; 76
    286c:	d3 e0       	ldi	r29, 0x03	; 3
    286e:	0e 94 1b 13 	call	0x2636	; 0x2636 <H_KeyPad_U8_KeyPadRead>
    2872:	88 83       	st	Y, r24
		if(Local_U8_ArrUser[5]!=0)
    2874:	88 23       	and	r24, r24
    2876:	d9 f3       	breq	.-10     	; 0x286e <H_KeyPad_U8_KeyPadGetUser+0x13e>
			break;
	}
	KeyPad_CallBack(1,10,Local_U8_ArrUser+5);
    2878:	e0 91 6e 03 	lds	r30, 0x036E
    287c:	f0 91 6f 03 	lds	r31, 0x036F
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	6a e0       	ldi	r22, 0x0A	; 10
    2884:	4c e4       	ldi	r20, 0x4C	; 76
    2886:	53 e0       	ldi	r21, 0x03	; 3
    2888:	09 95       	icall
    288a:	28 e8       	ldi	r18, 0x88	; 136
    288c:	33 e1       	ldi	r19, 0x13	; 19
    288e:	40 e9       	ldi	r20, 0x90	; 144
    2890:	51 e0       	ldi	r21, 0x01	; 1
    2892:	ca 01       	movw	r24, r20
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <H_KeyPad_U8_KeyPadGetUser+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	21 50       	subi	r18, 0x01	; 1
    289a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289c:	d1 f7       	brne	.-12     	; 0x2892 <H_KeyPad_U8_KeyPadGetUser+0x162>
	_delay_ms(500);
	while(1)
	{
		Local_U8_ArrUser[6]=H_KeyPad_U8_KeyPadRead();
    289e:	cd e4       	ldi	r28, 0x4D	; 77
    28a0:	d3 e0       	ldi	r29, 0x03	; 3
    28a2:	0e 94 1b 13 	call	0x2636	; 0x2636 <H_KeyPad_U8_KeyPadRead>
    28a6:	88 83       	st	Y, r24
		if(Local_U8_ArrUser[6]!=0)
    28a8:	88 23       	and	r24, r24
    28aa:	d9 f3       	breq	.-10     	; 0x28a2 <H_KeyPad_U8_KeyPadGetUser+0x172>
			break;
	}
	KeyPad_CallBack(1,11,Local_U8_ArrUser+6);
    28ac:	e0 91 6e 03 	lds	r30, 0x036E
    28b0:	f0 91 6f 03 	lds	r31, 0x036F
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	6b e0       	ldi	r22, 0x0B	; 11
    28b8:	4d e4       	ldi	r20, 0x4D	; 77
    28ba:	53 e0       	ldi	r21, 0x03	; 3
    28bc:	09 95       	icall
    28be:	28 e8       	ldi	r18, 0x88	; 136
    28c0:	33 e1       	ldi	r19, 0x13	; 19
    28c2:	40 e9       	ldi	r20, 0x90	; 144
    28c4:	51 e0       	ldi	r21, 0x01	; 1
    28c6:	ca 01       	movw	r24, r20
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <H_KeyPad_U8_KeyPadGetUser+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	21 50       	subi	r18, 0x01	; 1
    28ce:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d0:	d1 f7       	brne	.-12     	; 0x28c6 <H_KeyPad_U8_KeyPadGetUser+0x196>
	_delay_ms(500);
	while(1)
	{
		Local_U8_ArrUser[7]=H_KeyPad_U8_KeyPadRead();
    28d2:	ce e4       	ldi	r28, 0x4E	; 78
    28d4:	d3 e0       	ldi	r29, 0x03	; 3
    28d6:	0e 94 1b 13 	call	0x2636	; 0x2636 <H_KeyPad_U8_KeyPadRead>
    28da:	88 83       	st	Y, r24
		if(Local_U8_ArrUser[7]!=0)
    28dc:	88 23       	and	r24, r24
    28de:	d9 f3       	breq	.-10     	; 0x28d6 <H_KeyPad_U8_KeyPadGetUser+0x1a6>
			break;
	}
	KeyPad_CallBack(1,12,Local_U8_ArrUser+7);
    28e0:	e0 91 6e 03 	lds	r30, 0x036E
    28e4:	f0 91 6f 03 	lds	r31, 0x036F
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	6c e0       	ldi	r22, 0x0C	; 12
    28ec:	4e e4       	ldi	r20, 0x4E	; 78
    28ee:	53 e0       	ldi	r21, 0x03	; 3
    28f0:	09 95       	icall
    28f2:	28 e8       	ldi	r18, 0x88	; 136
    28f4:	33 e1       	ldi	r19, 0x13	; 19
    28f6:	40 e9       	ldi	r20, 0x90	; 144
    28f8:	51 e0       	ldi	r21, 0x01	; 1
    28fa:	ca 01       	movw	r24, r20
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <H_KeyPad_U8_KeyPadGetUser+0x1cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	21 50       	subi	r18, 0x01	; 1
    2902:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	d1 f7       	brne	.-12     	; 0x28fa <H_KeyPad_U8_KeyPadGetUser+0x1ca>
	_delay_ms(500);
	return Local_U8_ArrUser;
}
    2906:	87 e4       	ldi	r24, 0x47	; 71
    2908:	93 e0       	ldi	r25, 0x03	; 3
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	08 95       	ret

00002914 <H_KeyPad_Void_KeyPadInit>:

void (*KeyPad_CallBack) (u8,u8,u8*);

void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    2914:	81 e2       	ldi	r24, 0x21	; 33
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    291c:	82 e2       	ldi	r24, 0x22	; 34
    291e:	61 e0       	ldi	r22, 0x01	; 1
    2920:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    2924:	83 e2       	ldi	r24, 0x23	; 35
    2926:	61 e0       	ldi	r22, 0x01	; 1
    2928:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    292c:	84 e2       	ldi	r24, 0x24	; 36
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    2934:	88 e1       	ldi	r24, 0x18	; 24
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    293c:	89 e1       	ldi	r24, 0x19	; 25
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    2944:	8a e1       	ldi	r24, 0x1A	; 26
    2946:	60 e0       	ldi	r22, 0x00	; 0
    2948:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    294c:	8b e1       	ldi	r24, 0x1B	; 27
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	// to activate internal pull up res
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C0_PIN,ENABLE);
    2954:	88 e1       	ldi	r24, 0x18	; 24
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	0e 94 8f 0c 	call	0x191e	; 0x191e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C1_PIN,ENABLE);
    295c:	89 e1       	ldi	r24, 0x19	; 25
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	0e 94 8f 0c 	call	0x191e	; 0x191e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C2_PIN,ENABLE);
    2964:	8a e1       	ldi	r24, 0x1A	; 26
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	0e 94 8f 0c 	call	0x191e	; 0x191e <M_DIO_Void_SetPinPullUpRes>
	M_DIO_Void_SetPinPullUpRes(KEYPAD_C3_PIN,ENABLE);
    296c:	8b e1       	ldi	r24, 0x1B	; 27
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	0e 94 8f 0c 	call	0x191e	; 0x191e <M_DIO_Void_SetPinPullUpRes>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    2974:	81 e2       	ldi	r24, 0x21	; 33
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    297c:	82 e2       	ldi	r24, 0x22	; 34
    297e:	61 e0       	ldi	r22, 0x01	; 1
    2980:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    2984:	83 e2       	ldi	r24, 0x23	; 35
    2986:	61 e0       	ldi	r22, 0x01	; 1
    2988:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    298c:	84 e2       	ldi	r24, 0x24	; 36
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
}
    2994:	08 95       	ret

00002996 <H_DCMotor_Void_ACMotorStop>:
{
	M_DIO_Void_SetPinValue(PD4_PIN,HIGH);
}
void H_DCMotor_Void_ACMotorStop(void)
{
	M_DIO_Void_SetPinValue(PD4_PIN,LOW);
    2996:	8c e2       	ldi	r24, 0x2C	; 44
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
}
    299e:	08 95       	ret

000029a0 <H_DCMotor_Void_ACMotorStart>:
{
	M_DIO_Void_SetPinDirection(PD4_PIN,OUTPUT);
}
void H_DCMotor_Void_ACMotorStart(void)
{
	M_DIO_Void_SetPinValue(PD4_PIN,HIGH);
    29a0:	8c e2       	ldi	r24, 0x2C	; 44
    29a2:	61 e0       	ldi	r22, 0x01	; 1
    29a4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
}
    29a8:	08 95       	ret

000029aa <H_DCMotor_Void_DCMotorSetDirection>:
{
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Copy_U32_MotorSpeed);
}
void H_DCMotor_Void_DCMotorSetDirection(u8 Copy_U8_Direction)
{
switch(Copy_U8_Direction)
    29aa:	88 23       	and	r24, r24
    29ac:	19 f0       	breq	.+6      	; 0x29b4 <H_DCMotor_Void_DCMotorSetDirection+0xa>
    29ae:	81 30       	cpi	r24, 0x01	; 1
    29b0:	91 f4       	brne	.+36     	; 0x29d6 <H_DCMotor_Void_DCMotorSetDirection+0x2c>
    29b2:	09 c0       	rjmp	.+18     	; 0x29c6 <H_DCMotor_Void_DCMotorSetDirection+0x1c>
{
case ACW:
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,LOW);
    29b4:	83 e2       	ldi	r24, 0x23	; 35
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,HIGH);
    29bc:	84 e2       	ldi	r24, 0x24	; 36
    29be:	61 e0       	ldi	r22, 0x01	; 1
    29c0:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    29c4:	08 95       	ret
	break;
case CW:
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,HIGH);
    29c6:	83 e2       	ldi	r24, 0x23	; 35
    29c8:	61 e0       	ldi	r22, 0x01	; 1
    29ca:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,LOW);
    29ce:	84 e2       	ldi	r24, 0x24	; 36
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    29d6:	08 95       	ret

000029d8 <H_DCMotor_Void_ACMotorInit>:
	M_Timer_Void_PWMStop(TIMER1_CHANNEL);
}

void H_DCMotor_Void_ACMotorInit(void)
{
	M_DIO_Void_SetPinDirection(PD4_PIN,OUTPUT);
    29d8:	8c e2       	ldi	r24, 0x2C	; 44
    29da:	61 e0       	ldi	r22, 0x01	; 1
    29dc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
}
    29e0:	08 95       	ret

000029e2 <H_DCMotor_Void_DCMotorStop>:
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);

}
void H_DCMotor_Void_DCMotorStop(void)
{
	M_Timer_Void_PWMStop(TIMER1_CHANNEL);
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <M_Timer_Void_PWMStop>
}
    29e8:	08 95       	ret

000029ea <H_DCMotor_Void_DCMotorStart>:
	break;
}
}
void H_DCMotor_Void_DCMotorStart(void)
{
	M_Timer_Void_PWMStart(TIMER1_CHANNEL);
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	0e 94 ed 08 	call	0x11da	; 0x11da <M_Timer_Void_PWMStart>

}
    29f0:	08 95       	ret

000029f2 <H_DCMotor_Void_DCMotorSetSpeed>:
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN2,OUTPUT);
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
}
void H_DCMotor_Void_DCMotorSetSpeed(u32 Copy_U32_MotorSpeed)
{
	M_Timer_Void_PWMSetDutyCycle(TIMER1_CHANNEL,Copy_U32_MotorSpeed);
    29f2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    29f6:	ab 01       	movw	r20, r22
    29f8:	bc 01       	movw	r22, r24
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	0e 94 77 08 	call	0x10ee	; 0x10ee <M_Timer_Void_PWMSetDutyCycle>
}
    2a00:	08 95       	ret

00002a02 <H_DCMotor_Void_DCMotorInit>:

#include "DCMotor_Interface.h"

void H_DCMotor_Void_DCMotorInit(void)
{
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN1,OUTPUT);
    2a02:	83 e2       	ldi	r24, 0x23	; 35
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN2,OUTPUT);
    2a0a:	84 e2       	ldi	r24, 0x24	; 36
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Timer_Void_PWMInit>
}
    2a18:	08 95       	ret

00002a1a <H_Buzzer_Void_BuzzerOnce>:
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
}
void H_Buzzer_Void_BuzzerOnce(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2a1a:	8d e0       	ldi	r24, 0x0D	; 13
    2a1c:	61 e0       	ldi	r22, 0x01	; 1
    2a1e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
    2a22:	28 e5       	ldi	r18, 0x58	; 88
    2a24:	32 e0       	ldi	r19, 0x02	; 2
    2a26:	40 e9       	ldi	r20, 0x90	; 144
    2a28:	51 e0       	ldi	r21, 0x01	; 1
    2a2a:	ca 01       	movw	r24, r20
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <H_Buzzer_Void_BuzzerOnce+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	21 50       	subi	r18, 0x01	; 1
    2a32:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a34:	d1 f7       	brne	.-12     	; 0x2a2a <H_Buzzer_Void_BuzzerOnce+0x10>
	_delay_ms(BUZZER_TIME_ON);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    2a36:	8d e0       	ldi	r24, 0x0D	; 13
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
}
    2a3e:	08 95       	ret

00002a40 <H_Buzzer_Void_BuzzerSetOff>:
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
}
void H_Buzzer_Void_BuzzerSetOff(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    2a40:	8d e0       	ldi	r24, 0x0D	; 13
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
}
    2a48:	08 95       	ret

00002a4a <H_Buzzer_Void_BuzzerSetOn>:
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
}
void H_Buzzer_Void_BuzzerSetOn(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
    2a4a:	8d e0       	ldi	r24, 0x0D	; 13
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <M_DIO_Void_SetPinValue>
}
    2a52:	08 95       	ret

00002a54 <H_Buzzer_Void_BuzzerAlarm>:
	_delay_ms(BUZZER_TIME_ON);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
}

void H_Buzzer_Void_BuzzerAlarm(void)
{
    2a54:	cf 92       	push	r12
    2a56:	df 92       	push	r13
    2a58:	ef 92       	push	r14
    2a5a:	ff 92       	push	r15
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
	while(1)
	{
		H_Buzzer_Void_BuzzerSetOn();
    2a64:	0f 2e       	mov	r0, r31
    2a66:	f0 e3       	ldi	r31, 0x30	; 48
    2a68:	ef 2e       	mov	r14, r31
    2a6a:	f5 e7       	ldi	r31, 0x75	; 117
    2a6c:	ff 2e       	mov	r15, r31
    2a6e:	f0 2d       	mov	r31, r0
    2a70:	c0 e9       	ldi	r28, 0x90	; 144
    2a72:	d1 e0       	ldi	r29, 0x01	; 1
		_delay_ms(3000);
		H_Buzzer_Void_BuzzerSetOff();
    2a74:	00 e1       	ldi	r16, 0x10	; 16
    2a76:	17 e2       	ldi	r17, 0x27	; 39
		_delay_ms(1000);
		H_Buzzer_Void_BuzzerSetOn();
    2a78:	0f 2e       	mov	r0, r31
    2a7a:	f0 e2       	ldi	r31, 0x20	; 32
    2a7c:	cf 2e       	mov	r12, r31
    2a7e:	fe e4       	ldi	r31, 0x4E	; 78
    2a80:	df 2e       	mov	r13, r31
    2a82:	f0 2d       	mov	r31, r0

void H_Buzzer_Void_BuzzerAlarm(void)
{
	while(1)
	{
		H_Buzzer_Void_BuzzerSetOn();
    2a84:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <H_Buzzer_Void_BuzzerSetOn>
    2a88:	97 01       	movw	r18, r14
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <H_Buzzer_Void_BuzzerAlarm+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a90:	21 50       	subi	r18, 0x01	; 1
    2a92:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a94:	d1 f7       	brne	.-12     	; 0x2a8a <H_Buzzer_Void_BuzzerAlarm+0x36>
		_delay_ms(3000);
		H_Buzzer_Void_BuzzerSetOff();
    2a96:	0e 94 20 15 	call	0x2a40	; 0x2a40 <H_Buzzer_Void_BuzzerSetOff>
    2a9a:	98 01       	movw	r18, r16
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <H_Buzzer_Void_BuzzerAlarm+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	21 50       	subi	r18, 0x01	; 1
    2aa4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa6:	d1 f7       	brne	.-12     	; 0x2a9c <H_Buzzer_Void_BuzzerAlarm+0x48>
		_delay_ms(1000);
		H_Buzzer_Void_BuzzerSetOn();
    2aa8:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <H_Buzzer_Void_BuzzerSetOn>
    2aac:	96 01       	movw	r18, r12
    2aae:	ce 01       	movw	r24, r28
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	f1 f7       	brne	.-4      	; 0x2ab0 <H_Buzzer_Void_BuzzerAlarm+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	21 50       	subi	r18, 0x01	; 1
    2ab6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab8:	d1 f7       	brne	.-12     	; 0x2aae <H_Buzzer_Void_BuzzerAlarm+0x5a>
		_delay_ms(2000);
		H_Buzzer_Void_BuzzerSetOff();
    2aba:	0e 94 20 15 	call	0x2a40	; 0x2a40 <H_Buzzer_Void_BuzzerSetOff>
    2abe:	98 01       	movw	r18, r16
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <H_Buzzer_Void_BuzzerAlarm+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac6:	21 50       	subi	r18, 0x01	; 1
    2ac8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	d1 f7       	brne	.-12     	; 0x2ac0 <H_Buzzer_Void_BuzzerAlarm+0x6c>
		_delay_ms(1000);
		H_Buzzer_Void_BuzzerSetOn();
    2acc:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <H_Buzzer_Void_BuzzerSetOn>
    2ad0:	98 01       	movw	r18, r16
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <H_Buzzer_Void_BuzzerAlarm+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad8:	21 50       	subi	r18, 0x01	; 1
    2ada:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2adc:	d1 f7       	brne	.-12     	; 0x2ad2 <H_Buzzer_Void_BuzzerAlarm+0x7e>
		_delay_ms(1000);
		H_Buzzer_Void_BuzzerSetOff();
    2ade:	0e 94 20 15 	call	0x2a40	; 0x2a40 <H_Buzzer_Void_BuzzerSetOff>
    2ae2:	98 01       	movw	r18, r16
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <H_Buzzer_Void_BuzzerAlarm+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	21 50       	subi	r18, 0x01	; 1
    2aec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aee:	d1 f7       	brne	.-12     	; 0x2ae4 <H_Buzzer_Void_BuzzerAlarm+0x90>
    2af0:	c9 cf       	rjmp	.-110    	; 0x2a84 <H_Buzzer_Void_BuzzerAlarm+0x30>

00002af2 <H_Buzzer_Void_BuzzerInit>:

#include "Buzzer_Interface.h"

void H_Buzzer_Void_BuzzerInit(void)
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
    2af2:	8d e0       	ldi	r24, 0x0D	; 13
    2af4:	61 e0       	ldi	r22, 0x01	; 1
    2af6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <M_DIO_Void_SetPinDirection>
}
    2afa:	08 95       	ret

00002afc <H_AT24C16A_Void_EEPROMSequentialRead>:
	M_I2C_Void_I2CStopCondition();
	return Local_U8_Reading;
}

u8 *H_AT24C16A_Void_EEPROMSequentialRead(u8 Copy_U8_Page,u8 Copy_U8_Byte)
{
    2afc:	0f 93       	push	r16
    2afe:	1f 93       	push	r17
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	18 2f       	mov	r17, r24
    2b06:	06 2f       	mov	r16, r22
	static u8 Local_U8_Reading[8];
	u8 Local_U8_Counter=0;
	M_I2C_Void_I2CStartCondition();
    2b08:	0e 94 e7 09 	call	0x13ce	; 0x13ce <M_I2C_Void_I2CStartCondition>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    2b0c:	10 65       	ori	r17, 0x50	; 80
    2b0e:	81 2f       	mov	r24, r17
    2b10:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_I2C_Void_I2CSendSlaveAddressWrite>
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    2b14:	80 2f       	mov	r24, r16
    2b16:	0e 94 3a 0a 	call	0x1474	; 0x1474 <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CRepeatedStart();
    2b1a:	0e 94 02 0a 	call	0x1404	; 0x1404 <M_I2C_Void_I2CRepeatedStart>
	M_I2C_Void_I2CSendSlaveAddressRead(0x50 | Copy_U8_Page);
    2b1e:	81 2f       	mov	r24, r17
    2b20:	0e 94 25 0a 	call	0x144a	; 0x144a <M_I2C_Void_I2CSendSlaveAddressRead>
    2b24:	cf e4       	ldi	r28, 0x4F	; 79
    2b26:	d3 e0       	ldi	r29, 0x03	; 3
	for(Local_U8_Counter=0;Local_U8_Counter<=7;Local_U8_Counter++)
    2b28:	07 e5       	ldi	r16, 0x57	; 87
    2b2a:	13 e0       	ldi	r17, 0x03	; 3
		Local_U8_Reading[Local_U8_Counter] = M_I2C_Void_I2CReadByte();
    2b2c:	0e 94 4d 0a 	call	0x149a	; 0x149a <M_I2C_Void_I2CReadByte>
    2b30:	89 93       	st	Y+, r24
	M_I2C_Void_I2CStartCondition();
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
	M_I2C_Void_I2CRepeatedStart();
	M_I2C_Void_I2CSendSlaveAddressRead(0x50 | Copy_U8_Page);
	for(Local_U8_Counter=0;Local_U8_Counter<=7;Local_U8_Counter++)
    2b32:	c0 17       	cp	r28, r16
    2b34:	d1 07       	cpc	r29, r17
    2b36:	d1 f7       	brne	.-12     	; 0x2b2c <H_AT24C16A_Void_EEPROMSequentialRead+0x30>
		Local_U8_Reading[Local_U8_Counter] = M_I2C_Void_I2CReadByte();
	M_I2C_Void_I2CStopCondition();
    2b38:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <M_I2C_Void_I2CStopCondition>
	return Local_U8_Reading;
}
    2b3c:	8f e4       	ldi	r24, 0x4F	; 79
    2b3e:	93 e0       	ldi	r25, 0x03	; 3
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	08 95       	ret

00002b4a <H_AT24C16A_U8_EEPROMAdminCheck>:
		Local_U8_Counter+=9;
	}
}

u8  H_AT24C16A_U8_EEPROMAdminCheck(u8*Copy_U8_ArrPtr)
{
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	8c 01       	movw	r16, r24
	u8 *Local_U8_ArrPtr;
	u8 Local_U8_Counter2=0;
	u8 Local_U8_Counter3=0;

	Local_U8_ArrPtr = H_AT24C16A_Void_EEPROMSequentialRead(0,0);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	0e 94 7e 15 	call	0x2afc	; 0x2afc <H_AT24C16A_Void_EEPROMSequentialRead>
    2b5c:	ec 01       	movw	r28, r24
	M_I2C_Void_I2CReInit();
    2b5e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
	for(Local_U8_Counter2=0;Local_U8_Counter2<=7;Local_U8_Counter2++)
	{
		if(*(Copy_U8_ArrPtr+Local_U8_Counter2) == *(Local_U8_ArrPtr+Local_U8_Counter2))
    2b68:	f8 01       	movw	r30, r16
    2b6a:	e2 0f       	add	r30, r18
    2b6c:	f3 1f       	adc	r31, r19
    2b6e:	de 01       	movw	r26, r28
    2b70:	a2 0f       	add	r26, r18
    2b72:	b3 1f       	adc	r27, r19
    2b74:	90 81       	ld	r25, Z
    2b76:	8c 91       	ld	r24, X
    2b78:	98 17       	cp	r25, r24
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <H_AT24C16A_U8_EEPROMAdminCheck+0x34>
			Local_U8_Counter3++;
    2b7c:	4f 5f       	subi	r20, 0xFF	; 255
    2b7e:	2f 5f       	subi	r18, 0xFF	; 255
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
	u8 Local_U8_Counter2=0;
	u8 Local_U8_Counter3=0;

	Local_U8_ArrPtr = H_AT24C16A_Void_EEPROMSequentialRead(0,0);
	M_I2C_Void_I2CReInit();
	for(Local_U8_Counter2=0;Local_U8_Counter2<=7;Local_U8_Counter2++)
    2b82:	28 30       	cpi	r18, 0x08	; 8
    2b84:	31 05       	cpc	r19, r1
    2b86:	81 f7       	brne	.-32     	; 0x2b68 <H_AT24C16A_U8_EEPROMAdminCheck+0x1e>
	{
		if(*(Copy_U8_ArrPtr+Local_U8_Counter2) == *(Local_U8_ArrPtr+Local_U8_Counter2))
			Local_U8_Counter3++;
	}
	if(Local_U8_Counter3==8)
    2b88:	48 30       	cpi	r20, 0x08	; 8
    2b8a:	11 f4       	brne	.+4      	; 0x2b90 <H_AT24C16A_U8_EEPROMAdminCheck+0x46>
	{
		return 1;
	}
}
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	00 c0       	rjmp	.+0      	; 0x2b90 <H_AT24C16A_U8_EEPROMAdminCheck+0x46>
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	08 95       	ret

00002b9a <H_AT24C16A_Void_EEPROMRead>:
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
	M_I2C_Void_I2CSendByte(Copy_U8_Data);
	M_I2C_Void_I2CStopCondition();
}
u8   H_AT24C16A_Void_EEPROMRead(u8 Copy_U8_Page,u8 Copy_U8_Byte)
{
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	18 2f       	mov	r17, r24
    2ba0:	06 2f       	mov	r16, r22
	u8 Local_U8_Reading = 0;
	M_I2C_Void_I2CStartCondition();
    2ba2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <M_I2C_Void_I2CStartCondition>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    2ba6:	10 65       	ori	r17, 0x50	; 80
    2ba8:	81 2f       	mov	r24, r17
    2baa:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_I2C_Void_I2CSendSlaveAddressWrite>
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    2bae:	80 2f       	mov	r24, r16
    2bb0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CRepeatedStart();
    2bb4:	0e 94 02 0a 	call	0x1404	; 0x1404 <M_I2C_Void_I2CRepeatedStart>
	M_I2C_Void_I2CSendSlaveAddressRead(0x50 | Copy_U8_Page);
    2bb8:	81 2f       	mov	r24, r17
    2bba:	0e 94 25 0a 	call	0x144a	; 0x144a <M_I2C_Void_I2CSendSlaveAddressRead>
	Local_U8_Reading = M_I2C_Void_I2CReadByte();
    2bbe:	0e 94 4d 0a 	call	0x149a	; 0x149a <M_I2C_Void_I2CReadByte>
    2bc2:	18 2f       	mov	r17, r24
	M_I2C_Void_I2CStopCondition();
    2bc4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <M_I2C_Void_I2CStopCondition>
	return Local_U8_Reading;
}
    2bc8:	81 2f       	mov	r24, r17
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	08 95       	ret

00002bd0 <H_AT24C16A_U8_EEPROMUserCheck>:
	M_I2C_Void_I2CStopCondition();
	return Local_U8_Reading;
}

u8  H_AT24C16A_U8_EEPROMUserCheck(u8*Copy_U8_ArrPtr)
{
    2bd0:	cf 92       	push	r12
    2bd2:	df 92       	push	r13
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	8c 01       	movw	r16, r24
    2be0:	0f 2e       	mov	r0, r31
    2be2:	f9 e0       	ldi	r31, 0x09	; 9
    2be4:	ff 2e       	mov	r15, r31
    2be6:	f0 2d       	mov	r31, r0
	while(1)
	{
		Local_U8_Counter3=0;
		M_I2C_Void_I2CReInit();
		Local_U8_ArrPtr = H_AT24C16A_Void_EEPROMSequentialRead(0,Local_U8_Counter);
		M_I2C_Void_I2CReInit();
    2be8:	cc 24       	eor	r12, r12
    2bea:	dd 24       	eor	r13, r13
	u8 Local_U8_Counter2=0;
	u8 Local_U8_Counter3=0;
	while(1)
	{
		Local_U8_Counter3=0;
		M_I2C_Void_I2CReInit();
    2bec:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
		Local_U8_ArrPtr = H_AT24C16A_Void_EEPROMSequentialRead(0,Local_U8_Counter);
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	6f 2d       	mov	r22, r15
    2bf4:	0e 94 7e 15 	call	0x2afc	; 0x2afc <H_AT24C16A_Void_EEPROMSequentialRead>
    2bf8:	ec 01       	movw	r28, r24
		M_I2C_Void_I2CReInit();
    2bfa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	96 01       	movw	r18, r12
		for(Local_U8_Counter2=0;Local_U8_Counter2<=7;Local_U8_Counter2++)
		{
			if(*(Copy_U8_ArrPtr+Local_U8_Counter2) == *(Local_U8_ArrPtr+Local_U8_Counter2))
    2c02:	f8 01       	movw	r30, r16
    2c04:	e2 0f       	add	r30, r18
    2c06:	f3 1f       	adc	r31, r19
    2c08:	de 01       	movw	r26, r28
    2c0a:	a2 0f       	add	r26, r18
    2c0c:	b3 1f       	adc	r27, r19
    2c0e:	90 81       	ld	r25, Z
    2c10:	8c 91       	ld	r24, X
    2c12:	98 17       	cp	r25, r24
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <H_AT24C16A_U8_EEPROMUserCheck+0x48>
				Local_U8_Counter3++;
    2c16:	4f 5f       	subi	r20, 0xFF	; 255
    2c18:	2f 5f       	subi	r18, 0xFF	; 255
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		Local_U8_Counter3=0;
		M_I2C_Void_I2CReInit();
		Local_U8_ArrPtr = H_AT24C16A_Void_EEPROMSequentialRead(0,Local_U8_Counter);
		M_I2C_Void_I2CReInit();
		for(Local_U8_Counter2=0;Local_U8_Counter2<=7;Local_U8_Counter2++)
    2c1c:	28 30       	cpi	r18, 0x08	; 8
    2c1e:	31 05       	cpc	r19, r1
    2c20:	81 f7       	brne	.-32     	; 0x2c02 <H_AT24C16A_U8_EEPROMUserCheck+0x32>
		{
			if(*(Copy_U8_ArrPtr+Local_U8_Counter2) == *(Local_U8_ArrPtr+Local_U8_Counter2))
				Local_U8_Counter3++;
		}
		if(Local_U8_Counter3==8)
    2c22:	48 30       	cpi	r20, 0x08	; 8
    2c24:	31 f4       	brne	.+12     	; 0x2c32 <H_AT24C16A_U8_EEPROMUserCheck+0x62>
		{
			return(H_AT24C16A_Void_EEPROMRead(0,Local_U8_Counter-1));
    2c26:	6f 2d       	mov	r22, r15
    2c28:	61 50       	subi	r22, 0x01	; 1
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <H_AT24C16A_Void_EEPROMRead>
    2c30:	0e c0       	rjmp	.+28     	; 0x2c4e <H_AT24C16A_U8_EEPROMUserCheck+0x7e>
		}
		else if(H_AT24C16A_Void_EEPROMRead(0,Local_U8_Counter-1)==255)
    2c32:	6f 2d       	mov	r22, r15
    2c34:	61 50       	subi	r22, 0x01	; 1
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <H_AT24C16A_Void_EEPROMRead>
    2c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3e:	21 f4       	brne	.+8      	; 0x2c48 <H_AT24C16A_U8_EEPROMUserCheck+0x78>
		{
			M_I2C_Void_I2CReInit();
    2c40:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	03 c0       	rjmp	.+6      	; 0x2c4e <H_AT24C16A_U8_EEPROMUserCheck+0x7e>
			return 0;
		}
		Local_U8_Counter+=9;
    2c48:	89 e0       	ldi	r24, 0x09	; 9
    2c4a:	f8 0e       	add	r15, r24
    2c4c:	cf cf       	rjmp	.-98     	; 0x2bec <H_AT24C16A_U8_EEPROMUserCheck+0x1c>
	}
}
    2c4e:	df 91       	pop	r29
    2c50:	cf 91       	pop	r28
    2c52:	1f 91       	pop	r17
    2c54:	0f 91       	pop	r16
    2c56:	ff 90       	pop	r15
    2c58:	df 90       	pop	r13
    2c5a:	cf 90       	pop	r12
    2c5c:	08 95       	ret

00002c5e <H_AT24C16A_Void_EEPROMWrite>:
{
	M_I2C_Void_I2CInit();
	_delay_ms(1000);
}
void H_AT24C16A_Void_EEPROMWrite(u8 Copy_U8_Page,u8 Copy_U8_Byte,u8 Copy_U8_Data)
{
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	18 2f       	mov	r17, r24
    2c66:	06 2f       	mov	r16, r22
    2c68:	f4 2e       	mov	r15, r20
	M_I2C_Void_I2CStartCondition();
    2c6a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <M_I2C_Void_I2CStartCondition>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    2c6e:	81 2f       	mov	r24, r17
    2c70:	80 65       	ori	r24, 0x50	; 80
    2c72:	0e 94 14 0a 	call	0x1428	; 0x1428 <M_I2C_Void_I2CSendSlaveAddressWrite>
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    2c76:	80 2f       	mov	r24, r16
    2c78:	0e 94 3a 0a 	call	0x1474	; 0x1474 <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CSendByte(Copy_U8_Data);
    2c7c:	8f 2d       	mov	r24, r15
    2c7e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CStopCondition();
    2c82:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <M_I2C_Void_I2CStopCondition>
}
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	ff 90       	pop	r15
    2c8c:	08 95       	ret

00002c8e <H_AT24C16A_U8_EEPROMDeleteUser>:
	}

}

u8  H_AT24C16A_U8_EEPROMDeleteUser(u8*Copy_U8_ArrPtr)
{
    2c8e:	cf 92       	push	r12
    2c90:	df 92       	push	r13
    2c92:	ff 92       	push	r15
    2c94:	0f 93       	push	r16
    2c96:	1f 93       	push	r17
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	8c 01       	movw	r16, r24
    2c9e:	0f 2e       	mov	r0, r31
    2ca0:	f9 e0       	ldi	r31, 0x09	; 9
    2ca2:	ff 2e       	mov	r15, r31
    2ca4:	f0 2d       	mov	r31, r0
	while(1)
	{
		Local_U8_Counter3=0;
		M_I2C_Void_I2CReInit();
		Local_U8_ArrPtr = H_AT24C16A_Void_EEPROMSequentialRead(0,Local_U8_Counter);
		M_I2C_Void_I2CReInit();
    2ca6:	cc 24       	eor	r12, r12
    2ca8:	dd 24       	eor	r13, r13
	u8 Local_U8_Counter2=0;
	u8 Local_U8_Counter3=0;
	while(1)
	{
		Local_U8_Counter3=0;
		M_I2C_Void_I2CReInit();
    2caa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
		Local_U8_ArrPtr = H_AT24C16A_Void_EEPROMSequentialRead(0,Local_U8_Counter);
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	6f 2d       	mov	r22, r15
    2cb2:	0e 94 7e 15 	call	0x2afc	; 0x2afc <H_AT24C16A_Void_EEPROMSequentialRead>
    2cb6:	ec 01       	movw	r28, r24
		M_I2C_Void_I2CReInit();
    2cb8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	96 01       	movw	r18, r12
		for(Local_U8_Counter2=0;Local_U8_Counter2<=3;Local_U8_Counter2++)
		{
			if(*(Copy_U8_ArrPtr+Local_U8_Counter2) == *(Local_U8_ArrPtr+Local_U8_Counter2))
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	e2 0f       	add	r30, r18
    2cc4:	f3 1f       	adc	r31, r19
    2cc6:	de 01       	movw	r26, r28
    2cc8:	a2 0f       	add	r26, r18
    2cca:	b3 1f       	adc	r27, r19
    2ccc:	90 81       	ld	r25, Z
    2cce:	8c 91       	ld	r24, X
    2cd0:	98 17       	cp	r25, r24
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <H_AT24C16A_U8_EEPROMDeleteUser+0x48>
				Local_U8_Counter3++;
    2cd4:	4f 5f       	subi	r20, 0xFF	; 255
    2cd6:	2f 5f       	subi	r18, 0xFF	; 255
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		Local_U8_Counter3=0;
		M_I2C_Void_I2CReInit();
		Local_U8_ArrPtr = H_AT24C16A_Void_EEPROMSequentialRead(0,Local_U8_Counter);
		M_I2C_Void_I2CReInit();
		for(Local_U8_Counter2=0;Local_U8_Counter2<=3;Local_U8_Counter2++)
    2cda:	24 30       	cpi	r18, 0x04	; 4
    2cdc:	31 05       	cpc	r19, r1
    2cde:	81 f7       	brne	.-32     	; 0x2cc0 <H_AT24C16A_U8_EEPROMDeleteUser+0x32>
		{
			if(*(Copy_U8_ArrPtr+Local_U8_Counter2) == *(Local_U8_ArrPtr+Local_U8_Counter2))
				Local_U8_Counter3++;
		}
		if(Local_U8_Counter3==4)
    2ce0:	44 30       	cpi	r20, 0x04	; 4
    2ce2:	69 f4       	brne	.+26     	; 0x2cfe <H_AT24C16A_U8_EEPROMDeleteUser+0x70>
    2ce4:	1f 2d       	mov	r17, r15
    2ce6:	11 50       	subi	r17, 0x01	; 1
		{
			for(Local_U8_Counter2=0;Local_U8_Counter2<=8;Local_U8_Counter2++)
    2ce8:	0f 2d       	mov	r16, r15
    2cea:	08 5f       	subi	r16, 0xF8	; 248
			{
				H_AT24C16A_Void_EEPROMWrite(0,Local_U8_Counter-1,0);
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	61 2f       	mov	r22, r17
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <H_AT24C16A_Void_EEPROMWrite>
    2cf6:	1f 5f       	subi	r17, 0xFF	; 255
			if(*(Copy_U8_ArrPtr+Local_U8_Counter2) == *(Local_U8_ArrPtr+Local_U8_Counter2))
				Local_U8_Counter3++;
		}
		if(Local_U8_Counter3==4)
		{
			for(Local_U8_Counter2=0;Local_U8_Counter2<=8;Local_U8_Counter2++)
    2cf8:	10 17       	cp	r17, r16
    2cfa:	c1 f7       	brne	.-16     	; 0x2cec <H_AT24C16A_U8_EEPROMDeleteUser+0x5e>
    2cfc:	0e c0       	rjmp	.+28     	; 0x2d1a <H_AT24C16A_U8_EEPROMDeleteUser+0x8c>
				H_AT24C16A_Void_EEPROMWrite(0,Local_U8_Counter-1,0);
				Local_U8_Counter++;
			}
			return 1;
		}
		else if(H_AT24C16A_Void_EEPROMRead(0,Local_U8_Counter-1)==255)
    2cfe:	6f 2d       	mov	r22, r15
    2d00:	61 50       	subi	r22, 0x01	; 1
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <H_AT24C16A_Void_EEPROMRead>
    2d08:	8f 3f       	cpi	r24, 0xFF	; 255
    2d0a:	21 f4       	brne	.+8      	; 0x2d14 <H_AT24C16A_U8_EEPROMDeleteUser+0x86>
		{
			M_I2C_Void_I2CReInit();
    2d0c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	04 c0       	rjmp	.+8      	; 0x2d1c <H_AT24C16A_U8_EEPROMDeleteUser+0x8e>
			return 0;
		}
		Local_U8_Counter+=9;
    2d14:	89 e0       	ldi	r24, 0x09	; 9
    2d16:	f8 0e       	add	r15, r24
    2d18:	c8 cf       	rjmp	.-112    	; 0x2caa <H_AT24C16A_U8_EEPROMDeleteUser+0x1c>
	}
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
}
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	08 95       	ret

00002d2c <H_AT24C16A_U8_EEPROMNewUser>:
		return 1;
	}
}

void H_AT24C16A_U8_EEPROMNewUser(u8 Copy_U8_Status,u8* Copy_U8_User)
{
    2d2c:	cf 92       	push	r12
    2d2e:	df 92       	push	r13
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	18 2f       	mov	r17, r24
    2d3e:	06 2f       	mov	r16, r22
    2d40:	d7 2e       	mov	r13, r23
    2d42:	ee 24       	eor	r14, r14
    2d44:	68 94       	set
    2d46:	e3 f8       	bld	r14, 3
	u8 Local_U8_Counter=8;
	u8 Local_U8_Counter2=0;
	while(1)
	{
		M_I2C_Void_I2CReInit();
    2d48:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
		if(H_AT24C16A_Void_EEPROMRead(0,Local_U8_Counter)==255)
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	6e 2d       	mov	r22, r14
    2d50:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <H_AT24C16A_Void_EEPROMRead>
    2d54:	8f 3f       	cpi	r24, 0xFF	; 255
    2d56:	89 f5       	brne	.+98     	; 0x2dba <H_AT24C16A_U8_EEPROMNewUser+0x8e>
		{
			H_AT24C16A_Void_EEPROMWrite(0,Local_U8_Counter,Copy_U8_Status);
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	6e 2d       	mov	r22, r14
    2d5c:	41 2f       	mov	r20, r17
    2d5e:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <H_AT24C16A_Void_EEPROMWrite>
    2d62:	20 e1       	ldi	r18, 0x10	; 16
    2d64:	37 e2       	ldi	r19, 0x27	; 39
    2d66:	40 e9       	ldi	r20, 0x90	; 144
    2d68:	51 e0       	ldi	r21, 0x01	; 1
    2d6a:	ca 01       	movw	r24, r20
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <H_AT24C16A_U8_EEPROMNewUser+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d70:	21 50       	subi	r18, 0x01	; 1
    2d72:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d74:	d1 f7       	brne	.-12     	; 0x2d6a <H_AT24C16A_U8_EEPROMNewUser+0x3e>
			_delay_ms(1000);
			Local_U8_Counter++;
    2d76:	fe 2c       	mov	r15, r14
    2d78:	f3 94       	inc	r15
    2d7a:	20 2f       	mov	r18, r16
    2d7c:	3d 2d       	mov	r19, r13
    2d7e:	89 01       	movw	r16, r18
			for(Local_U8_Counter2=0;Local_U8_Counter2<=7;Local_U8_Counter2++)
			{
				H_AT24C16A_Void_EEPROMWrite(0,Local_U8_Counter,*(Copy_U8_User+Local_U8_Counter2));
				Local_U8_Counter++;
    2d80:	0f 2e       	mov	r0, r31
    2d82:	f0 e1       	ldi	r31, 0x10	; 16
    2d84:	cf 2e       	mov	r12, r31
    2d86:	f7 e2       	ldi	r31, 0x27	; 39
    2d88:	df 2e       	mov	r13, r31
    2d8a:	f0 2d       	mov	r31, r0
    2d8c:	c0 e9       	ldi	r28, 0x90	; 144
    2d8e:	d1 e0       	ldi	r29, 0x01	; 1
		if(H_AT24C16A_Void_EEPROMRead(0,Local_U8_Counter)==255)
		{
			H_AT24C16A_Void_EEPROMWrite(0,Local_U8_Counter,Copy_U8_Status);
			_delay_ms(1000);
			Local_U8_Counter++;
			for(Local_U8_Counter2=0;Local_U8_Counter2<=7;Local_U8_Counter2++)
    2d90:	89 e0       	ldi	r24, 0x09	; 9
    2d92:	e8 0e       	add	r14, r24
			{
				H_AT24C16A_Void_EEPROMWrite(0,Local_U8_Counter,*(Copy_U8_User+Local_U8_Counter2));
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	6f 2d       	mov	r22, r15
    2d98:	f8 01       	movw	r30, r16
    2d9a:	40 81       	ld	r20, Z
    2d9c:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <H_AT24C16A_Void_EEPROMWrite>
				Local_U8_Counter++;
    2da0:	f3 94       	inc	r15
    2da2:	96 01       	movw	r18, r12
    2da4:	ce 01       	movw	r24, r28
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <H_AT24C16A_U8_EEPROMNewUser+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2daa:	21 50       	subi	r18, 0x01	; 1
    2dac:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	d1 f7       	brne	.-12     	; 0x2da4 <H_AT24C16A_U8_EEPROMNewUser+0x78>
    2db0:	0f 5f       	subi	r16, 0xFF	; 255
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
		if(H_AT24C16A_Void_EEPROMRead(0,Local_U8_Counter)==255)
		{
			H_AT24C16A_Void_EEPROMWrite(0,Local_U8_Counter,Copy_U8_Status);
			_delay_ms(1000);
			Local_U8_Counter++;
			for(Local_U8_Counter2=0;Local_U8_Counter2<=7;Local_U8_Counter2++)
    2db4:	fe 14       	cp	r15, r14
    2db6:	71 f7       	brne	.-36     	; 0x2d94 <H_AT24C16A_U8_EEPROMNewUser+0x68>
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <H_AT24C16A_U8_EEPROMNewUser+0x98>
				Local_U8_Counter++;
				_delay_ms(1000);
			}
			break;
		}
		M_I2C_Void_I2CReInit();
    2dba:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <M_I2C_Void_I2CReInit>
		Local_U8_Counter+=9;
    2dbe:	f9 e0       	ldi	r31, 0x09	; 9
    2dc0:	ef 0e       	add	r14, r31
    2dc2:	c2 cf       	rjmp	.-124    	; 0x2d48 <H_AT24C16A_U8_EEPROMNewUser+0x1c>
	}

}
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
    2dd4:	08 95       	ret

00002dd6 <H_AT24C16A_Void_EEPROMInit>:
#include "LED_Interface.h"
#include "LCD_Interface.h"

void H_AT24C16A_Void_EEPROMInit(void)
{
	M_I2C_Void_I2CInit();
    2dd6:	0e 94 df 09 	call	0x13be	; 0x13be <M_I2C_Void_I2CInit>
    2dda:	20 e1       	ldi	r18, 0x10	; 16
    2ddc:	37 e2       	ldi	r19, 0x27	; 39
    2dde:	40 e9       	ldi	r20, 0x90	; 144
    2de0:	51 e0       	ldi	r21, 0x01	; 1
    2de2:	ca 01       	movw	r24, r20
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <H_AT24C16A_Void_EEPROMInit+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de8:	21 50       	subi	r18, 0x01	; 1
    2dea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dec:	d1 f7       	brne	.-12     	; 0x2de2 <H_AT24C16A_Void_EEPROMInit+0xc>
	_delay_ms(1000);
}
    2dee:	08 95       	ret

00002df0 <A_Timer0_Execution>:
	}
}
/*************************************************-TIMERS_ISR-*************************************************/
void A_Timer0_Execution(void)
{
	Global_A_U32_Timer_s++;
    2df0:	80 91 57 03 	lds	r24, 0x0357
    2df4:	90 91 58 03 	lds	r25, 0x0358
    2df8:	a0 91 59 03 	lds	r26, 0x0359
    2dfc:	b0 91 5a 03 	lds	r27, 0x035A
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	a1 1d       	adc	r26, r1
    2e04:	b1 1d       	adc	r27, r1
    2e06:	80 93 57 03 	sts	0x0357, r24
    2e0a:	90 93 58 03 	sts	0x0358, r25
    2e0e:	a0 93 59 03 	sts	0x0359, r26
    2e12:	b0 93 5a 03 	sts	0x035A, r27

	if(Global_U8_ACState == AC_ON)
    2e16:	80 91 60 03 	lds	r24, 0x0360
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	51 f4       	brne	.+20     	; 0x2e32 <A_Timer0_Execution+0x42>
	{
		if(M_ADC_U16_ADCRead(ADC_CHANNEL_1) >= AC_ON_TEMP)
    2e1e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <M_ADC_U16_ADCRead>
    2e22:	80 50       	subi	r24, 0x00	; 0
    2e24:	92 40       	sbci	r25, 0x02	; 2
    2e26:	18 f0       	brcs	.+6      	; 0x2e2e <A_Timer0_Execution+0x3e>
			H_DCMotor_Void_ACMotorStart();
    2e28:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <H_DCMotor_Void_ACMotorStart>
    2e2c:	08 95       	ret
		else
			H_DCMotor_Void_ACMotorStop();
    2e2e:	0e 94 cb 14 	call	0x2996	; 0x2996 <H_DCMotor_Void_ACMotorStop>
    2e32:	08 95       	ret

00002e34 <A_KeyPad_Execution>:
	Local_U8_Read = H_KeyPad_U8_KeyPadRead();
	return Local_U8_Read;
}

void A_KeyPad_Execution(u8 Copy_U8_Row,u8 Copy_U8_Col,u8* Copy_U8_LCDWrite)
{
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	ea 01       	movw	r28, r20
	if(Copy_U8_Row == 1 && Copy_U8_Col >= 9)
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	59 f4       	brne	.+22     	; 0x2e54 <A_KeyPad_Execution+0x20>
    2e3e:	69 30       	cpi	r22, 0x09	; 9
    2e40:	48 f0       	brcs	.+18     	; 0x2e54 <A_KeyPad_Execution+0x20>
	{
		H_LCD_Void_LCDGoTo(Copy_U8_Row,Copy_U8_Col);
    2e42:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString("*");
    2e46:	85 e2       	ldi	r24, 0x25	; 37
    2e48:	91 e0       	ldi	r25, 0x01	; 1
    2e4a:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
		H_Buzzer_Void_BuzzerOnce();
    2e4e:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <H_Buzzer_Void_BuzzerOnce>
    2e52:	07 c0       	rjmp	.+14     	; 0x2e62 <A_KeyPad_Execution+0x2e>
	}
	else
	{
		H_LCD_Void_LCDGoTo(Copy_U8_Row,Copy_U8_Col);
    2e54:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
		H_LCD_Void_LCDWriteString(Copy_U8_LCDWrite);
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
		H_Buzzer_Void_BuzzerOnce();
    2e5e:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <H_Buzzer_Void_BuzzerOnce>
	}
}
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	08 95       	ret

00002e68 <A_LCD_Execution>:
}
/*************************************************-CALLBACK_FUNCTIONS-*****************************************/
u8 A_LCD_Execution(void)
{
	u8 Local_U8_Read=0;
	M_Timer_Void_PWMSetDutyCycle(TIMER2_CHANNEL,(M_ADC_U16_ADCRead(ADC_CHANNEL_0)/9));
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <M_ADC_U16_ADCRead>
    2e6e:	69 e0       	ldi	r22, 0x09	; 9
    2e70:	70 e0       	ldi	r23, 0x00	; 0
    2e72:	0e 94 37 1c 	call	0x386e	; 0x386e <__udivmodhi4>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    2e7e:	ab 01       	movw	r20, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	0e 94 77 08 	call	0x10ee	; 0x10ee <M_Timer_Void_PWMSetDutyCycle>
	Local_U8_Read = H_KeyPad_U8_KeyPadRead();
    2e88:	0e 94 1b 13 	call	0x2636	; 0x2636 <H_KeyPad_U8_KeyPadRead>
	return Local_U8_Read;
}
    2e8c:	08 95       	ret

00002e8e <A_UART_Void_UARTExecution>:
	M_UART_Void_UARTDeinit();
	H_Buzzer_Void_BuzzerAlarm();
}
/*************************************************-UART_INTERRUPTION-*********************************************/
void A_UART_Void_UARTExecution(void)
{
    2e8e:	6f 92       	push	r6
    2e90:	7f 92       	push	r7
    2e92:	8f 92       	push	r8
    2e94:	9f 92       	push	r9
    2e96:	af 92       	push	r10
    2e98:	bf 92       	push	r11
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	1f 93       	push	r17
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	28 97       	sbiw	r28, 0x08	; 8
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
	Global_A_U8_UARTInput=UDR_REG;
    2eb8:	8c b1       	in	r24, 0x0c	; 12
    2eba:	80 93 61 03 	sts	0x0361, r24
	u8 Local_U8_UARTUser[USER_ARRAY_SIZE];
	H_Buzzer_Void_BuzzerOnce();
    2ebe:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <H_Buzzer_Void_BuzzerOnce>
	switch(Global_A_U8_Status)
    2ec2:	80 91 5b 03 	lds	r24, 0x035B
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <A_UART_Void_UARTExecution+0x3e>
    2eca:	13 c1       	rjmp	.+550    	; 0x30f2 <A_UART_Void_UARTExecution+0x264>
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	38 f0       	brcs	.+14     	; 0x2ede <A_UART_Void_UARTExecution+0x50>
    2ed0:	82 30       	cpi	r24, 0x02	; 2
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <A_UART_Void_UARTExecution+0x48>
    2ed4:	16 c1       	rjmp	.+556    	; 0x3102 <A_UART_Void_UARTExecution+0x274>
    2ed6:	83 30       	cpi	r24, 0x03	; 3
    2ed8:	09 f0       	breq	.+2      	; 0x2edc <A_UART_Void_UARTExecution+0x4e>
    2eda:	52 c3       	rjmp	.+1700   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
    2edc:	aa c1       	rjmp	.+852    	; 0x3232 <A_UART_Void_UARTExecution+0x3a4>
	{
/*************************************************-UNSIGNED_USER-*************************************************/
	case UNSIGNED_USER:
		switch(Global_A_U8_UARTInput)
    2ede:	80 91 61 03 	lds	r24, 0x0361
    2ee2:	80 33       	cpi	r24, 0x30	; 48
    2ee4:	21 f0       	breq	.+8      	; 0x2eee <A_UART_Void_UARTExecution+0x60>
    2ee6:	81 33       	cpi	r24, 0x31	; 49
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <A_UART_Void_UARTExecution+0x5e>
    2eea:	fb c0       	rjmp	.+502    	; 0x30e2 <A_UART_Void_UARTExecution+0x254>
    2eec:	89 c0       	rjmp	.+274    	; 0x3000 <A_UART_Void_UARTExecution+0x172>
		{
		case ADMIN_LOGIN:
			H_LCD_Void_LCDClear();
    2eee:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
			H_LCD_Void_LCDGoTo(0,0);
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteString("UserName:");
    2efa:	87 e2       	ldi	r24, 0x27	; 39
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
			M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your username: ");
    2f02:	8d e1       	ldi	r24, 0x1D	; 29
    2f04:	61 e3       	ldi	r22, 0x31	; 49
    2f06:	71 e0       	ldi	r23, 0x01	; 1
    2f08:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
    2f0c:	10 e0       	ldi	r17, 0x00	; 0

			u8 Local_U8_UARTCounter = INITIAL_VALUE;
			while(Local_U8_UARTCounter <= (USER_ARRAY_SIZE-1))
			{
				Local_U8_UARTUser[Local_U8_UARTCounter]=M_UART_Void_UARTRec();
    2f0e:	6e 01       	movw	r12, r28
    2f10:	08 94       	sec
    2f12:	c1 1c       	adc	r12, r1
    2f14:	d1 1c       	adc	r13, r1
					if(Local_U8_UARTCounter < (USERNAME_SIZE-1))
						H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
					else if(Local_U8_UARTCounter == (USERNAME_SIZE-1))
					{
						H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
						M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your password: ");
    2f16:	0f 2e       	mov	r0, r31
    2f18:	ff e4       	ldi	r31, 0x4F	; 79
    2f1a:	8f 2e       	mov	r8, r31
    2f1c:	f1 e0       	ldi	r31, 0x01	; 1
    2f1e:	9f 2e       	mov	r9, r31
    2f20:	f0 2d       	mov	r31, r0
						H_LCD_Void_LCDGoTo(1,0);
						H_LCD_Void_LCDWriteString("Password: ");
    2f22:	0f 2e       	mov	r0, r31
    2f24:	fd e6       	ldi	r31, 0x6D	; 109
    2f26:	af 2e       	mov	r10, r31
    2f28:	f1 e0       	ldi	r31, 0x01	; 1
    2f2a:	bf 2e       	mov	r11, r31
    2f2c:	f0 2d       	mov	r31, r0
    2f2e:	0f 2e       	mov	r0, r31
    2f30:	f0 ea       	ldi	r31, 0xA0	; 160
    2f32:	ef 2e       	mov	r14, r31
    2f34:	ff e0       	ldi	r31, 0x0F	; 15
    2f36:	ff 2e       	mov	r15, r31
    2f38:	f0 2d       	mov	r31, r0
			M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your username: ");

			u8 Local_U8_UARTCounter = INITIAL_VALUE;
			while(Local_U8_UARTCounter <= (USER_ARRAY_SIZE-1))
			{
				Local_U8_UARTUser[Local_U8_UARTCounter]=M_UART_Void_UARTRec();
    2f3a:	0e 94 65 07 	call	0xeca	; 0xeca <M_UART_Void_UARTRec>
    2f3e:	f6 01       	movw	r30, r12
    2f40:	e1 0f       	add	r30, r17
    2f42:	f1 1d       	adc	r31, r1
    2f44:	80 83       	st	Z, r24
				if(Local_U8_UARTUser[Local_U8_UARTCounter] != INITIAL_VALUE)
    2f46:	88 23       	and	r24, r24
    2f48:	c9 f0       	breq	.+50     	; 0x2f7c <A_UART_Void_UARTExecution+0xee>
				{
					if(Local_U8_UARTCounter < (USERNAME_SIZE-1))
    2f4a:	13 30       	cpi	r17, 0x03	; 3
    2f4c:	18 f4       	brcc	.+6      	; 0x2f54 <A_UART_Void_UARTExecution+0xc6>
						H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    2f4e:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
    2f52:	13 c0       	rjmp	.+38     	; 0x2f7a <A_UART_Void_UARTExecution+0xec>
					else if(Local_U8_UARTCounter == (USERNAME_SIZE-1))
    2f54:	13 30       	cpi	r17, 0x03	; 3
    2f56:	71 f4       	brne	.+28     	; 0x2f74 <A_UART_Void_UARTExecution+0xe6>
					{
						H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    2f58:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
						M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your password: ");
    2f5c:	8d e1       	ldi	r24, 0x1D	; 29
    2f5e:	b4 01       	movw	r22, r8
    2f60:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
						H_LCD_Void_LCDGoTo(1,0);
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
						H_LCD_Void_LCDWriteString("Password: ");
    2f6c:	c5 01       	movw	r24, r10
    2f6e:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    2f72:	03 c0       	rjmp	.+6      	; 0x2f7a <A_UART_Void_UARTExecution+0xec>
					}
					else
					{
						H_LCD_Void_LCDWriteCharacter('*');
    2f74:	8a e2       	ldi	r24, 0x2A	; 42
    2f76:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
					}
					Local_U8_UARTCounter++;
    2f7a:	1f 5f       	subi	r17, 0xFF	; 255
    2f7c:	c7 01       	movw	r24, r14
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <A_UART_Void_UARTExecution+0xf0>
			H_LCD_Void_LCDGoTo(0,0);
			H_LCD_Void_LCDWriteString("UserName:");
			M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your username: ");

			u8 Local_U8_UARTCounter = INITIAL_VALUE;
			while(Local_U8_UARTCounter <= (USER_ARRAY_SIZE-1))
    2f82:	18 30       	cpi	r17, 0x08	; 8
    2f84:	d0 f2       	brcs	.-76     	; 0x2f3a <A_UART_Void_UARTExecution+0xac>
    2f86:	20 e1       	ldi	r18, 0x10	; 16
    2f88:	37 e2       	ldi	r19, 0x27	; 39
    2f8a:	40 e9       	ldi	r20, 0x90	; 144
    2f8c:	51 e0       	ldi	r21, 0x01	; 1
    2f8e:	ca 01       	movw	r24, r20
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <A_UART_Void_UARTExecution+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	21 50       	subi	r18, 0x01	; 1
    2f96:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f98:	d1 f7       	brne	.-12     	; 0x2f8e <A_UART_Void_UARTExecution+0x100>
					Local_U8_UARTCounter++;
				}
				_delay_ms(1);
			}
			_delay_ms(SECOND);
			if(H_AT24C16A_U8_EEPROMAdminCheck(Local_U8_UARTUser) == VALID_ADMIN_USER)
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <H_AT24C16A_U8_EEPROMAdminCheck>
    2fa2:	81 30       	cpi	r24, 0x01	; 1
    2fa4:	d1 f4       	brne	.+52     	; 0x2fda <A_UART_Void_UARTExecution+0x14c>
			{
				Global_A_U8_Status = ADMIN_USER;
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	80 93 5b 03 	sts	0x035B, r24
				H_LCD_Void_LCDClear();
    2fac:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
				H_LCD_Void_LCDGoTo(0,0);
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	60 e0       	ldi	r22, 0x00	; 0
    2fb4:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
				H_LCD_Void_LCDWriteString("Welcome Mina");
    2fb8:	88 e7       	ldi	r24, 0x78	; 120
    2fba:	91 e0       	ldi	r25, 0x01	; 1
    2fbc:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    2fc0:	20 e2       	ldi	r18, 0x20	; 32
    2fc2:	3e e4       	ldi	r19, 0x4E	; 78
    2fc4:	40 e9       	ldi	r20, 0x90	; 144
    2fc6:	51 e0       	ldi	r21, 0x01	; 1
    2fc8:	ca 01       	movw	r24, r20
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <A_UART_Void_UARTExecution+0x13c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fce:	21 50       	subi	r18, 0x01	; 1
    2fd0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd2:	d1 f7       	brne	.-12     	; 0x2fc8 <A_UART_Void_UARTExecution+0x13a>
				_delay_ms(2000);
				H_LCD_Void_LCDClear();
    2fd4:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
    2fd8:	d3 c2       	rjmp	.+1446   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				break;
			}
			else if(Global_U8_Trials> ALLOWED_TRIALS-1)
    2fda:	80 91 5c 03 	lds	r24, 0x035C
    2fde:	82 30       	cpi	r24, 0x02	; 2
    2fe0:	20 f0       	brcs	.+8      	; 0x2fea <A_UART_Void_UARTExecution+0x15c>
			{
				M_UART_Void_UARTDeinit();
    2fe2:	0e 94 bc 07 	call	0xf78	; 0xf78 <M_UART_Void_UARTDeinit>
				H_Buzzer_Void_BuzzerAlarm();
    2fe6:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <H_Buzzer_Void_BuzzerAlarm>
			}
			if(Global_A_U8_Status == INVALID_USER)
    2fea:	80 91 5b 03 	lds	r24, 0x035B
    2fee:	88 23       	and	r24, r24
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <A_UART_Void_UARTExecution+0x166>
    2ff2:	c6 c2       	rjmp	.+1420   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				Global_U8_Trials++;
    2ff4:	80 91 5c 03 	lds	r24, 0x035C
    2ff8:	8f 5f       	subi	r24, 0xFF	; 255
    2ffa:	80 93 5c 03 	sts	0x035C, r24
    2ffe:	c0 c2       	rjmp	.+1408   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			break;
		case USER_LOGIN:
			H_LCD_Void_LCDClear();
    3000:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
			H_LCD_Void_LCDGoTo(0,0);
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
			H_LCD_Void_LCDWriteString("UserName:");
    300c:	87 e2       	ldi	r24, 0x27	; 39
    300e:	91 e0       	ldi	r25, 0x01	; 1
    3010:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
			M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your username: ");
    3014:	8d e1       	ldi	r24, 0x1D	; 29
    3016:	61 e3       	ldi	r22, 0x31	; 49
    3018:	71 e0       	ldi	r23, 0x01	; 1
    301a:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
    301e:	10 e0       	ldi	r17, 0x00	; 0

			Local_U8_UARTCounter = INITIAL_VALUE;
			while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
			{
				Local_U8_UARTUser[Local_U8_UARTCounter] = M_UART_Void_UARTRec();
    3020:	6e 01       	movw	r12, r28
    3022:	08 94       	sec
    3024:	c1 1c       	adc	r12, r1
    3026:	d1 1c       	adc	r13, r1
					if(Local_U8_UARTCounter < USERNAME_SIZE-1)
						H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
					else if(Local_U8_UARTCounter == USERNAME_SIZE-1)
					{
						H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
						M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your password: ");
    3028:	0f 2e       	mov	r0, r31
    302a:	ff e4       	ldi	r31, 0x4F	; 79
    302c:	8f 2e       	mov	r8, r31
    302e:	f1 e0       	ldi	r31, 0x01	; 1
    3030:	9f 2e       	mov	r9, r31
    3032:	f0 2d       	mov	r31, r0
						H_LCD_Void_LCDGoTo(1,0);
						H_LCD_Void_LCDWriteString("Password: ");
    3034:	0f 2e       	mov	r0, r31
    3036:	fd e6       	ldi	r31, 0x6D	; 109
    3038:	af 2e       	mov	r10, r31
    303a:	f1 e0       	ldi	r31, 0x01	; 1
    303c:	bf 2e       	mov	r11, r31
    303e:	f0 2d       	mov	r31, r0
    3040:	0f 2e       	mov	r0, r31
    3042:	f0 ea       	ldi	r31, 0xA0	; 160
    3044:	ef 2e       	mov	r14, r31
    3046:	ff e0       	ldi	r31, 0x0F	; 15
    3048:	ff 2e       	mov	r15, r31
    304a:	f0 2d       	mov	r31, r0
			M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your username: ");

			Local_U8_UARTCounter = INITIAL_VALUE;
			while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
			{
				Local_U8_UARTUser[Local_U8_UARTCounter] = M_UART_Void_UARTRec();
    304c:	0e 94 65 07 	call	0xeca	; 0xeca <M_UART_Void_UARTRec>
    3050:	f6 01       	movw	r30, r12
    3052:	e1 0f       	add	r30, r17
    3054:	f1 1d       	adc	r31, r1
    3056:	80 83       	st	Z, r24
				if(Local_U8_UARTUser[Local_U8_UARTCounter] != INITIAL_VALUE)
    3058:	88 23       	and	r24, r24
    305a:	c9 f0       	breq	.+50     	; 0x308e <A_UART_Void_UARTExecution+0x200>
				{
					if(Local_U8_UARTCounter < USERNAME_SIZE-1)
    305c:	13 30       	cpi	r17, 0x03	; 3
    305e:	18 f4       	brcc	.+6      	; 0x3066 <A_UART_Void_UARTExecution+0x1d8>
						H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    3060:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
    3064:	13 c0       	rjmp	.+38     	; 0x308c <A_UART_Void_UARTExecution+0x1fe>
					else if(Local_U8_UARTCounter == USERNAME_SIZE-1)
    3066:	13 30       	cpi	r17, 0x03	; 3
    3068:	71 f4       	brne	.+28     	; 0x3086 <A_UART_Void_UARTExecution+0x1f8>
					{
						H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    306a:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
						M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your password: ");
    306e:	8d e1       	ldi	r24, 0x1D	; 29
    3070:	b4 01       	movw	r22, r8
    3072:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
						H_LCD_Void_LCDGoTo(1,0);
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	60 e0       	ldi	r22, 0x00	; 0
    307a:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
						H_LCD_Void_LCDWriteString("Password: ");
    307e:	c5 01       	movw	r24, r10
    3080:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    3084:	03 c0       	rjmp	.+6      	; 0x308c <A_UART_Void_UARTExecution+0x1fe>
					}
					else
					{
						H_LCD_Void_LCDWriteCharacter('*');
    3086:	8a e2       	ldi	r24, 0x2A	; 42
    3088:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
					}
					Local_U8_UARTCounter++;
    308c:	1f 5f       	subi	r17, 0xFF	; 255
    308e:	c7 01       	movw	r24, r14
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <A_UART_Void_UARTExecution+0x202>
			H_LCD_Void_LCDGoTo(0,0);
			H_LCD_Void_LCDWriteString("UserName:");
			M_UART_Void_UARTSendString(UART_STRING_SIZE1,"Please, Enter your username: ");

			Local_U8_UARTCounter = INITIAL_VALUE;
			while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
    3094:	18 30       	cpi	r17, 0x08	; 8
    3096:	d0 f2       	brcs	.-76     	; 0x304c <A_UART_Void_UARTExecution+0x1be>
					}
					Local_U8_UARTCounter++;
				}
				_delay_ms(1);
			}
			if(H_AT24C16A_U8_EEPROMUserCheck(Local_U8_UARTUser) == VALID_UART_USER)
    3098:	ce 01       	movw	r24, r28
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <H_AT24C16A_U8_EEPROMUserCheck>
    30a0:	82 30       	cpi	r24, 0x02	; 2
    30a2:	61 f4       	brne	.+24     	; 0x30bc <A_UART_Void_UARTExecution+0x22e>
			{
				Global_A_U8_Status = UART_USER;
    30a4:	80 93 5b 03 	sts	0x035B, r24
				M_UART_Void_UARTSendString(UART_STRING_SIZE2,"Welcome User");
    30a8:	8c e0       	ldi	r24, 0x0C	; 12
    30aa:	65 e8       	ldi	r22, 0x85	; 133
    30ac:	71 e0       	ldi	r23, 0x01	; 1
    30ae:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
				H_LCD_Void_LCDUserCheck(Local_U8_UARTUser);
    30b2:	ce 01       	movw	r24, r28
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	0e 94 76 11 	call	0x22ec	; 0x22ec <H_LCD_Void_LCDUserCheck>
    30ba:	62 c2       	rjmp	.+1220   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				break;
			}
			else if(Global_U8_Trials > ALLOWED_TRIALS-1)
    30bc:	80 91 5c 03 	lds	r24, 0x035C
    30c0:	82 30       	cpi	r24, 0x02	; 2
    30c2:	20 f0       	brcs	.+8      	; 0x30cc <A_UART_Void_UARTExecution+0x23e>
			{
				M_UART_Void_UARTDeinit();
    30c4:	0e 94 bc 07 	call	0xf78	; 0xf78 <M_UART_Void_UARTDeinit>
				H_Buzzer_Void_BuzzerAlarm();
    30c8:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <H_Buzzer_Void_BuzzerAlarm>
			}
			if(Global_A_U8_Status == INVALID_USER)
    30cc:	80 91 5b 03 	lds	r24, 0x035B
    30d0:	88 23       	and	r24, r24
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <A_UART_Void_UARTExecution+0x248>
    30d4:	55 c2       	rjmp	.+1194   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				Global_U8_Trials++;
    30d6:	80 91 5c 03 	lds	r24, 0x035C
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	80 93 5c 03 	sts	0x035C, r24
    30e0:	4f c2       	rjmp	.+1182   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			break;
		default:
			M_UART_Void_UARTSendString(UART_STRING_SIZE3,"U dont ve access");
    30e2:	80 e1       	ldi	r24, 0x10	; 16
    30e4:	62 e9       	ldi	r22, 0x92	; 146
    30e6:	71 e0       	ldi	r23, 0x01	; 1
    30e8:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
			H_LCD_Void_LCDAccessDenied();
    30ec:	0e 94 61 11 	call	0x22c2	; 0x22c2 <H_LCD_Void_LCDAccessDenied>
    30f0:	47 c2       	rjmp	.+1166   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			break;
		}
		break;
/*************************************************-kEYPAD_USER-************************************************/
		case KEYPAD_USER:
			M_UART_Void_UARTSendString(UART_STRING_SIZE3,"U dont ve access");
    30f2:	80 e1       	ldi	r24, 0x10	; 16
    30f4:	62 e9       	ldi	r22, 0x92	; 146
    30f6:	71 e0       	ldi	r23, 0x01	; 1
    30f8:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
			H_LCD_Void_LCDAccessDenied();
    30fc:	0e 94 61 11 	call	0x22c2	; 0x22c2 <H_LCD_Void_LCDAccessDenied>
    3100:	3f c2       	rjmp	.+1150   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			break;
/*************************************************-UART_USER-**************************************************/
		case UART_USER:
			switch(Global_A_U8_UARTInput)
    3102:	80 91 61 03 	lds	r24, 0x0361
    3106:	86 33       	cpi	r24, 0x36	; 54
    3108:	09 f4       	brne	.+2      	; 0x310c <A_UART_Void_UARTExecution+0x27e>
    310a:	60 c0       	rjmp	.+192    	; 0x31cc <A_UART_Void_UARTExecution+0x33e>
    310c:	87 33       	cpi	r24, 0x37	; 55
    310e:	78 f4       	brcc	.+30     	; 0x312e <A_UART_Void_UARTExecution+0x2a0>
    3110:	81 33       	cpi	r24, 0x31	; 49
    3112:	d1 f1       	breq	.+116    	; 0x3188 <A_UART_Void_UARTExecution+0x2fa>
    3114:	82 33       	cpi	r24, 0x32	; 50
    3116:	20 f4       	brcc	.+8      	; 0x3120 <A_UART_Void_UARTExecution+0x292>
    3118:	80 33       	cpi	r24, 0x30	; 48
    311a:	09 f0       	breq	.+2      	; 0x311e <A_UART_Void_UARTExecution+0x290>
    311c:	82 c0       	rjmp	.+260    	; 0x3222 <A_UART_Void_UARTExecution+0x394>
    311e:	1a c0       	rjmp	.+52     	; 0x3154 <A_UART_Void_UARTExecution+0x2c6>
    3120:	84 33       	cpi	r24, 0x34	; 52
    3122:	09 f4       	brne	.+2      	; 0x3126 <A_UART_Void_UARTExecution+0x298>
    3124:	4b c0       	rjmp	.+150    	; 0x31bc <A_UART_Void_UARTExecution+0x32e>
    3126:	85 33       	cpi	r24, 0x35	; 53
    3128:	09 f0       	breq	.+2      	; 0x312c <A_UART_Void_UARTExecution+0x29e>
    312a:	7b c0       	rjmp	.+246    	; 0x3222 <A_UART_Void_UARTExecution+0x394>
    312c:	4b c0       	rjmp	.+150    	; 0x31c4 <A_UART_Void_UARTExecution+0x336>
    312e:	89 33       	cpi	r24, 0x39	; 57
    3130:	09 f4       	brne	.+2      	; 0x3134 <A_UART_Void_UARTExecution+0x2a6>
    3132:	58 c0       	rjmp	.+176    	; 0x31e4 <A_UART_Void_UARTExecution+0x356>
    3134:	8a 33       	cpi	r24, 0x3A	; 58
    3136:	38 f4       	brcc	.+14     	; 0x3146 <A_UART_Void_UARTExecution+0x2b8>
    3138:	87 33       	cpi	r24, 0x37	; 55
    313a:	09 f4       	brne	.+2      	; 0x313e <A_UART_Void_UARTExecution+0x2b0>
    313c:	4b c0       	rjmp	.+150    	; 0x31d4 <A_UART_Void_UARTExecution+0x346>
    313e:	88 33       	cpi	r24, 0x38	; 56
    3140:	09 f0       	breq	.+2      	; 0x3144 <A_UART_Void_UARTExecution+0x2b6>
    3142:	6f c0       	rjmp	.+222    	; 0x3222 <A_UART_Void_UARTExecution+0x394>
    3144:	4b c0       	rjmp	.+150    	; 0x31dc <A_UART_Void_UARTExecution+0x34e>
    3146:	81 34       	cpi	r24, 0x41	; 65
    3148:	09 f4       	brne	.+2      	; 0x314c <A_UART_Void_UARTExecution+0x2be>
    314a:	5d c0       	rjmp	.+186    	; 0x3206 <A_UART_Void_UARTExecution+0x378>
    314c:	86 34       	cpi	r24, 0x46	; 70
    314e:	09 f0       	breq	.+2      	; 0x3152 <A_UART_Void_UARTExecution+0x2c4>
    3150:	68 c0       	rjmp	.+208    	; 0x3222 <A_UART_Void_UARTExecution+0x394>
    3152:	64 c0       	rjmp	.+200    	; 0x321c <A_UART_Void_UARTExecution+0x38e>
			{
			case ADMIN_LOGIN:
				M_UART_Void_UARTSendString(UART_STRING_SIZE4,"You have already signed in");
    3154:	8a e1       	ldi	r24, 0x1A	; 26
    3156:	63 ea       	ldi	r22, 0xA3	; 163
    3158:	71 e0       	ldi	r23, 0x01	; 1
    315a:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
				H_LCD_Void_LCDClear();
    315e:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
				H_LCD_Void_LCDGoTo(0,0);
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	60 e0       	ldi	r22, 0x00	; 0
    3166:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
				H_LCD_Void_LCDWriteString("U are signed in");
    316a:	8e eb       	ldi	r24, 0xBE	; 190
    316c:	91 e0       	ldi	r25, 0x01	; 1
    316e:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    3172:	20 e1       	ldi	r18, 0x10	; 16
    3174:	37 e2       	ldi	r19, 0x27	; 39
    3176:	40 e9       	ldi	r20, 0x90	; 144
    3178:	51 e0       	ldi	r21, 0x01	; 1
    317a:	ca 01       	movw	r24, r20
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <A_UART_Void_UARTExecution+0x2ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3180:	21 50       	subi	r18, 0x01	; 1
    3182:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3184:	d1 f7       	brne	.-12     	; 0x317a <A_UART_Void_UARTExecution+0x2ec>
    3186:	fc c1       	rjmp	.+1016   	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				_delay_ms(SECOND);
				break;
			case USER_LOGIN:
				M_UART_Void_UARTSendString(UART_STRING_SIZE4,"You have already signed in");
    3188:	8a e1       	ldi	r24, 0x1A	; 26
    318a:	63 ea       	ldi	r22, 0xA3	; 163
    318c:	71 e0       	ldi	r23, 0x01	; 1
    318e:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
				H_LCD_Void_LCDClear();
    3192:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
				H_LCD_Void_LCDGoTo(0,0);
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
				H_LCD_Void_LCDWriteString("U are signed in");
    319e:	8e eb       	ldi	r24, 0xBE	; 190
    31a0:	91 e0       	ldi	r25, 0x01	; 1
    31a2:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    31a6:	20 e1       	ldi	r18, 0x10	; 16
    31a8:	37 e2       	ldi	r19, 0x27	; 39
    31aa:	40 e9       	ldi	r20, 0x90	; 144
    31ac:	51 e0       	ldi	r21, 0x01	; 1
    31ae:	ca 01       	movw	r24, r20
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <A_UART_Void_UARTExecution+0x322>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b4:	21 50       	subi	r18, 0x01	; 1
    31b6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b8:	d1 f7       	brne	.-12     	; 0x31ae <A_UART_Void_UARTExecution+0x320>
    31ba:	e2 c1       	rjmp	.+964    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				_delay_ms(SECOND);
				break;
			case UART_TOGGLE_LAMP1:
				H_LED_Void_LedTog(LED1); break;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    31c2:	de c1       	rjmp	.+956    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			case UART_TOGGLE_LAMP2:
				H_LED_Void_LedTog(LED2); break;
    31c4:	82 e0       	ldi	r24, 0x02	; 2
    31c6:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    31ca:	da c1       	rjmp	.+948    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			case UART_TOGGLE_LAMP3:
				H_LED_Void_LedTog(LED3); break;
    31cc:	83 e0       	ldi	r24, 0x03	; 3
    31ce:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    31d2:	d6 c1       	rjmp	.+940    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			case UART_TOGGLE_LAMP4:
				H_LED_Void_LedTog(LED4); break;
    31d4:	84 e0       	ldi	r24, 0x04	; 4
    31d6:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    31da:	d2 c1       	rjmp	.+932    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			case UART_TOGGLE_LAMP5:
				H_LED_Void_LedTog(LED5); break;
    31dc:	85 e0       	ldi	r24, 0x05	; 5
    31de:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    31e2:	ce c1       	rjmp	.+924    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
			case UART_TOGGLE_DIMLAMP:
				if(Global_U8_DimLED == DIMMER_OFF)
    31e4:	80 91 5f 03 	lds	r24, 0x035F
    31e8:	88 23       	and	r24, r24
    31ea:	39 f4       	brne	.+14     	; 0x31fa <A_UART_Void_UARTExecution+0x36c>
				{
					M_Timer_Void_PWMStart(TIMER2_CHANNEL);
    31ec:	82 e0       	ldi	r24, 0x02	; 2
    31ee:	0e 94 ed 08 	call	0x11da	; 0x11da <M_Timer_Void_PWMStart>
					Global_U8_DimLED = DIMMER_ON;
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	80 93 5f 03 	sts	0x035F, r24
    31f8:	c3 c1       	rjmp	.+902    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				}
				else
				{
					M_Timer_Void_PWMStop(TIMER2_CHANNEL);
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <M_Timer_Void_PWMStop>
					Global_U8_DimLED = DIMMER_OFF;
    3200:	10 92 5f 03 	sts	0x035F, r1
    3204:	bd c1       	rjmp	.+890    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				}
				break;
			case UART_TOGGLE_AC:
				if(Global_U8_ACState == AC_OFF)
    3206:	80 91 60 03 	lds	r24, 0x0360
    320a:	88 23       	and	r24, r24
    320c:	21 f4       	brne	.+8      	; 0x3216 <A_UART_Void_UARTExecution+0x388>
					Global_U8_ACState = AC_ON;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	80 93 60 03 	sts	0x0360, r24
    3214:	b5 c1       	rjmp	.+874    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				else
					Global_U8_ACState = AC_OFF;
    3216:	10 92 60 03 	sts	0x0360, r1
    321a:	b2 c1       	rjmp	.+868    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				break;
			case UART_SIGN_OUT:
				Global_A_U8_Status = UNSIGNED_USER;
    321c:	10 92 5b 03 	sts	0x035B, r1
    3220:	af c1       	rjmp	.+862    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				break;
			default:
				M_UART_Void_UARTSendString(UART_STRING_SIZE3,"U dont ve access");
    3222:	80 e1       	ldi	r24, 0x10	; 16
    3224:	62 e9       	ldi	r22, 0x92	; 146
    3226:	71 e0       	ldi	r23, 0x01	; 1
    3228:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
				H_LCD_Void_LCDAccessDenied();
    322c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <H_LCD_Void_LCDAccessDenied>
    3230:	a7 c1       	rjmp	.+846    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				break;
			}
			break;
/*************************************************-ADMIN_USER-*************************************************/
			case ADMIN_USER:
				switch(Global_A_U8_UARTInput)
    3232:	80 91 61 03 	lds	r24, 0x0361
    3236:	87 33       	cpi	r24, 0x37	; 55
    3238:	09 f4       	brne	.+2      	; 0x323c <A_UART_Void_UARTExecution+0x3ae>
    323a:	26 c1       	rjmp	.+588    	; 0x3488 <A_UART_Void_UARTExecution+0x5fa>
    323c:	88 33       	cpi	r24, 0x38	; 56
    323e:	b0 f4       	brcc	.+44     	; 0x326c <A_UART_Void_UARTExecution+0x3de>
    3240:	83 33       	cpi	r24, 0x33	; 51
    3242:	09 f4       	brne	.+2      	; 0x3246 <A_UART_Void_UARTExecution+0x3b8>
    3244:	bc c0       	rjmp	.+376    	; 0x33be <A_UART_Void_UARTExecution+0x530>
    3246:	84 33       	cpi	r24, 0x34	; 52
    3248:	50 f4       	brcc	.+20     	; 0x325e <A_UART_Void_UARTExecution+0x3d0>
    324a:	81 33       	cpi	r24, 0x31	; 49
    324c:	09 f4       	brne	.+2      	; 0x3250 <A_UART_Void_UARTExecution+0x3c2>
    324e:	44 c0       	rjmp	.+136    	; 0x32d8 <A_UART_Void_UARTExecution+0x44a>
    3250:	82 33       	cpi	r24, 0x32	; 50
    3252:	08 f0       	brcs	.+2      	; 0x3256 <A_UART_Void_UARTExecution+0x3c8>
    3254:	5b c0       	rjmp	.+182    	; 0x330c <A_UART_Void_UARTExecution+0x47e>
    3256:	80 33       	cpi	r24, 0x30	; 48
    3258:	09 f0       	breq	.+2      	; 0x325c <A_UART_Void_UARTExecution+0x3ce>
    325a:	92 c1       	rjmp	.+804    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
    325c:	23 c0       	rjmp	.+70     	; 0x32a4 <A_UART_Void_UARTExecution+0x416>
    325e:	85 33       	cpi	r24, 0x35	; 53
    3260:	09 f4       	brne	.+2      	; 0x3264 <A_UART_Void_UARTExecution+0x3d6>
    3262:	0a c1       	rjmp	.+532    	; 0x3478 <A_UART_Void_UARTExecution+0x5ea>
    3264:	86 33       	cpi	r24, 0x36	; 54
    3266:	08 f0       	brcs	.+2      	; 0x326a <A_UART_Void_UARTExecution+0x3dc>
    3268:	0b c1       	rjmp	.+534    	; 0x3480 <A_UART_Void_UARTExecution+0x5f2>
    326a:	02 c1       	rjmp	.+516    	; 0x3470 <A_UART_Void_UARTExecution+0x5e2>
    326c:	82 34       	cpi	r24, 0x42	; 66
    326e:	09 f4       	brne	.+2      	; 0x3272 <A_UART_Void_UARTExecution+0x3e4>
    3270:	2f c1       	rjmp	.+606    	; 0x34d0 <A_UART_Void_UARTExecution+0x642>
    3272:	83 34       	cpi	r24, 0x43	; 67
    3274:	50 f4       	brcc	.+20     	; 0x328a <A_UART_Void_UARTExecution+0x3fc>
    3276:	89 33       	cpi	r24, 0x39	; 57
    3278:	09 f4       	brne	.+2      	; 0x327c <A_UART_Void_UARTExecution+0x3ee>
    327a:	0e c1       	rjmp	.+540    	; 0x3498 <A_UART_Void_UARTExecution+0x60a>
    327c:	89 33       	cpi	r24, 0x39	; 57
    327e:	08 f4       	brcc	.+2      	; 0x3282 <A_UART_Void_UARTExecution+0x3f4>
    3280:	07 c1       	rjmp	.+526    	; 0x3490 <A_UART_Void_UARTExecution+0x602>
    3282:	81 34       	cpi	r24, 0x41	; 65
    3284:	09 f0       	breq	.+2      	; 0x3288 <A_UART_Void_UARTExecution+0x3fa>
    3286:	7c c1       	rjmp	.+760    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
    3288:	18 c1       	rjmp	.+560    	; 0x34ba <A_UART_Void_UARTExecution+0x62c>
    328a:	84 34       	cpi	r24, 0x44	; 68
    328c:	09 f4       	brne	.+2      	; 0x3290 <A_UART_Void_UARTExecution+0x402>
    328e:	42 c1       	rjmp	.+644    	; 0x3514 <A_UART_Void_UARTExecution+0x686>
    3290:	84 34       	cpi	r24, 0x44	; 68
    3292:	08 f4       	brcc	.+2      	; 0x3296 <A_UART_Void_UARTExecution+0x408>
    3294:	32 c1       	rjmp	.+612    	; 0x34fa <A_UART_Void_UARTExecution+0x66c>
    3296:	85 34       	cpi	r24, 0x45	; 69
    3298:	09 f4       	brne	.+2      	; 0x329c <A_UART_Void_UARTExecution+0x40e>
    329a:	6b c1       	rjmp	.+726    	; 0x3572 <A_UART_Void_UARTExecution+0x6e4>
    329c:	86 34       	cpi	r24, 0x46	; 70
    329e:	09 f0       	breq	.+2      	; 0x32a2 <A_UART_Void_UARTExecution+0x414>
    32a0:	6f c1       	rjmp	.+734    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
    32a2:	6c c1       	rjmp	.+728    	; 0x357c <A_UART_Void_UARTExecution+0x6ee>
				{
				case ADMIN_LOGIN:
					M_UART_Void_UARTSendString(UART_STRING_SIZE4,"You have already signed in");
    32a4:	8a e1       	ldi	r24, 0x1A	; 26
    32a6:	63 ea       	ldi	r22, 0xA3	; 163
    32a8:	71 e0       	ldi	r23, 0x01	; 1
    32aa:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
					H_LCD_Void_LCDClear();
    32ae:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
					H_LCD_Void_LCDGoTo(0,0);
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	60 e0       	ldi	r22, 0x00	; 0
    32b6:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
					H_LCD_Void_LCDWriteString("U are signed in");
    32ba:	8e eb       	ldi	r24, 0xBE	; 190
    32bc:	91 e0       	ldi	r25, 0x01	; 1
    32be:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    32c2:	20 e1       	ldi	r18, 0x10	; 16
    32c4:	37 e2       	ldi	r19, 0x27	; 39
    32c6:	40 e9       	ldi	r20, 0x90	; 144
    32c8:	51 e0       	ldi	r21, 0x01	; 1
    32ca:	ca 01       	movw	r24, r20
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	f1 f7       	brne	.-4      	; 0x32cc <A_UART_Void_UARTExecution+0x43e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d0:	21 50       	subi	r18, 0x01	; 1
    32d2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d4:	d1 f7       	brne	.-12     	; 0x32ca <A_UART_Void_UARTExecution+0x43c>
    32d6:	54 c1       	rjmp	.+680    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					_delay_ms(SECOND);
					break;
				case USER_LOGIN:
					M_UART_Void_UARTSendString(UART_STRING_SIZE3,"You have already signed in");
    32d8:	80 e1       	ldi	r24, 0x10	; 16
    32da:	63 ea       	ldi	r22, 0xA3	; 163
    32dc:	71 e0       	ldi	r23, 0x01	; 1
    32de:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
					H_LCD_Void_LCDClear();
    32e2:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
					H_LCD_Void_LCDGoTo(0,0);
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
					H_LCD_Void_LCDWriteString("U are signed in");
    32ee:	8e eb       	ldi	r24, 0xBE	; 190
    32f0:	91 e0       	ldi	r25, 0x01	; 1
    32f2:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    32f6:	20 e1       	ldi	r18, 0x10	; 16
    32f8:	37 e2       	ldi	r19, 0x27	; 39
    32fa:	40 e9       	ldi	r20, 0x90	; 144
    32fc:	51 e0       	ldi	r21, 0x01	; 1
    32fe:	ca 01       	movw	r24, r20
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <A_UART_Void_UARTExecution+0x472>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	21 50       	subi	r18, 0x01	; 1
    3306:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3308:	d1 f7       	brne	.-12     	; 0x32fe <A_UART_Void_UARTExecution+0x470>
    330a:	3a c1       	rjmp	.+628    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					_delay_ms(SECOND);
					break;
				case NEW_UART_USER:
					H_LCD_Void_LCDClear();
    330c:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
					H_LCD_Void_LCDGoTo(0,0);
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
					H_LCD_Void_LCDWriteString("UserName:");
    3318:	87 e2       	ldi	r24, 0x27	; 39
    331a:	91 e0       	ldi	r25, 0x01	; 1
    331c:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
					M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new username: ");
    3320:	8c e1       	ldi	r24, 0x1C	; 28
    3322:	6e ec       	ldi	r22, 0xCE	; 206
    3324:	71 e0       	ldi	r23, 0x01	; 1
    3326:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
    332a:	10 e0       	ldi	r17, 0x00	; 0

					u8 Local_U8_UARTCounter = INITIAL_VALUE;
					while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
					{
						Local_U8_UARTUser[Local_U8_UARTCounter] = M_UART_Void_UARTRec();
    332c:	7e 01       	movw	r14, r28
    332e:	08 94       	sec
    3330:	e1 1c       	adc	r14, r1
    3332:	f1 1c       	adc	r15, r1
								H_LCD_Void_LCDGoTo(1,0);
								H_LCD_Void_LCDWriteString("Password: ");
							}
							else
							{
								H_LCD_Void_LCDWriteCharacter("*");
    3334:	0f 2e       	mov	r0, r31
    3336:	f5 e2       	ldi	r31, 0x25	; 37
    3338:	af 2e       	mov	r10, r31
    333a:	f1 e0       	ldi	r31, 0x01	; 1
    333c:	bf 2e       	mov	r11, r31
    333e:	f0 2d       	mov	r31, r0
							if(Local_U8_UARTCounter < USERNAME_SIZE-1)
								H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
							else if(Local_U8_UARTCounter == USERNAME_SIZE-1)
							{
								H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
								M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new password: ");
    3340:	0f 2e       	mov	r0, r31
    3342:	fb ee       	ldi	r31, 0xEB	; 235
    3344:	8f 2e       	mov	r8, r31
    3346:	f1 e0       	ldi	r31, 0x01	; 1
    3348:	9f 2e       	mov	r9, r31
    334a:	f0 2d       	mov	r31, r0
								H_LCD_Void_LCDGoTo(1,0);
								H_LCD_Void_LCDWriteString("Password: ");
    334c:	0f 2e       	mov	r0, r31
    334e:	fd e6       	ldi	r31, 0x6D	; 109
    3350:	6f 2e       	mov	r6, r31
    3352:	f1 e0       	ldi	r31, 0x01	; 1
    3354:	7f 2e       	mov	r7, r31
    3356:	f0 2d       	mov	r31, r0
    3358:	0f 2e       	mov	r0, r31
    335a:	f0 ea       	ldi	r31, 0xA0	; 160
    335c:	cf 2e       	mov	r12, r31
    335e:	ff e0       	ldi	r31, 0x0F	; 15
    3360:	df 2e       	mov	r13, r31
    3362:	f0 2d       	mov	r31, r0
					M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new username: ");

					u8 Local_U8_UARTCounter = INITIAL_VALUE;
					while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
					{
						Local_U8_UARTUser[Local_U8_UARTCounter] = M_UART_Void_UARTRec();
    3364:	0e 94 65 07 	call	0xeca	; 0xeca <M_UART_Void_UARTRec>
    3368:	f7 01       	movw	r30, r14
    336a:	e1 0f       	add	r30, r17
    336c:	f1 1d       	adc	r31, r1
    336e:	80 83       	st	Z, r24
						if(Local_U8_UARTUser[Local_U8_UARTCounter] != INITIAL_VALUE)
    3370:	88 23       	and	r24, r24
    3372:	c9 f0       	breq	.+50     	; 0x33a6 <A_UART_Void_UARTExecution+0x518>
						{
							if(Local_U8_UARTCounter < USERNAME_SIZE-1)
    3374:	13 30       	cpi	r17, 0x03	; 3
    3376:	18 f4       	brcc	.+6      	; 0x337e <A_UART_Void_UARTExecution+0x4f0>
								H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    3378:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
    337c:	13 c0       	rjmp	.+38     	; 0x33a4 <A_UART_Void_UARTExecution+0x516>
							else if(Local_U8_UARTCounter == USERNAME_SIZE-1)
    337e:	13 30       	cpi	r17, 0x03	; 3
    3380:	71 f4       	brne	.+28     	; 0x339e <A_UART_Void_UARTExecution+0x510>
							{
								H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    3382:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
								M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new password: ");
    3386:	8c e1       	ldi	r24, 0x1C	; 28
    3388:	b4 01       	movw	r22, r8
    338a:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
								H_LCD_Void_LCDGoTo(1,0);
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
								H_LCD_Void_LCDWriteString("Password: ");
    3396:	c3 01       	movw	r24, r6
    3398:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    339c:	03 c0       	rjmp	.+6      	; 0x33a4 <A_UART_Void_UARTExecution+0x516>
							}
							else
							{
								H_LCD_Void_LCDWriteCharacter("*");
    339e:	8a 2d       	mov	r24, r10
    33a0:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
							}
							Local_U8_UARTCounter++;
    33a4:	1f 5f       	subi	r17, 0xFF	; 255
    33a6:	c6 01       	movw	r24, r12
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <A_UART_Void_UARTExecution+0x51a>
					H_LCD_Void_LCDGoTo(0,0);
					H_LCD_Void_LCDWriteString("UserName:");
					M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new username: ");

					u8 Local_U8_UARTCounter = INITIAL_VALUE;
					while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
    33ac:	18 30       	cpi	r17, 0x08	; 8
    33ae:	d0 f2       	brcs	.-76     	; 0x3364 <A_UART_Void_UARTExecution+0x4d6>
							}
							Local_U8_UARTCounter++;
						}
						_delay_ms(1);
					}
					H_AT24C16A_U8_EEPROMNewUser(UART_USER,Local_U8_UARTUser);
    33b0:	82 e0       	ldi	r24, 0x02	; 2
    33b2:	be 01       	movw	r22, r28
    33b4:	6f 5f       	subi	r22, 0xFF	; 255
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <H_AT24C16A_U8_EEPROMNewUser>
    33bc:	e1 c0       	rjmp	.+450    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					break;
				case NEW_KEYPAD_USER:
					H_LCD_Void_LCDClear();
    33be:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
					H_LCD_Void_LCDGoTo(0,0);
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	60 e0       	ldi	r22, 0x00	; 0
    33c6:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
					H_LCD_Void_LCDWriteString("UserName:");
    33ca:	87 e2       	ldi	r24, 0x27	; 39
    33cc:	91 e0       	ldi	r25, 0x01	; 1
    33ce:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
					M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new username: ");
    33d2:	8c e1       	ldi	r24, 0x1C	; 28
    33d4:	6e ec       	ldi	r22, 0xCE	; 206
    33d6:	71 e0       	ldi	r23, 0x01	; 1
    33d8:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
    33dc:	10 e0       	ldi	r17, 0x00	; 0
					Local_U8_UARTCounter = INITIAL_VALUE;
					while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
					{
						Local_U8_UARTUser[Local_U8_UARTCounter] = M_UART_Void_UARTRec();
    33de:	7e 01       	movw	r14, r28
    33e0:	08 94       	sec
    33e2:	e1 1c       	adc	r14, r1
    33e4:	f1 1c       	adc	r15, r1
								H_LCD_Void_LCDGoTo(1,0);
								H_LCD_Void_LCDWriteString("Password: ");
							}
							else
							{
								H_LCD_Void_LCDWriteCharacter("*");
    33e6:	0f 2e       	mov	r0, r31
    33e8:	f5 e2       	ldi	r31, 0x25	; 37
    33ea:	af 2e       	mov	r10, r31
    33ec:	f1 e0       	ldi	r31, 0x01	; 1
    33ee:	bf 2e       	mov	r11, r31
    33f0:	f0 2d       	mov	r31, r0
							if(Local_U8_UARTCounter < USERNAME_SIZE-1)
								H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
							else if(Local_U8_UARTCounter == USERNAME_SIZE-1)
							{
								H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
								M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new password: ");
    33f2:	0f 2e       	mov	r0, r31
    33f4:	fb ee       	ldi	r31, 0xEB	; 235
    33f6:	8f 2e       	mov	r8, r31
    33f8:	f1 e0       	ldi	r31, 0x01	; 1
    33fa:	9f 2e       	mov	r9, r31
    33fc:	f0 2d       	mov	r31, r0
								H_LCD_Void_LCDGoTo(1,0);
								H_LCD_Void_LCDWriteString("Password: ");
    33fe:	0f 2e       	mov	r0, r31
    3400:	fd e6       	ldi	r31, 0x6D	; 109
    3402:	6f 2e       	mov	r6, r31
    3404:	f1 e0       	ldi	r31, 0x01	; 1
    3406:	7f 2e       	mov	r7, r31
    3408:	f0 2d       	mov	r31, r0
    340a:	0f 2e       	mov	r0, r31
    340c:	f0 ea       	ldi	r31, 0xA0	; 160
    340e:	cf 2e       	mov	r12, r31
    3410:	ff e0       	ldi	r31, 0x0F	; 15
    3412:	df 2e       	mov	r13, r31
    3414:	f0 2d       	mov	r31, r0
					H_LCD_Void_LCDWriteString("UserName:");
					M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new username: ");
					Local_U8_UARTCounter = INITIAL_VALUE;
					while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
					{
						Local_U8_UARTUser[Local_U8_UARTCounter] = M_UART_Void_UARTRec();
    3416:	0e 94 65 07 	call	0xeca	; 0xeca <M_UART_Void_UARTRec>
    341a:	f7 01       	movw	r30, r14
    341c:	e1 0f       	add	r30, r17
    341e:	f1 1d       	adc	r31, r1
    3420:	80 83       	st	Z, r24
						if(Local_U8_UARTUser[Local_U8_UARTCounter] != INITIAL_VALUE)
    3422:	88 23       	and	r24, r24
    3424:	c9 f0       	breq	.+50     	; 0x3458 <A_UART_Void_UARTExecution+0x5ca>
						{
							if(Local_U8_UARTCounter < USERNAME_SIZE-1)
    3426:	13 30       	cpi	r17, 0x03	; 3
    3428:	18 f4       	brcc	.+6      	; 0x3430 <A_UART_Void_UARTExecution+0x5a2>
								H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    342a:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
    342e:	13 c0       	rjmp	.+38     	; 0x3456 <A_UART_Void_UARTExecution+0x5c8>
							else if(Local_U8_UARTCounter == USERNAME_SIZE-1)
    3430:	13 30       	cpi	r17, 0x03	; 3
    3432:	71 f4       	brne	.+28     	; 0x3450 <A_UART_Void_UARTExecution+0x5c2>
							{
								H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    3434:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
								M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new password: ");
    3438:	8c e1       	ldi	r24, 0x1C	; 28
    343a:	b4 01       	movw	r22, r8
    343c:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
								H_LCD_Void_LCDGoTo(1,0);
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
								H_LCD_Void_LCDWriteString("Password: ");
    3448:	c3 01       	movw	r24, r6
    344a:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <A_UART_Void_UARTExecution+0x5c8>
							}
							else
							{
								H_LCD_Void_LCDWriteCharacter("*");
    3450:	8a 2d       	mov	r24, r10
    3452:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
							}
							Local_U8_UARTCounter++;
    3456:	1f 5f       	subi	r17, 0xFF	; 255
    3458:	c6 01       	movw	r24, r12
    345a:	01 97       	sbiw	r24, 0x01	; 1
    345c:	f1 f7       	brne	.-4      	; 0x345a <A_UART_Void_UARTExecution+0x5cc>
					H_LCD_Void_LCDClear();
					H_LCD_Void_LCDGoTo(0,0);
					H_LCD_Void_LCDWriteString("UserName:");
					M_UART_Void_UARTSendString(UART_STRING_SIZE5,"Please, Enter new username: ");
					Local_U8_UARTCounter = INITIAL_VALUE;
					while(Local_U8_UARTCounter <= USER_ARRAY_SIZE-1)
    345e:	18 30       	cpi	r17, 0x08	; 8
    3460:	d0 f2       	brcs	.-76     	; 0x3416 <A_UART_Void_UARTExecution+0x588>
							}
							Local_U8_UARTCounter++;
						}
						_delay_ms(1);
					}
					H_AT24C16A_U8_EEPROMNewUser(KEYPAD_USER,Local_U8_UARTUser);
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	be 01       	movw	r22, r28
    3466:	6f 5f       	subi	r22, 0xFF	; 255
    3468:	7f 4f       	sbci	r23, 0xFF	; 255
    346a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <H_AT24C16A_U8_EEPROMNewUser>
    346e:	88 c0       	rjmp	.+272    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					break;
				case UART_TOGGLE_LAMP1:
					H_LED_Void_LedTog(LED1); break;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    3476:	84 c0       	rjmp	.+264    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				case UART_TOGGLE_LAMP2:
					H_LED_Void_LedTog(LED2); break;
    3478:	82 e0       	ldi	r24, 0x02	; 2
    347a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    347e:	80 c0       	rjmp	.+256    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				case UART_TOGGLE_LAMP3:
					H_LED_Void_LedTog(LED3); break;
    3480:	83 e0       	ldi	r24, 0x03	; 3
    3482:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    3486:	7c c0       	rjmp	.+248    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				case UART_TOGGLE_LAMP4:
					H_LED_Void_LedTog(LED4); break;
    3488:	84 e0       	ldi	r24, 0x04	; 4
    348a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    348e:	78 c0       	rjmp	.+240    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				case UART_TOGGLE_LAMP5:
					H_LED_Void_LedTog(LED5); break;
    3490:	85 e0       	ldi	r24, 0x05	; 5
    3492:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    3496:	74 c0       	rjmp	.+232    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
				case UART_TOGGLE_DIMLAMP:
					if(Global_U8_DimLED == DIMMER_OFF)
    3498:	80 91 5f 03 	lds	r24, 0x035F
    349c:	88 23       	and	r24, r24
    349e:	39 f4       	brne	.+14     	; 0x34ae <A_UART_Void_UARTExecution+0x620>
					{
						M_Timer_Void_PWMStart(TIMER2_CHANNEL);
    34a0:	82 e0       	ldi	r24, 0x02	; 2
    34a2:	0e 94 ed 08 	call	0x11da	; 0x11da <M_Timer_Void_PWMStart>
						Global_U8_DimLED = DIMMER_ON;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	80 93 5f 03 	sts	0x035F, r24
    34ac:	69 c0       	rjmp	.+210    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					}
					else
					{
						M_Timer_Void_PWMStop(TIMER2_CHANNEL);
    34ae:	82 e0       	ldi	r24, 0x02	; 2
    34b0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <M_Timer_Void_PWMStop>
						Global_U8_DimLED = DIMMER_OFF;
    34b4:	10 92 5f 03 	sts	0x035F, r1
    34b8:	63 c0       	rjmp	.+198    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					}
					break;
				case UART_TOGGLE_AC:
					if(Global_U8_ACState == AC_OFF)
    34ba:	80 91 60 03 	lds	r24, 0x0360
    34be:	88 23       	and	r24, r24
    34c0:	21 f4       	brne	.+8      	; 0x34ca <A_UART_Void_UARTExecution+0x63c>
						Global_U8_ACState = AC_ON;
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	80 93 60 03 	sts	0x0360, r24
    34c8:	5b c0       	rjmp	.+182    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					else
						Global_U8_ACState = AC_OFF;
    34ca:	10 92 60 03 	sts	0x0360, r1
    34ce:	58 c0       	rjmp	.+176    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					break;
				case UART_TOGGLE_DOOR:
					if(Global_U8_DoorState == DOOR_CLOSED)
    34d0:	80 91 5e 03 	lds	r24, 0x035E
    34d4:	88 23       	and	r24, r24
    34d6:	49 f4       	brne	.+18     	; 0x34ea <A_UART_Void_UARTExecution+0x65c>
					{
						H_Servo_Void_ServoSetAngel(DOOR_OPEN_DEGREE);
    34d8:	84 eb       	ldi	r24, 0xB4	; 180
    34da:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <H_Servo_Void_ServoSetAngel>
						H_Servo_Void_ServoSetStart();
    34de:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <H_Servo_Void_ServoSetStart>
						Global_U8_DoorState = DOOR_OPEN;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	80 93 5e 03 	sts	0x035E, r24
    34e8:	4b c0       	rjmp	.+150    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					}
					else
					{
						H_Servo_Void_ServoSetAngel(DOOR_CLOSED_DEGREE);
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <H_Servo_Void_ServoSetAngel>
						H_Servo_Void_ServoSetStart();
    34f0:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <H_Servo_Void_ServoSetStart>
						Global_U8_DoorState = DOOR_CLOSED;
    34f4:	10 92 5e 03 	sts	0x035E, r1
    34f8:	43 c0       	rjmp	.+134    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					}
					break;
				case ADMIN_KEYPAD_ENABLE:
					if(Global_U8_AdminEnable == KEYPAD_ACCESS_DENIED)
    34fa:	80 91 5d 03 	lds	r24, 0x035D
    34fe:	88 23       	and	r24, r24
    3500:	21 f4       	brne	.+8      	; 0x350a <A_UART_Void_UARTExecution+0x67c>
						Global_U8_AdminEnable = KEYPAD_ACCESS_ACCEPTED;
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	80 93 5d 03 	sts	0x035D, r24
    3508:	3b c0       	rjmp	.+118    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					else if(Global_U8_AdminEnable == KEYPAD_ACCESS_ACCEPTED)
    350a:	81 30       	cpi	r24, 0x01	; 1
    350c:	c9 f5       	brne	.+114    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
						Global_U8_AdminEnable = KEYPAD_ACCESS_DENIED;
    350e:	10 92 5d 03 	sts	0x035D, r1
    3512:	36 c0       	rjmp	.+108    	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					break;
				case DELETE_USER:
					H_LCD_Void_LCDClear();
    3514:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>
					H_LCD_Void_LCDGoTo(0,0);
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	0e 94 95 10 	call	0x212a	; 0x212a <H_LCD_Void_LCDGoTo>
					H_LCD_Void_LCDWriteString("UserName:");
    3520:	87 e2       	ldi	r24, 0x27	; 39
    3522:	91 e0       	ldi	r25, 0x01	; 1
    3524:	0e 94 4c 11 	call	0x2298	; 0x2298 <H_LCD_Void_LCDWriteString>
					M_UART_Void_UARTSendString(UART_STRING_SIZE6,"Please, Enter username: ");
    3528:	88 e1       	ldi	r24, 0x18	; 24
    352a:	68 e0       	ldi	r22, 0x08	; 8
    352c:	72 e0       	ldi	r23, 0x02	; 2
    352e:	0e 94 73 07 	call	0xee6	; 0xee6 <M_UART_Void_UARTSendString>
    3532:	10 e0       	ldi	r17, 0x00	; 0
					Local_U8_UARTCounter = INITIAL_VALUE;
					while(Local_U8_UARTCounter <= USERNAME_SIZE-1)
					{
						Local_U8_UARTUser[Local_U8_UARTCounter] = M_UART_Void_UARTRec();
    3534:	7e 01       	movw	r14, r28
    3536:	08 94       	sec
    3538:	e1 1c       	adc	r14, r1
    353a:	f1 1c       	adc	r15, r1
    353c:	0f 2e       	mov	r0, r31
    353e:	f0 ea       	ldi	r31, 0xA0	; 160
    3540:	cf 2e       	mov	r12, r31
    3542:	ff e0       	ldi	r31, 0x0F	; 15
    3544:	df 2e       	mov	r13, r31
    3546:	f0 2d       	mov	r31, r0
    3548:	0e 94 65 07 	call	0xeca	; 0xeca <M_UART_Void_UARTRec>
    354c:	f7 01       	movw	r30, r14
    354e:	e1 0f       	add	r30, r17
    3550:	f1 1d       	adc	r31, r1
    3552:	80 83       	st	Z, r24
						if(Local_U8_UARTUser[Local_U8_UARTCounter] != INITIAL_VALUE)
    3554:	88 23       	and	r24, r24
    3556:	19 f0       	breq	.+6      	; 0x355e <A_UART_Void_UARTExecution+0x6d0>
						{
							H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
    3558:	0e 94 aa 10 	call	0x2154	; 0x2154 <H_LCD_Void_LCDWriteCharacter>
							Local_U8_UARTCounter++;
    355c:	1f 5f       	subi	r17, 0xFF	; 255
    355e:	c6 01       	movw	r24, r12
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <A_UART_Void_UARTExecution+0x6d2>
					H_LCD_Void_LCDClear();
					H_LCD_Void_LCDGoTo(0,0);
					H_LCD_Void_LCDWriteString("UserName:");
					M_UART_Void_UARTSendString(UART_STRING_SIZE6,"Please, Enter username: ");
					Local_U8_UARTCounter = INITIAL_VALUE;
					while(Local_U8_UARTCounter <= USERNAME_SIZE-1)
    3564:	14 30       	cpi	r17, 0x04	; 4
    3566:	80 f3       	brcs	.-32     	; 0x3548 <A_UART_Void_UARTExecution+0x6ba>
							H_LCD_Void_LCDWriteCharacter(Local_U8_UARTUser[Local_U8_UARTCounter]);
							Local_U8_UARTCounter++;
						}
						_delay_ms(1);
					}
					H_AT24C16A_U8_EEPROMDeleteUser(Local_U8_UARTUser);
    3568:	ce 01       	movw	r24, r28
    356a:	01 96       	adiw	r24, 0x01	; 1
    356c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <H_AT24C16A_U8_EEPROMDeleteUser>
    3570:	07 c0       	rjmp	.+14     	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					break;
				case UART_ALARM_ENABLE:
					M_UART_Void_UARTDeinit();
    3572:	0e 94 bc 07 	call	0xf78	; 0xf78 <M_UART_Void_UARTDeinit>
					H_Buzzer_Void_BuzzerAlarm();
    3576:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <H_Buzzer_Void_BuzzerAlarm>
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <A_UART_Void_UARTExecution+0x6f2>
					break;
				case UART_SIGN_OUT:
					Global_A_U8_Status=UNSIGNED_USER;
    357c:	10 92 5b 03 	sts	0x035B, r1
					break;
				}
				break;
	}
}
    3580:	28 96       	adiw	r28, 0x08	; 8
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	1f 91       	pop	r17
    3592:	ff 90       	pop	r15
    3594:	ef 90       	pop	r14
    3596:	df 90       	pop	r13
    3598:	cf 90       	pop	r12
    359a:	bf 90       	pop	r11
    359c:	af 90       	pop	r10
    359e:	9f 90       	pop	r9
    35a0:	8f 90       	pop	r8
    35a2:	7f 90       	pop	r7
    35a4:	6f 90       	pop	r6
    35a6:	08 95       	ret

000035a8 <main>:
u8 Global_U8_DoorState = INITIAL_VALUE;
u8 Global_U8_DimLED = INITIAL_VALUE;
u8 Global_U8_ACState = INITIAL_VALUE;
/*************************************************-MAIN_FUNCTION-**************************************************/
int main()
{
    35a8:	ff 92       	push	r15
    35aa:	0f 93       	push	r16
    35ac:	1f 93       	push	r17
/*************************************************-DRIVERS_INITILIZATION-******************************************/
	H_AT24C16A_Void_EEPROMInit();
    35ae:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <H_AT24C16A_Void_EEPROMInit>
	M_GIE_Void_GlobalInterruptEnable();
    35b2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <M_GIE_Void_GlobalInterruptEnable>
	M_Timer_Void_TimerInit(TIMER0_CHANNEL);
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <M_Timer_Void_TimerInit>
	H_KeyPad_Void_KeyPadInit();
    35bc:	0e 94 8a 14 	call	0x2914	; 0x2914 <H_KeyPad_Void_KeyPadInit>
	M_UART_Void_UARTInit();
    35c0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <M_UART_Void_UARTInit>
	H_LCD_Void_LCDInit();
    35c4:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <H_LCD_Void_LCDInit>
	H_LED_Void_LedInit(LED1);
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	0e 94 0e 10 	call	0x201c	; 0x201c <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED2);
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	0e 94 0e 10 	call	0x201c	; 0x201c <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED3);
    35d4:	83 e0       	ldi	r24, 0x03	; 3
    35d6:	0e 94 0e 10 	call	0x201c	; 0x201c <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED4);
    35da:	84 e0       	ldi	r24, 0x04	; 4
    35dc:	0e 94 0e 10 	call	0x201c	; 0x201c <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED5);
    35e0:	85 e0       	ldi	r24, 0x05	; 5
    35e2:	0e 94 0e 10 	call	0x201c	; 0x201c <H_LED_Void_LedInit>
	M_ADC_Void_ADCInit();
    35e6:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <M_ADC_Void_ADCInit>
	H_Servo_Void_ServoInit();
    35ea:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <H_Servo_Void_ServoInit>
	M_Timer_Void_PWMInit(TIMER1_CHANNEL);
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Timer_Void_PWMInit>
	M_Timer_Void_PWMInit(TIMER2_CHANNEL);
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Timer_Void_PWMInit>
	H_LCD_Void_SetCallBack(A_LCD_Execution);
    35fa:	84 e3       	ldi	r24, 0x34	; 52
    35fc:	97 e1       	ldi	r25, 0x17	; 23
    35fe:	0e 94 3c 10 	call	0x2078	; 0x2078 <H_LCD_Void_SetCallBack>
	M_Timer_Void_TimerSetTime(TIMER0_CHANNEL,TIMER_INTERVAL);
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	48 ee       	ldi	r20, 0xE8	; 232
    3606:	53 e0       	ldi	r21, 0x03	; 3
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <M_Timer_Void_TimerSetTime>
	M_Timer_Void_TimerStart(TIMER0_CHANNEL);
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	0e 94 21 08 	call	0x1042	; 0x1042 <M_Timer_Void_TimerStart>
	M_Timer_Void_SetCallBack(TIMER0_CHANNEL,A_Timer0_Execution);
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	68 ef       	ldi	r22, 0xF8	; 248
    361a:	76 e1       	ldi	r23, 0x16	; 22
    361c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <M_Timer_Void_SetCallBack>
	M_UART_Void_UARTSetCallBack(A_UART_Void_UARTExecution);
    3620:	87 e4       	ldi	r24, 0x47	; 71
    3622:	97 e1       	ldi	r25, 0x17	; 23
    3624:	0e 94 6e 07 	call	0xedc	; 0xedc <M_UART_Void_UARTSetCallBack>
	H_KeyPad_Void_SetCallBack(A_KeyPad_Execution);
    3628:	8a e1       	ldi	r24, 0x1A	; 26
    362a:	97 e1       	ldi	r25, 0x17	; 23
    362c:	0e 94 16 13 	call	0x262c	; 0x262c <H_KeyPad_Void_SetCallBack>
	H_DCMotor_Void_ACMotorInit();
    3630:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <H_DCMotor_Void_ACMotorInit>
				H_LED_Void_LedTog(LED5); 				break;
			case KP_TOGGLE_DIMLAMP:
				if(Global_U8_DimLED == DIMMER_OFF)
				{
					M_Timer_Void_PWMStart(TIMER2_CHANNEL);
					Global_U8_DimLED = DIMMER_ON;
    3634:	ff 24       	eor	r15, r15
    3636:	f3 94       	inc	r15
    3638:	e0 c0       	rjmp	.+448    	; 0x37fa <main+0x252>
	/*************************************************-MAIN_LOOP-*****************************************************/
	u8 Local_U8_Options = INITIAL_VALUE;
	u8 *Local_U8_ArrUserPtr;
	while(Global_U8_Trials <= ALLOWED_TRIALS)
	{
		Local_U8_Options = H_LCD_Void_LCDWelcome();
    363a:	0e 94 b5 11 	call	0x236a	; 0x236a <H_LCD_Void_LCDWelcome>
    363e:	08 2f       	mov	r16, r24
/*************************************************-kEYPAD_INTERRUPTION-*******************************************/
		H_LCD_Void_LCDClear();
    3640:	0e 94 91 10 	call	0x2122	; 0x2122 <H_LCD_Void_LCDClear>

		switch(Global_A_U8_Status)
    3644:	80 91 5b 03 	lds	r24, 0x035B
    3648:	81 30       	cpi	r24, 0x01	; 1
    364a:	f9 f0       	breq	.+62     	; 0x368a <main+0xe2>
    364c:	81 30       	cpi	r24, 0x01	; 1
    364e:	38 f0       	brcs	.+14     	; 0x365e <main+0xb6>
    3650:	82 30       	cpi	r24, 0x02	; 2
    3652:	09 f4       	brne	.+2      	; 0x3656 <main+0xae>
    3654:	61 c0       	rjmp	.+194    	; 0x3718 <main+0x170>
    3656:	83 30       	cpi	r24, 0x03	; 3
    3658:	09 f0       	breq	.+2      	; 0x365c <main+0xb4>
    365a:	cf c0       	rjmp	.+414    	; 0x37fa <main+0x252>
    365c:	60 c0       	rjmp	.+192    	; 0x371e <main+0x176>
		{
		case UNSIGNED_USER:
			Local_U8_ArrUserPtr = H_KeyPad_U8_KeyPadGetUser(Local_U8_Options);
    365e:	80 2f       	mov	r24, r16
    3660:	0e 94 98 13 	call	0x2730	; 0x2730 <H_KeyPad_U8_KeyPadGetUser>
    3664:	8c 01       	movw	r16, r24
			Global_A_U8_Status = H_AT24C16A_U8_EEPROMUserCheck(Local_U8_ArrUserPtr);
    3666:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <H_AT24C16A_U8_EEPROMUserCheck>
    366a:	80 93 5b 03 	sts	0x035B, r24
			H_LCD_Void_LCDUserCheck(Local_U8_ArrUserPtr);
    366e:	c8 01       	movw	r24, r16
    3670:	0e 94 76 11 	call	0x22ec	; 0x22ec <H_LCD_Void_LCDUserCheck>
			if(Global_A_U8_Status == INVALID_USER)
    3674:	80 91 5b 03 	lds	r24, 0x035B
    3678:	88 23       	and	r24, r24
    367a:	09 f0       	breq	.+2      	; 0x367e <main+0xd6>
    367c:	be c0       	rjmp	.+380    	; 0x37fa <main+0x252>
				Global_U8_Trials++;
    367e:	80 91 5c 03 	lds	r24, 0x035C
    3682:	8f 5f       	subi	r24, 0xFF	; 255
    3684:	80 93 5c 03 	sts	0x035C, r24
    3688:	b8 c0       	rjmp	.+368    	; 0x37fa <main+0x252>
			break;
		case KEYPAD_USER:

			switch(Local_U8_Options)
    368a:	03 33       	cpi	r16, 0x33	; 51
    368c:	e1 f0       	breq	.+56     	; 0x36c6 <main+0x11e>
    368e:	04 33       	cpi	r16, 0x34	; 52
    3690:	40 f4       	brcc	.+16     	; 0x36a2 <main+0xfa>
    3692:	01 33       	cpi	r16, 0x31	; 49
    3694:	81 f0       	breq	.+32     	; 0x36b6 <main+0x10e>
    3696:	02 33       	cpi	r16, 0x32	; 50
    3698:	90 f4       	brcc	.+36     	; 0x36be <main+0x116>
    369a:	00 33       	cpi	r16, 0x30	; 48
    369c:	09 f0       	breq	.+2      	; 0x36a0 <main+0xf8>
    369e:	ad c0       	rjmp	.+346    	; 0x37fa <main+0x252>
    36a0:	38 c0       	rjmp	.+112    	; 0x3712 <main+0x16a>
    36a2:	05 33       	cpi	r16, 0x35	; 53
    36a4:	c1 f0       	breq	.+48     	; 0x36d6 <main+0x12e>
    36a6:	05 33       	cpi	r16, 0x35	; 53
    36a8:	90 f0       	brcs	.+36     	; 0x36ce <main+0x126>
    36aa:	06 33       	cpi	r16, 0x36	; 54
    36ac:	c1 f0       	breq	.+48     	; 0x36de <main+0x136>
    36ae:	07 33       	cpi	r16, 0x37	; 55
    36b0:	09 f0       	breq	.+2      	; 0x36b4 <main+0x10c>
    36b2:	a3 c0       	rjmp	.+326    	; 0x37fa <main+0x252>
    36b4:	24 c0       	rjmp	.+72     	; 0x36fe <main+0x156>
			{
			case KP_TOGGLE_LAMP1:
				H_LED_Void_LedTog(LED1); 				break;
    36b6:	8f 2d       	mov	r24, r15
    36b8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    36bc:	9e c0       	rjmp	.+316    	; 0x37fa <main+0x252>
			case KP_TOGGLE_LAMP2:
				H_LED_Void_LedTog(LED2); 				break;
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    36c4:	9a c0       	rjmp	.+308    	; 0x37fa <main+0x252>
			case KP_TOGGLE_LAMP3:
				H_LED_Void_LedTog(LED3); 				break;
    36c6:	83 e0       	ldi	r24, 0x03	; 3
    36c8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    36cc:	96 c0       	rjmp	.+300    	; 0x37fa <main+0x252>
			case KP_TOGGLE_LAMP4:
				H_LED_Void_LedTog(LED4); 				break;
    36ce:	84 e0       	ldi	r24, 0x04	; 4
    36d0:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    36d4:	92 c0       	rjmp	.+292    	; 0x37fa <main+0x252>
			case KP_TOGGLE_LAMP5:
				H_LED_Void_LedTog(LED5); 				break;
    36d6:	85 e0       	ldi	r24, 0x05	; 5
    36d8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    36dc:	8e c0       	rjmp	.+284    	; 0x37fa <main+0x252>
			case KP_TOGGLE_DIMLAMP:
				if(Global_U8_DimLED == DIMMER_OFF)
    36de:	80 91 5f 03 	lds	r24, 0x035F
    36e2:	88 23       	and	r24, r24
    36e4:	31 f4       	brne	.+12     	; 0x36f2 <main+0x14a>
				{
					M_Timer_Void_PWMStart(TIMER2_CHANNEL);
    36e6:	82 e0       	ldi	r24, 0x02	; 2
    36e8:	0e 94 ed 08 	call	0x11da	; 0x11da <M_Timer_Void_PWMStart>
					Global_U8_DimLED = DIMMER_ON;
    36ec:	f0 92 5f 03 	sts	0x035F, r15
    36f0:	84 c0       	rjmp	.+264    	; 0x37fa <main+0x252>
				}
				else
				{
					M_Timer_Void_PWMStop(TIMER2_CHANNEL);
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <M_Timer_Void_PWMStop>
					Global_U8_DimLED = DIMMER_OFF;
    36f8:	10 92 5f 03 	sts	0x035F, r1
    36fc:	7e c0       	rjmp	.+252    	; 0x37fa <main+0x252>
				}
				break;
			case KP_TOGGLE_AC:
				if(Global_U8_ACState == AC_OFF)
    36fe:	80 91 60 03 	lds	r24, 0x0360
    3702:	88 23       	and	r24, r24
    3704:	19 f4       	brne	.+6      	; 0x370c <main+0x164>
					Global_U8_ACState = AC_ON;
    3706:	f0 92 60 03 	sts	0x0360, r15
    370a:	77 c0       	rjmp	.+238    	; 0x37fa <main+0x252>
				else
					Global_U8_ACState = AC_OFF;
    370c:	10 92 60 03 	sts	0x0360, r1
    3710:	74 c0       	rjmp	.+232    	; 0x37fa <main+0x252>
				break;
			case KP_SIGN_OUT:
				Global_A_U8_Status = UNSIGNED_USER;    break;
    3712:	10 92 5b 03 	sts	0x035B, r1
    3716:	71 c0       	rjmp	.+226    	; 0x37fa <main+0x252>
			}

			break;
			case UART_USER:
				H_LCD_Void_LCDAccessDenied();		   break;
    3718:	0e 94 61 11 	call	0x22c2	; 0x22c2 <H_LCD_Void_LCDAccessDenied>
    371c:	6e c0       	rjmp	.+220    	; 0x37fa <main+0x252>

			case ADMIN_USER:
				if(Local_U8_Options!=INITIAL_VALUE)
    371e:	00 23       	and	r16, r16
    3720:	09 f4       	brne	.+2      	; 0x3724 <main+0x17c>
    3722:	6b c0       	rjmp	.+214    	; 0x37fa <main+0x252>
				{
					switch(Global_U8_AdminEnable)
    3724:	80 91 5d 03 	lds	r24, 0x035D
    3728:	88 23       	and	r24, r24
    372a:	09 f4       	brne	.+2      	; 0x372e <main+0x186>
    372c:	64 c0       	rjmp	.+200    	; 0x37f6 <main+0x24e>
    372e:	81 30       	cpi	r24, 0x01	; 1
    3730:	09 f0       	breq	.+2      	; 0x3734 <main+0x18c>
    3732:	63 c0       	rjmp	.+198    	; 0x37fa <main+0x252>
					{
					case KEYPAD_ACCESS_ACCEPTED:
						switch(Local_U8_Options)
    3734:	04 33       	cpi	r16, 0x34	; 52
    3736:	31 f1       	breq	.+76     	; 0x3784 <main+0x1dc>
    3738:	05 33       	cpi	r16, 0x35	; 53
    373a:	70 f4       	brcc	.+28     	; 0x3758 <main+0x1b0>
    373c:	01 33       	cpi	r16, 0x31	; 49
    373e:	b1 f0       	breq	.+44     	; 0x376c <main+0x1c4>
    3740:	02 33       	cpi	r16, 0x32	; 50
    3742:	20 f4       	brcc	.+8      	; 0x374c <main+0x1a4>
    3744:	00 33       	cpi	r16, 0x30	; 48
    3746:	09 f0       	breq	.+2      	; 0x374a <main+0x1a2>
    3748:	58 c0       	rjmp	.+176    	; 0x37fa <main+0x252>
    374a:	52 c0       	rjmp	.+164    	; 0x37f0 <main+0x248>
    374c:	02 33       	cpi	r16, 0x32	; 50
    374e:	91 f0       	breq	.+36     	; 0x3774 <main+0x1cc>
    3750:	03 33       	cpi	r16, 0x33	; 51
    3752:	09 f0       	breq	.+2      	; 0x3756 <main+0x1ae>
    3754:	52 c0       	rjmp	.+164    	; 0x37fa <main+0x252>
    3756:	12 c0       	rjmp	.+36     	; 0x377c <main+0x1d4>
    3758:	06 33       	cpi	r16, 0x36	; 54
    375a:	e1 f0       	breq	.+56     	; 0x3794 <main+0x1ec>
    375c:	06 33       	cpi	r16, 0x36	; 54
    375e:	b0 f0       	brcs	.+44     	; 0x378c <main+0x1e4>
    3760:	07 33       	cpi	r16, 0x37	; 55
    3762:	41 f1       	breq	.+80     	; 0x37b4 <main+0x20c>
    3764:	08 33       	cpi	r16, 0x38	; 56
    3766:	09 f0       	breq	.+2      	; 0x376a <main+0x1c2>
    3768:	48 c0       	rjmp	.+144    	; 0x37fa <main+0x252>
    376a:	2e c0       	rjmp	.+92     	; 0x37c8 <main+0x220>
						{
						case KP_TOGGLE_LAMP1:
							H_LED_Void_LedTog(LED1); break;
    376c:	8f 2d       	mov	r24, r15
    376e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    3772:	43 c0       	rjmp	.+134    	; 0x37fa <main+0x252>
						case KP_TOGGLE_LAMP2:
							H_LED_Void_LedTog(LED2); break;
    3774:	82 e0       	ldi	r24, 0x02	; 2
    3776:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    377a:	3f c0       	rjmp	.+126    	; 0x37fa <main+0x252>
						case KP_TOGGLE_LAMP3:
							H_LED_Void_LedTog(LED3); break;
    377c:	83 e0       	ldi	r24, 0x03	; 3
    377e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    3782:	3b c0       	rjmp	.+118    	; 0x37fa <main+0x252>
						case KP_TOGGLE_LAMP4:
							H_LED_Void_LedTog(LED4); break;
    3784:	84 e0       	ldi	r24, 0x04	; 4
    3786:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    378a:	37 c0       	rjmp	.+110    	; 0x37fa <main+0x252>
						case KP_TOGGLE_LAMP5:
							H_LED_Void_LedTog(LED5); break;
    378c:	85 e0       	ldi	r24, 0x05	; 5
    378e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <H_LED_Void_LedTog>
    3792:	33 c0       	rjmp	.+102    	; 0x37fa <main+0x252>
						case KP_TOGGLE_DIMLAMP:
							if(Global_U8_DimLED == DIMMER_OFF)
    3794:	80 91 5f 03 	lds	r24, 0x035F
    3798:	88 23       	and	r24, r24
    379a:	31 f4       	brne	.+12     	; 0x37a8 <main+0x200>
							{
								M_Timer_Void_PWMStart(TIMER2_CHANNEL);
    379c:	82 e0       	ldi	r24, 0x02	; 2
    379e:	0e 94 ed 08 	call	0x11da	; 0x11da <M_Timer_Void_PWMStart>
								Global_U8_DimLED = DIMMER_ON;
    37a2:	f0 92 5f 03 	sts	0x035F, r15
    37a6:	29 c0       	rjmp	.+82     	; 0x37fa <main+0x252>
							}
							else
							{
								M_Timer_Void_PWMStop(TIMER2_CHANNEL);
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <M_Timer_Void_PWMStop>
								Global_U8_DimLED = DIMMER_OFF;
    37ae:	10 92 5f 03 	sts	0x035F, r1
    37b2:	23 c0       	rjmp	.+70     	; 0x37fa <main+0x252>
							}
							break;
						case KP_TOGGLE_AC:
							if(Global_U8_ACState == AC_OFF)
    37b4:	80 91 60 03 	lds	r24, 0x0360
    37b8:	88 23       	and	r24, r24
    37ba:	19 f4       	brne	.+6      	; 0x37c2 <main+0x21a>
								Global_U8_ACState = AC_ON;
    37bc:	f0 92 60 03 	sts	0x0360, r15
    37c0:	1c c0       	rjmp	.+56     	; 0x37fa <main+0x252>
							else
								Global_U8_ACState = AC_OFF;
    37c2:	10 92 60 03 	sts	0x0360, r1
    37c6:	19 c0       	rjmp	.+50     	; 0x37fa <main+0x252>
							break;
						case KP_TOGGLE_DOOR:
							if(Global_U8_DoorState == DOOR_CLOSED)
    37c8:	80 91 5e 03 	lds	r24, 0x035E
    37cc:	88 23       	and	r24, r24
    37ce:	41 f4       	brne	.+16     	; 0x37e0 <main+0x238>
							{
								H_Servo_Void_ServoSetAngel(DOOR_OPEN_DEGREE);
    37d0:	84 eb       	ldi	r24, 0xB4	; 180
    37d2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <H_Servo_Void_ServoSetAngel>
								H_Servo_Void_ServoSetStart();
    37d6:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <H_Servo_Void_ServoSetStart>
								Global_U8_DoorState = DOOR_OPEN;
    37da:	f0 92 5e 03 	sts	0x035E, r15
    37de:	0d c0       	rjmp	.+26     	; 0x37fa <main+0x252>
							}
							else
							{
								H_Servo_Void_ServoSetAngel(DOOR_CLOSED_DEGREE);
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <H_Servo_Void_ServoSetAngel>
								H_Servo_Void_ServoSetStart();
    37e6:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <H_Servo_Void_ServoSetStart>
								Global_U8_DoorState = DOOR_CLOSED;
    37ea:	10 92 5e 03 	sts	0x035E, r1
    37ee:	05 c0       	rjmp	.+10     	; 0x37fa <main+0x252>
							break;
						case KP_ALARM_ENABLE:

							break;
						case KP_SIGN_OUT:
							Global_A_U8_Status = UNSIGNED_USER;    break;
    37f0:	10 92 5b 03 	sts	0x035B, r1
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <main+0x252>
						}

						break;
						case KEYPAD_ACCESS_DENIED:
							H_LCD_Void_LCDAccessDenied(); break;
    37f6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <H_LCD_Void_LCDAccessDenied>
	H_KeyPad_Void_SetCallBack(A_KeyPad_Execution);
	H_DCMotor_Void_ACMotorInit();
	/*************************************************-MAIN_LOOP-*****************************************************/
	u8 Local_U8_Options = INITIAL_VALUE;
	u8 *Local_U8_ArrUserPtr;
	while(Global_U8_Trials <= ALLOWED_TRIALS)
    37fa:	80 91 5c 03 	lds	r24, 0x035C
    37fe:	83 30       	cpi	r24, 0x03	; 3
    3800:	08 f4       	brcc	.+2      	; 0x3804 <main+0x25c>
    3802:	1b cf       	rjmp	.-458    	; 0x363a <main+0x92>
					}
				}
				break;
		}
	}
	M_UART_Void_UARTDeinit();
    3804:	0e 94 bc 07 	call	0xf78	; 0xf78 <M_UART_Void_UARTDeinit>
	H_Buzzer_Void_BuzzerAlarm();
    3808:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <H_Buzzer_Void_BuzzerAlarm>
}
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	ff 90       	pop	r15
    3816:	08 95       	ret

00003818 <__mulsi3>:
    3818:	62 9f       	mul	r22, r18
    381a:	d0 01       	movw	r26, r0
    381c:	73 9f       	mul	r23, r19
    381e:	f0 01       	movw	r30, r0
    3820:	82 9f       	mul	r24, r18
    3822:	e0 0d       	add	r30, r0
    3824:	f1 1d       	adc	r31, r1
    3826:	64 9f       	mul	r22, r20
    3828:	e0 0d       	add	r30, r0
    382a:	f1 1d       	adc	r31, r1
    382c:	92 9f       	mul	r25, r18
    382e:	f0 0d       	add	r31, r0
    3830:	83 9f       	mul	r24, r19
    3832:	f0 0d       	add	r31, r0
    3834:	74 9f       	mul	r23, r20
    3836:	f0 0d       	add	r31, r0
    3838:	65 9f       	mul	r22, r21
    383a:	f0 0d       	add	r31, r0
    383c:	99 27       	eor	r25, r25
    383e:	72 9f       	mul	r23, r18
    3840:	b0 0d       	add	r27, r0
    3842:	e1 1d       	adc	r30, r1
    3844:	f9 1f       	adc	r31, r25
    3846:	63 9f       	mul	r22, r19
    3848:	b0 0d       	add	r27, r0
    384a:	e1 1d       	adc	r30, r1
    384c:	f9 1f       	adc	r31, r25
    384e:	bd 01       	movw	r22, r26
    3850:	cf 01       	movw	r24, r30
    3852:	11 24       	eor	r1, r1
    3854:	08 95       	ret

00003856 <__udivmodqi4>:
    3856:	99 1b       	sub	r25, r25
    3858:	79 e0       	ldi	r23, 0x09	; 9
    385a:	04 c0       	rjmp	.+8      	; 0x3864 <__udivmodqi4_ep>

0000385c <__udivmodqi4_loop>:
    385c:	99 1f       	adc	r25, r25
    385e:	96 17       	cp	r25, r22
    3860:	08 f0       	brcs	.+2      	; 0x3864 <__udivmodqi4_ep>
    3862:	96 1b       	sub	r25, r22

00003864 <__udivmodqi4_ep>:
    3864:	88 1f       	adc	r24, r24
    3866:	7a 95       	dec	r23
    3868:	c9 f7       	brne	.-14     	; 0x385c <__udivmodqi4_loop>
    386a:	80 95       	com	r24
    386c:	08 95       	ret

0000386e <__udivmodhi4>:
    386e:	aa 1b       	sub	r26, r26
    3870:	bb 1b       	sub	r27, r27
    3872:	51 e1       	ldi	r21, 0x11	; 17
    3874:	07 c0       	rjmp	.+14     	; 0x3884 <__udivmodhi4_ep>

00003876 <__udivmodhi4_loop>:
    3876:	aa 1f       	adc	r26, r26
    3878:	bb 1f       	adc	r27, r27
    387a:	a6 17       	cp	r26, r22
    387c:	b7 07       	cpc	r27, r23
    387e:	10 f0       	brcs	.+4      	; 0x3884 <__udivmodhi4_ep>
    3880:	a6 1b       	sub	r26, r22
    3882:	b7 0b       	sbc	r27, r23

00003884 <__udivmodhi4_ep>:
    3884:	88 1f       	adc	r24, r24
    3886:	99 1f       	adc	r25, r25
    3888:	5a 95       	dec	r21
    388a:	a9 f7       	brne	.-22     	; 0x3876 <__udivmodhi4_loop>
    388c:	80 95       	com	r24
    388e:	90 95       	com	r25
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	08 95       	ret

00003896 <__udivmodsi4>:
    3896:	a1 e2       	ldi	r26, 0x21	; 33
    3898:	1a 2e       	mov	r1, r26
    389a:	aa 1b       	sub	r26, r26
    389c:	bb 1b       	sub	r27, r27
    389e:	fd 01       	movw	r30, r26
    38a0:	0d c0       	rjmp	.+26     	; 0x38bc <__udivmodsi4_ep>

000038a2 <__udivmodsi4_loop>:
    38a2:	aa 1f       	adc	r26, r26
    38a4:	bb 1f       	adc	r27, r27
    38a6:	ee 1f       	adc	r30, r30
    38a8:	ff 1f       	adc	r31, r31
    38aa:	a2 17       	cp	r26, r18
    38ac:	b3 07       	cpc	r27, r19
    38ae:	e4 07       	cpc	r30, r20
    38b0:	f5 07       	cpc	r31, r21
    38b2:	20 f0       	brcs	.+8      	; 0x38bc <__udivmodsi4_ep>
    38b4:	a2 1b       	sub	r26, r18
    38b6:	b3 0b       	sbc	r27, r19
    38b8:	e4 0b       	sbc	r30, r20
    38ba:	f5 0b       	sbc	r31, r21

000038bc <__udivmodsi4_ep>:
    38bc:	66 1f       	adc	r22, r22
    38be:	77 1f       	adc	r23, r23
    38c0:	88 1f       	adc	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	1a 94       	dec	r1
    38c6:	69 f7       	brne	.-38     	; 0x38a2 <__udivmodsi4_loop>
    38c8:	60 95       	com	r22
    38ca:	70 95       	com	r23
    38cc:	80 95       	com	r24
    38ce:	90 95       	com	r25
    38d0:	9b 01       	movw	r18, r22
    38d2:	ac 01       	movw	r20, r24
    38d4:	bd 01       	movw	r22, r26
    38d6:	cf 01       	movw	r24, r30
    38d8:	08 95       	ret

000038da <__divmodsi4>:
    38da:	97 fb       	bst	r25, 7
    38dc:	09 2e       	mov	r0, r25
    38de:	05 26       	eor	r0, r21
    38e0:	0e d0       	rcall	.+28     	; 0x38fe <__divmodsi4_neg1>
    38e2:	57 fd       	sbrc	r21, 7
    38e4:	04 d0       	rcall	.+8      	; 0x38ee <__divmodsi4_neg2>
    38e6:	d7 df       	rcall	.-82     	; 0x3896 <__udivmodsi4>
    38e8:	0a d0       	rcall	.+20     	; 0x38fe <__divmodsi4_neg1>
    38ea:	00 1c       	adc	r0, r0
    38ec:	38 f4       	brcc	.+14     	; 0x38fc <__divmodsi4_exit>

000038ee <__divmodsi4_neg2>:
    38ee:	50 95       	com	r21
    38f0:	40 95       	com	r20
    38f2:	30 95       	com	r19
    38f4:	21 95       	neg	r18
    38f6:	3f 4f       	sbci	r19, 0xFF	; 255
    38f8:	4f 4f       	sbci	r20, 0xFF	; 255
    38fa:	5f 4f       	sbci	r21, 0xFF	; 255

000038fc <__divmodsi4_exit>:
    38fc:	08 95       	ret

000038fe <__divmodsi4_neg1>:
    38fe:	f6 f7       	brtc	.-4      	; 0x38fc <__divmodsi4_exit>
    3900:	90 95       	com	r25
    3902:	80 95       	com	r24
    3904:	70 95       	com	r23
    3906:	61 95       	neg	r22
    3908:	7f 4f       	sbci	r23, 0xFF	; 255
    390a:	8f 4f       	sbci	r24, 0xFF	; 255
    390c:	9f 4f       	sbci	r25, 0xFF	; 255
    390e:	08 95       	ret

00003910 <__prologue_saves__>:
    3910:	2f 92       	push	r2
    3912:	3f 92       	push	r3
    3914:	4f 92       	push	r4
    3916:	5f 92       	push	r5
    3918:	6f 92       	push	r6
    391a:	7f 92       	push	r7
    391c:	8f 92       	push	r8
    391e:	9f 92       	push	r9
    3920:	af 92       	push	r10
    3922:	bf 92       	push	r11
    3924:	cf 92       	push	r12
    3926:	df 92       	push	r13
    3928:	ef 92       	push	r14
    392a:	ff 92       	push	r15
    392c:	0f 93       	push	r16
    392e:	1f 93       	push	r17
    3930:	cf 93       	push	r28
    3932:	df 93       	push	r29
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	ca 1b       	sub	r28, r26
    393a:	db 0b       	sbc	r29, r27
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	09 94       	ijmp

00003948 <__epilogue_restores__>:
    3948:	2a 88       	ldd	r2, Y+18	; 0x12
    394a:	39 88       	ldd	r3, Y+17	; 0x11
    394c:	48 88       	ldd	r4, Y+16	; 0x10
    394e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3950:	6e 84       	ldd	r6, Y+14	; 0x0e
    3952:	7d 84       	ldd	r7, Y+13	; 0x0d
    3954:	8c 84       	ldd	r8, Y+12	; 0x0c
    3956:	9b 84       	ldd	r9, Y+11	; 0x0b
    3958:	aa 84       	ldd	r10, Y+10	; 0x0a
    395a:	b9 84       	ldd	r11, Y+9	; 0x09
    395c:	c8 84       	ldd	r12, Y+8	; 0x08
    395e:	df 80       	ldd	r13, Y+7	; 0x07
    3960:	ee 80       	ldd	r14, Y+6	; 0x06
    3962:	fd 80       	ldd	r15, Y+5	; 0x05
    3964:	0c 81       	ldd	r16, Y+4	; 0x04
    3966:	1b 81       	ldd	r17, Y+3	; 0x03
    3968:	aa 81       	ldd	r26, Y+2	; 0x02
    396a:	b9 81       	ldd	r27, Y+1	; 0x01
    396c:	ce 0f       	add	r28, r30
    396e:	d1 1d       	adc	r29, r1
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	ed 01       	movw	r28, r26
    397c:	08 95       	ret

0000397e <_exit>:
    397e:	f8 94       	cli

00003980 <__stop_program>:
    3980:	ff cf       	rjmp	.-2      	; 0x3980 <__stop_program>
